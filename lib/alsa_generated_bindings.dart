// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

class ALSA {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  ALSA(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  ALSA.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int access(
    ffi.Pointer<ffi.Char> __name,
    int __type,
  ) {
    return _access(
      __name,
      __type,
    );
  }

  late final _accessPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'access');
  late final _access =
      _accessPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int faccessat(
    int __fd,
    ffi.Pointer<ffi.Char> __file,
    int __type,
    int __flag,
  ) {
    return _faccessat(
      __fd,
      __file,
      __type,
      __flag,
    );
  }

  late final _faccessatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int)>>('faccessat');
  late final _faccessat = _faccessatPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int, int)>();

  int lseek(
    int __fd,
    int __offset,
    int __whence,
  ) {
    return _lseek(
      __fd,
      __offset,
      __whence,
    );
  }

  late final _lseekPtr =
      _lookup<ffi.NativeFunction<__off_t Function(ffi.Int, __off_t, ffi.Int)>>(
          'lseek');
  late final _lseek = _lseekPtr.asFunction<int Function(int, int, int)>();

  int close(
    int __fd,
  ) {
    return _close(
      __fd,
    );
  }

  late final _closePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('close');
  late final _close = _closePtr.asFunction<int Function(int)>();

  void closefrom(
    int __lowfd,
  ) {
    return _closefrom(
      __lowfd,
    );
  }

  late final _closefromPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('closefrom');
  late final _closefrom = _closefromPtr.asFunction<void Function(int)>();

  int read(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __nbytes,
  ) {
    return _read(
      __fd,
      __buf,
      __nbytes,
    );
  }

  late final _readPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Int, ffi.Pointer<ffi.Void>, ffi.Size)>>('read');
  late final _read =
      _readPtr.asFunction<int Function(int, ffi.Pointer<ffi.Void>, int)>();

  int write(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __n,
  ) {
    return _write(
      __fd,
      __buf,
      __n,
    );
  }

  late final _writePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Int, ffi.Pointer<ffi.Void>, ffi.Size)>>('write');
  late final _write =
      _writePtr.asFunction<int Function(int, ffi.Pointer<ffi.Void>, int)>();

  int pread(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __nbytes,
    int __offset,
  ) {
    return _pread(
      __fd,
      __buf,
      __nbytes,
      __offset,
    );
  }

  late final _preadPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Int, ffi.Pointer<ffi.Void>, ffi.Size, __off_t)>>('pread');
  late final _pread = _preadPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Void>, int, int)>();

  int pwrite(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __n,
    int __offset,
  ) {
    return _pwrite(
      __fd,
      __buf,
      __n,
      __offset,
    );
  }

  late final _pwritePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Int, ffi.Pointer<ffi.Void>, ffi.Size, __off_t)>>('pwrite');
  late final _pwrite = _pwritePtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Void>, int, int)>();

  int pipe(
    ffi.Pointer<ffi.Int> __pipedes,
  ) {
    return _pipe(
      __pipedes,
    );
  }

  late final _pipePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Int>)>>(
          'pipe');
  late final _pipe = _pipePtr.asFunction<int Function(ffi.Pointer<ffi.Int>)>();

  int alarm(
    int __seconds,
  ) {
    return _alarm(
      __seconds,
    );
  }

  late final _alarmPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.UnsignedInt)>>(
          'alarm');
  late final _alarm = _alarmPtr.asFunction<int Function(int)>();

  int sleep(
    int __seconds,
  ) {
    return _sleep(
      __seconds,
    );
  }

  late final _sleepPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.UnsignedInt)>>(
          'sleep');
  late final _sleep = _sleepPtr.asFunction<int Function(int)>();

  int ualarm(
    int __value,
    int __interval,
  ) {
    return _ualarm(
      __value,
      __interval,
    );
  }

  late final _ualarmPtr = _lookup<
      ffi.NativeFunction<
          __useconds_t Function(__useconds_t, __useconds_t)>>('ualarm');
  late final _ualarm = _ualarmPtr.asFunction<int Function(int, int)>();

  int usleep(
    int __useconds,
  ) {
    return _usleep(
      __useconds,
    );
  }

  late final _usleepPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(__useconds_t)>>('usleep');
  late final _usleep = _usleepPtr.asFunction<int Function(int)>();

  int pause() {
    return _pause();
  }

  late final _pausePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('pause');
  late final _pause = _pausePtr.asFunction<int Function()>();

  int chown(
    ffi.Pointer<ffi.Char> __file,
    int __owner,
    int __group,
  ) {
    return _chown(
      __file,
      __owner,
      __group,
    );
  }

  late final _chownPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, __uid_t, __gid_t)>>('chown');
  late final _chown =
      _chownPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int, int)>();

  int fchown(
    int __fd,
    int __owner,
    int __group,
  ) {
    return _fchown(
      __fd,
      __owner,
      __group,
    );
  }

  late final _fchownPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, __uid_t, __gid_t)>>(
          'fchown');
  late final _fchown = _fchownPtr.asFunction<int Function(int, int, int)>();

  int lchown(
    ffi.Pointer<ffi.Char> __file,
    int __owner,
    int __group,
  ) {
    return _lchown(
      __file,
      __owner,
      __group,
    );
  }

  late final _lchownPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, __uid_t, __gid_t)>>('lchown');
  late final _lchown =
      _lchownPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int, int)>();

  int fchownat(
    int __fd,
    ffi.Pointer<ffi.Char> __file,
    int __owner,
    int __group,
    int __flag,
  ) {
    return _fchownat(
      __fd,
      __file,
      __owner,
      __group,
      __flag,
    );
  }

  late final _fchownatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, __uid_t, __gid_t,
              ffi.Int)>>('fchownat');
  late final _fchownat = _fchownatPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int, int, int)>();

  int chdir(
    ffi.Pointer<ffi.Char> __path,
  ) {
    return _chdir(
      __path,
    );
  }

  late final _chdirPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'chdir');
  late final _chdir =
      _chdirPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int fchdir(
    int __fd,
  ) {
    return _fchdir(
      __fd,
    );
  }

  late final _fchdirPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('fchdir');
  late final _fchdir = _fchdirPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Char> getcwd(
    ffi.Pointer<ffi.Char> __buf,
    int __size,
  ) {
    return _getcwd(
      __buf,
      __size,
    );
  }

  late final _getcwdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Size)>>('getcwd');
  late final _getcwd = _getcwdPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> getwd(
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _getwd(
      __buf,
    );
  }

  late final _getwdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getwd');
  late final _getwd = _getwdPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int dup(
    int __fd,
  ) {
    return _dup(
      __fd,
    );
  }

  late final _dupPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('dup');
  late final _dup = _dupPtr.asFunction<int Function(int)>();

  int dup2(
    int __fd,
    int __fd2,
  ) {
    return _dup2(
      __fd,
      __fd2,
    );
  }

  late final _dup2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>('dup2');
  late final _dup2 = _dup2Ptr.asFunction<int Function(int, int)>();

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> ___environ =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Char>>>('__environ');

  ffi.Pointer<ffi.Pointer<ffi.Char>> get __environ => ___environ.value;

  set __environ(ffi.Pointer<ffi.Pointer<ffi.Char>> value) =>
      ___environ.value = value;

  int execve(
    ffi.Pointer<ffi.Char> __path,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __argv,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __envp,
  ) {
    return _execve(
      __path,
      __argv,
      __envp,
    );
  }

  late final _execvePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('execve');
  late final _execve = _execvePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int fexecve(
    int __fd,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __argv,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __envp,
  ) {
    return _fexecve(
      __fd,
      __argv,
      __envp,
    );
  }

  late final _fexecvePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('fexecve');
  late final _fexecve = _fexecvePtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int execv(
    ffi.Pointer<ffi.Char> __path,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __argv,
  ) {
    return _execv(
      __path,
      __argv,
    );
  }

  late final _execvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('execv');
  late final _execv = _execvPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int execle(
    ffi.Pointer<ffi.Char> __path,
    ffi.Pointer<ffi.Char> __arg,
  ) {
    return _execle(
      __path,
      __arg,
    );
  }

  late final _execlePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('execle');
  late final _execle = _execlePtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int execl(
    ffi.Pointer<ffi.Char> __path,
    ffi.Pointer<ffi.Char> __arg,
  ) {
    return _execl(
      __path,
      __arg,
    );
  }

  late final _execlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('execl');
  late final _execl = _execlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int execvp(
    ffi.Pointer<ffi.Char> __file,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __argv,
  ) {
    return _execvp(
      __file,
      __argv,
    );
  }

  late final _execvpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('execvp');
  late final _execvp = _execvpPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int execlp(
    ffi.Pointer<ffi.Char> __file,
    ffi.Pointer<ffi.Char> __arg,
  ) {
    return _execlp(
      __file,
      __arg,
    );
  }

  late final _execlpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('execlp');
  late final _execlp = _execlpPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int nice(
    int __inc,
  ) {
    return _nice(
      __inc,
    );
  }

  late final _nicePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('nice');
  late final _nice = _nicePtr.asFunction<int Function(int)>();

  void _exit(
    int __status,
  ) {
    return __exit(
      __status,
    );
  }

  late final __exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_exit');
  late final __exit = __exitPtr.asFunction<void Function(int)>();

  int pathconf(
    ffi.Pointer<ffi.Char> __path,
    int __name,
  ) {
    return _pathconf(
      __path,
      __name,
    );
  }

  late final _pathconfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Char>, ffi.Int)>>('pathconf');
  late final _pathconf =
      _pathconfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int fpathconf(
    int __fd,
    int __name,
  ) {
    return _fpathconf(
      __fd,
      __name,
    );
  }

  late final _fpathconfPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Int, ffi.Int)>>(
          'fpathconf');
  late final _fpathconf = _fpathconfPtr.asFunction<int Function(int, int)>();

  int sysconf(
    int __name,
  ) {
    return _sysconf(
      __name,
    );
  }

  late final _sysconfPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Int)>>('sysconf');
  late final _sysconf = _sysconfPtr.asFunction<int Function(int)>();

  int confstr(
    int __name,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _confstr(
      __name,
      __buf,
      __len,
    );
  }

  late final _confstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Size)>>('confstr');
  late final _confstr =
      _confstrPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int getpid() {
    return _getpid();
  }

  late final _getpidPtr =
      _lookup<ffi.NativeFunction<__pid_t Function()>>('getpid');
  late final _getpid = _getpidPtr.asFunction<int Function()>();

  int getppid() {
    return _getppid();
  }

  late final _getppidPtr =
      _lookup<ffi.NativeFunction<__pid_t Function()>>('getppid');
  late final _getppid = _getppidPtr.asFunction<int Function()>();

  int getpgrp() {
    return _getpgrp();
  }

  late final _getpgrpPtr =
      _lookup<ffi.NativeFunction<__pid_t Function()>>('getpgrp');
  late final _getpgrp = _getpgrpPtr.asFunction<int Function()>();

  int __getpgid(
    int __pid,
  ) {
    return ___getpgid(
      __pid,
    );
  }

  late final ___getpgidPtr =
      _lookup<ffi.NativeFunction<__pid_t Function(__pid_t)>>('__getpgid');
  late final ___getpgid = ___getpgidPtr.asFunction<int Function(int)>();

  int getpgid(
    int __pid,
  ) {
    return _getpgid(
      __pid,
    );
  }

  late final _getpgidPtr =
      _lookup<ffi.NativeFunction<__pid_t Function(__pid_t)>>('getpgid');
  late final _getpgid = _getpgidPtr.asFunction<int Function(int)>();

  int setpgid(
    int __pid,
    int __pgid,
  ) {
    return _setpgid(
      __pid,
      __pgid,
    );
  }

  late final _setpgidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(__pid_t, __pid_t)>>(
          'setpgid');
  late final _setpgid = _setpgidPtr.asFunction<int Function(int, int)>();

  int setpgrp() {
    return _setpgrp();
  }

  late final _setpgrpPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('setpgrp');
  late final _setpgrp = _setpgrpPtr.asFunction<int Function()>();

  int setsid() {
    return _setsid();
  }

  late final _setsidPtr =
      _lookup<ffi.NativeFunction<__pid_t Function()>>('setsid');
  late final _setsid = _setsidPtr.asFunction<int Function()>();

  int getsid(
    int __pid,
  ) {
    return _getsid(
      __pid,
    );
  }

  late final _getsidPtr =
      _lookup<ffi.NativeFunction<__pid_t Function(__pid_t)>>('getsid');
  late final _getsid = _getsidPtr.asFunction<int Function(int)>();

  int getuid() {
    return _getuid();
  }

  late final _getuidPtr =
      _lookup<ffi.NativeFunction<__uid_t Function()>>('getuid');
  late final _getuid = _getuidPtr.asFunction<int Function()>();

  int geteuid() {
    return _geteuid();
  }

  late final _geteuidPtr =
      _lookup<ffi.NativeFunction<__uid_t Function()>>('geteuid');
  late final _geteuid = _geteuidPtr.asFunction<int Function()>();

  int getgid() {
    return _getgid();
  }

  late final _getgidPtr =
      _lookup<ffi.NativeFunction<__gid_t Function()>>('getgid');
  late final _getgid = _getgidPtr.asFunction<int Function()>();

  int getegid() {
    return _getegid();
  }

  late final _getegidPtr =
      _lookup<ffi.NativeFunction<__gid_t Function()>>('getegid');
  late final _getegid = _getegidPtr.asFunction<int Function()>();

  int getgroups(
    int __size,
    ffi.Pointer<__gid_t> __list,
  ) {
    return _getgroups(
      __size,
      __list,
    );
  }

  late final _getgroupsPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<__gid_t>)>>(
      'getgroups');
  late final _getgroups =
      _getgroupsPtr.asFunction<int Function(int, ffi.Pointer<__gid_t>)>();

  int setuid(
    int __uid,
  ) {
    return _setuid(
      __uid,
    );
  }

  late final _setuidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(__uid_t)>>('setuid');
  late final _setuid = _setuidPtr.asFunction<int Function(int)>();

  int setreuid(
    int __ruid,
    int __euid,
  ) {
    return _setreuid(
      __ruid,
      __euid,
    );
  }

  late final _setreuidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(__uid_t, __uid_t)>>(
          'setreuid');
  late final _setreuid = _setreuidPtr.asFunction<int Function(int, int)>();

  int seteuid(
    int __uid,
  ) {
    return _seteuid(
      __uid,
    );
  }

  late final _seteuidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(__uid_t)>>('seteuid');
  late final _seteuid = _seteuidPtr.asFunction<int Function(int)>();

  int setgid(
    int __gid,
  ) {
    return _setgid(
      __gid,
    );
  }

  late final _setgidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(__gid_t)>>('setgid');
  late final _setgid = _setgidPtr.asFunction<int Function(int)>();

  int setregid(
    int __rgid,
    int __egid,
  ) {
    return _setregid(
      __rgid,
      __egid,
    );
  }

  late final _setregidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(__gid_t, __gid_t)>>(
          'setregid');
  late final _setregid = _setregidPtr.asFunction<int Function(int, int)>();

  int setegid(
    int __gid,
  ) {
    return _setegid(
      __gid,
    );
  }

  late final _setegidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(__gid_t)>>('setegid');
  late final _setegid = _setegidPtr.asFunction<int Function(int)>();

  int fork() {
    return _fork();
  }

  late final _forkPtr = _lookup<ffi.NativeFunction<__pid_t Function()>>('fork');
  late final _fork = _forkPtr.asFunction<int Function()>();

  int vfork() {
    return _vfork();
  }

  late final _vforkPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('vfork');
  late final _vfork = _vforkPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> ttyname(
    int __fd,
  ) {
    return _ttyname(
      __fd,
    );
  }

  late final _ttynamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'ttyname');
  late final _ttyname =
      _ttynamePtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int ttyname_r(
    int __fd,
    ffi.Pointer<ffi.Char> __buf,
    int __buflen,
  ) {
    return _ttyname_r(
      __fd,
      __buf,
      __buflen,
    );
  }

  late final _ttyname_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Size)>>('ttyname_r');
  late final _ttyname_r =
      _ttyname_rPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int isatty(
    int __fd,
  ) {
    return _isatty(
      __fd,
    );
  }

  late final _isattyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('isatty');
  late final _isatty = _isattyPtr.asFunction<int Function(int)>();

  int ttyslot() {
    return _ttyslot();
  }

  late final _ttyslotPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ttyslot');
  late final _ttyslot = _ttyslotPtr.asFunction<int Function()>();

  int link(
    ffi.Pointer<ffi.Char> __from,
    ffi.Pointer<ffi.Char> __to,
  ) {
    return _link(
      __from,
      __to,
    );
  }

  late final _linkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('link');
  late final _link = _linkPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int linkat(
    int __fromfd,
    ffi.Pointer<ffi.Char> __from,
    int __tofd,
    ffi.Pointer<ffi.Char> __to,
    int __flags,
  ) {
    return _linkat(
      __fromfd,
      __from,
      __tofd,
      __to,
      __flags,
    );
  }

  late final _linkatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('linkat');
  late final _linkat = _linkatPtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int)>();

  int symlink(
    ffi.Pointer<ffi.Char> __from,
    ffi.Pointer<ffi.Char> __to,
  ) {
    return _symlink(
      __from,
      __to,
    );
  }

  late final _symlinkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('symlink');
  late final _symlink = _symlinkPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int readlink(
    ffi.Pointer<ffi.Char> __path,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _readlink(
      __path,
      __buf,
      __len,
    );
  }

  late final _readlinkPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('readlink');
  late final _readlink = _readlinkPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int symlinkat(
    ffi.Pointer<ffi.Char> __from,
    int __tofd,
    ffi.Pointer<ffi.Char> __to,
  ) {
    return _symlinkat(
      __from,
      __tofd,
      __to,
    );
  }

  late final _symlinkatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('symlinkat');
  late final _symlinkat = _symlinkatPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int readlinkat(
    int __fd,
    ffi.Pointer<ffi.Char> __path,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _readlinkat(
      __fd,
      __path,
      __buf,
      __len,
    );
  }

  late final _readlinkatPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Int, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('readlinkat');
  late final _readlinkat = _readlinkatPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int unlink(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _unlink(
      __name,
    );
  }

  late final _unlinkPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'unlink');
  late final _unlink =
      _unlinkPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int unlinkat(
    int __fd,
    ffi.Pointer<ffi.Char> __name,
    int __flag,
  ) {
    return _unlinkat(
      __fd,
      __name,
      __flag,
    );
  }

  late final _unlinkatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('unlinkat');
  late final _unlinkat =
      _unlinkatPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int rmdir(
    ffi.Pointer<ffi.Char> __path,
  ) {
    return _rmdir(
      __path,
    );
  }

  late final _rmdirPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'rmdir');
  late final _rmdir =
      _rmdirPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int tcgetpgrp(
    int __fd,
  ) {
    return _tcgetpgrp(
      __fd,
    );
  }

  late final _tcgetpgrpPtr =
      _lookup<ffi.NativeFunction<__pid_t Function(ffi.Int)>>('tcgetpgrp');
  late final _tcgetpgrp = _tcgetpgrpPtr.asFunction<int Function(int)>();

  int tcsetpgrp(
    int __fd,
    int __pgrp_id,
  ) {
    return _tcsetpgrp(
      __fd,
      __pgrp_id,
    );
  }

  late final _tcsetpgrpPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, __pid_t)>>(
          'tcsetpgrp');
  late final _tcsetpgrp = _tcsetpgrpPtr.asFunction<int Function(int, int)>();

  ffi.Pointer<ffi.Char> getlogin() {
    return _getlogin();
  }

  late final _getloginPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>('getlogin');
  late final _getlogin =
      _getloginPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  int getlogin_r(
    ffi.Pointer<ffi.Char> __name,
    int __name_len,
  ) {
    return _getlogin_r(
      __name,
      __name_len,
    );
  }

  late final _getlogin_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('getlogin_r');
  late final _getlogin_r =
      _getlogin_rPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int setlogin(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _setlogin(
      __name,
    );
  }

  late final _setloginPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'setlogin');
  late final _setlogin =
      _setloginPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  late final ffi.Pointer<ffi.Pointer<ffi.Char>> _optarg =
      _lookup<ffi.Pointer<ffi.Char>>('optarg');

  ffi.Pointer<ffi.Char> get optarg => _optarg.value;

  set optarg(ffi.Pointer<ffi.Char> value) => _optarg.value = value;

  late final ffi.Pointer<ffi.Int> _optind = _lookup<ffi.Int>('optind');

  int get optind => _optind.value;

  set optind(int value) => _optind.value = value;

  late final ffi.Pointer<ffi.Int> _opterr = _lookup<ffi.Int>('opterr');

  int get opterr => _opterr.value;

  set opterr(int value) => _opterr.value = value;

  late final ffi.Pointer<ffi.Int> _optopt = _lookup<ffi.Int>('optopt');

  int get optopt => _optopt.value;

  set optopt(int value) => _optopt.value = value;

  int getopt(
    int ___argc,
    ffi.Pointer<ffi.Pointer<ffi.Char>> ___argv,
    ffi.Pointer<ffi.Char> __shortopts,
  ) {
    return _getopt(
      ___argc,
      ___argv,
      __shortopts,
    );
  }

  late final _getoptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('getopt');
  late final _getopt = _getoptPtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  int gethostname(
    ffi.Pointer<ffi.Char> __name,
    int __len,
  ) {
    return _gethostname(
      __name,
      __len,
    );
  }

  late final _gethostnamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('gethostname');
  late final _gethostname =
      _gethostnamePtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int sethostname(
    ffi.Pointer<ffi.Char> __name,
    int __len,
  ) {
    return _sethostname(
      __name,
      __len,
    );
  }

  late final _sethostnamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('sethostname');
  late final _sethostname =
      _sethostnamePtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int sethostid(
    int __id,
  ) {
    return _sethostid(
      __id,
    );
  }

  late final _sethostidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Long)>>('sethostid');
  late final _sethostid = _sethostidPtr.asFunction<int Function(int)>();

  int getdomainname(
    ffi.Pointer<ffi.Char> __name,
    int __len,
  ) {
    return _getdomainname(
      __name,
      __len,
    );
  }

  late final _getdomainnamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('getdomainname');
  late final _getdomainname =
      _getdomainnamePtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int setdomainname(
    ffi.Pointer<ffi.Char> __name,
    int __len,
  ) {
    return _setdomainname(
      __name,
      __len,
    );
  }

  late final _setdomainnamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('setdomainname');
  late final _setdomainname =
      _setdomainnamePtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int vhangup() {
    return _vhangup();
  }

  late final _vhangupPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('vhangup');
  late final _vhangup = _vhangupPtr.asFunction<int Function()>();

  int revoke(
    ffi.Pointer<ffi.Char> __file,
  ) {
    return _revoke(
      __file,
    );
  }

  late final _revokePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'revoke');
  late final _revoke =
      _revokePtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int profil(
    ffi.Pointer<ffi.UnsignedShort> __sample_buffer,
    int __size,
    int __offset,
    int __scale,
  ) {
    return _profil(
      __sample_buffer,
      __size,
      __offset,
      __scale,
    );
  }

  late final _profilPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Size, ffi.Size,
              ffi.UnsignedInt)>>('profil');
  late final _profil = _profilPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, int, int, int)>();

  int acct(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _acct(
      __name,
    );
  }

  late final _acctPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'acct');
  late final _acct = _acctPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> getusershell() {
    return _getusershell();
  }

  late final _getusershellPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'getusershell');
  late final _getusershell =
      _getusershellPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  void endusershell() {
    return _endusershell();
  }

  late final _endusershellPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('endusershell');
  late final _endusershell = _endusershellPtr.asFunction<void Function()>();

  void setusershell() {
    return _setusershell();
  }

  late final _setusershellPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('setusershell');
  late final _setusershell = _setusershellPtr.asFunction<void Function()>();

  int daemon(
    int __nochdir,
    int __noclose,
  ) {
    return _daemon(
      __nochdir,
      __noclose,
    );
  }

  late final _daemonPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>('daemon');
  late final _daemon = _daemonPtr.asFunction<int Function(int, int)>();

  int chroot(
    ffi.Pointer<ffi.Char> __path,
  ) {
    return _chroot(
      __path,
    );
  }

  late final _chrootPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'chroot');
  late final _chroot =
      _chrootPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> getpass(
    ffi.Pointer<ffi.Char> __prompt,
  ) {
    return _getpass(
      __prompt,
    );
  }

  late final _getpassPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getpass');
  late final _getpass = _getpassPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int fsync(
    int __fd,
  ) {
    return _fsync(
      __fd,
    );
  }

  late final _fsyncPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('fsync');
  late final _fsync = _fsyncPtr.asFunction<int Function(int)>();

  int gethostid() {
    return _gethostid();
  }

  late final _gethostidPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('gethostid');
  late final _gethostid = _gethostidPtr.asFunction<int Function()>();

  void sync1() {
    return _sync1();
  }

  late final _sync1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('sync');
  late final _sync1 = _sync1Ptr.asFunction<void Function()>();

  int getpagesize() {
    return _getpagesize();
  }

  late final _getpagesizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getpagesize');
  late final _getpagesize = _getpagesizePtr.asFunction<int Function()>();

  int getdtablesize() {
    return _getdtablesize();
  }

  late final _getdtablesizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getdtablesize');
  late final _getdtablesize = _getdtablesizePtr.asFunction<int Function()>();

  int truncate(
    ffi.Pointer<ffi.Char> __file,
    int __length,
  ) {
    return _truncate(
      __file,
      __length,
    );
  }

  late final _truncatePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, __off_t)>>(
      'truncate');
  late final _truncate =
      _truncatePtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int ftruncate(
    int __fd,
    int __length,
  ) {
    return _ftruncate(
      __fd,
      __length,
    );
  }

  late final _ftruncatePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, __off_t)>>(
          'ftruncate');
  late final _ftruncate = _ftruncatePtr.asFunction<int Function(int, int)>();

  int brk(
    ffi.Pointer<ffi.Void> __addr,
  ) {
    return _brk(
      __addr,
    );
  }

  late final _brkPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'brk');
  late final _brk = _brkPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> sbrk(
    int __delta,
  ) {
    return _sbrk(
      __delta,
    );
  }

  late final _sbrkPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.IntPtr)>>(
          'sbrk');
  late final _sbrk = _sbrkPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int syscall(
    int __sysno,
  ) {
    return _syscall(
      __sysno,
    );
  }

  late final _syscallPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Long)>>('syscall');
  late final _syscall = _syscallPtr.asFunction<int Function(int)>();

  int lockf(
    int __fd,
    int __cmd,
    int __len,
  ) {
    return _lockf(
      __fd,
      __cmd,
      __len,
    );
  }

  late final _lockfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int, __off_t)>>(
          'lockf');
  late final _lockf = _lockfPtr.asFunction<int Function(int, int, int)>();

  int fdatasync(
    int __fildes,
  ) {
    return _fdatasync(
      __fildes,
    );
  }

  late final _fdatasyncPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('fdatasync');
  late final _fdatasync = _fdatasyncPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Char> crypt(
    ffi.Pointer<ffi.Char> __key,
    ffi.Pointer<ffi.Char> __salt,
  ) {
    return _crypt(
      __key,
      __salt,
    );
  }

  late final _cryptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('crypt');
  late final _crypt = _cryptPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int getentropy(
    ffi.Pointer<ffi.Void> __buffer,
    int __length,
  ) {
    return _getentropy(
      __buffer,
      __length,
    );
  }

  late final _getentropyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Size)>>('getentropy');
  late final _getentropy =
      _getentropyPtr.asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  late final ffi.Pointer<ffi.Pointer<FILE>> _stdin =
      _lookup<ffi.Pointer<FILE>>('stdin');

  ffi.Pointer<FILE> get stdin => _stdin.value;

  set stdin(ffi.Pointer<FILE> value) => _stdin.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> _stdout =
      _lookup<ffi.Pointer<FILE>>('stdout');

  ffi.Pointer<FILE> get stdout => _stdout.value;

  set stdout(ffi.Pointer<FILE> value) => _stdout.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> _stderr =
      _lookup<ffi.Pointer<FILE>>('stderr');

  ffi.Pointer<FILE> get stderr => _stderr.value;

  set stderr(ffi.Pointer<FILE> value) => _stderr.value = value;

  int remove(
    ffi.Pointer<ffi.Char> __filename,
  ) {
    return _remove(
      __filename,
    );
  }

  late final _removePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'remove');
  late final _remove =
      _removePtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int rename(
    ffi.Pointer<ffi.Char> __old,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _rename(
      __old,
      __new,
    );
  }

  late final _renamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('rename');
  late final _rename = _renamePtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int renameat(
    int __oldfd,
    ffi.Pointer<ffi.Char> __old,
    int __newfd,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _renameat(
      __oldfd,
      __old,
      __newfd,
      __new,
    );
  }

  late final _renameatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('renameat');
  late final _renameat = _renameatPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int fclose(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fclose(
      __stream,
    );
  }

  late final _fclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fclose');
  late final _fclose = _fclosePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> tmpfile() {
    return _tmpfile();
  }

  late final _tmpfilePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function()>>('tmpfile');
  late final _tmpfile = _tmpfilePtr.asFunction<ffi.Pointer<FILE> Function()>();

  ffi.Pointer<ffi.Char> tmpnam(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _tmpnam(
      arg0,
    );
  }

  late final _tmpnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam');
  late final _tmpnam = _tmpnamPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tmpnam_r(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _tmpnam_r(
      __s,
    );
  }

  late final _tmpnam_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam_r');
  late final _tmpnam_r = _tmpnam_rPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tempnam(
    ffi.Pointer<ffi.Char> __dir,
    ffi.Pointer<ffi.Char> __pfx,
  ) {
    return _tempnam(
      __dir,
      __pfx,
    );
  }

  late final _tempnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('tempnam');
  late final _tempnam = _tempnamPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fflush(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush(
      __stream,
    );
  }

  late final _fflushPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush');
  late final _fflush = _fflushPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fflush_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush_unlocked(
      __stream,
    );
  }

  late final _fflush_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush_unlocked');
  late final _fflush_unlocked =
      _fflush_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fopen(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fopen(
      __filename,
      __modes,
    );
  }

  late final _fopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('fopen');
  late final _fopen = _fopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> freopen(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
    ffi.Pointer<FILE> __stream,
  ) {
    return _freopen(
      __filename,
      __modes,
      __stream,
    );
  }

  late final _freopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('freopen');
  late final _freopen = _freopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fdopen(
    int __fd,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fdopen(
      __fd,
      __modes,
    );
  }

  late final _fdopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Int, ffi.Pointer<ffi.Char>)>>('fdopen');
  late final _fdopen = _fdopenPtr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> fmemopen(
    ffi.Pointer<ffi.Void> __s,
    int __len,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fmemopen(
      __s,
      __len,
      __modes,
    );
  }

  late final _fmemopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('fmemopen');
  late final _fmemopen = _fmemopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> open_memstream(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __bufloc,
    ffi.Pointer<ffi.Size> __sizeloc,
  ) {
    return _open_memstream(
      __bufloc,
      __sizeloc,
    );
  }

  late final _open_memstreamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>)>>('open_memstream');
  late final _open_memstream = _open_memstreamPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>)>();

  void setbuf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _setbuf(
      __stream,
      __buf,
    );
  }

  late final _setbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('setbuf');
  late final _setbuf = _setbufPtr
      .asFunction<void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int setvbuf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __modes,
    int __n,
  ) {
    return _setvbuf(
      __stream,
      __buf,
      __modes,
      __n,
    );
  }

  late final _setvbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Size)>>('setvbuf');
  late final _setvbuf = _setvbufPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int, int)>();

  void setbuffer(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __size,
  ) {
    return _setbuffer(
      __stream,
      __buf,
      __size,
    );
  }

  late final _setbufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('setbuffer');
  late final _setbuffer = _setbufferPtr.asFunction<
      void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  void setlinebuf(
    ffi.Pointer<FILE> __stream,
  ) {
    return _setlinebuf(
      __stream,
    );
  }

  late final _setlinebufPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'setlinebuf');
  late final _setlinebuf =
      _setlinebufPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fprintf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fprintf(
      __stream,
      __format,
    );
  }

  late final _fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fprintf');
  late final _fprintf = _fprintfPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int printf(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _printf(
      __format,
    );
  }

  late final _printfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'printf');
  late final _printf =
      _printfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sprintf(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sprintf(
      __s,
      __format,
    );
  }

  late final _sprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sprintf');
  late final _sprintf = _sprintfPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfprintf(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<_va_list_tag_> __arg,
  ) {
    return _vfprintf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<_va_list_tag_>)>>('vfprintf');
  late final _vfprintf = _vfprintfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<_va_list_tag_>)>();

  int vprintf(
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<_va_list_tag_> __arg,
  ) {
    return _vprintf(
      __format,
      __arg,
    );
  }

  late final _vprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<_va_list_tag_>)>>('vprintf');
  late final _vprintf = _vprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<_va_list_tag_>)>();

  int vsprintf(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<_va_list_tag_> __arg,
  ) {
    return _vsprintf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<_va_list_tag_>)>>('vsprintf');
  late final _vsprintf = _vsprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<_va_list_tag_>)>();

  int snprintf(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _snprintf(
      __s,
      __maxlen,
      __format,
    );
  }

  late final _snprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('snprintf');
  late final _snprintf = _snprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int vsnprintf(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<_va_list_tag_> __arg,
  ) {
    return _vsnprintf(
      __s,
      __maxlen,
      __format,
      __arg,
    );
  }

  late final _vsnprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Char>, ffi.Pointer<_va_list_tag_>)>>('vsnprintf');
  late final _vsnprintf = _vsnprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<_va_list_tag_>)>();

  int vdprintf(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
    ffi.Pointer<_va_list_tag_> __arg,
  ) {
    return _vdprintf(
      __fd,
      __fmt,
      __arg,
    );
  }

  late final _vdprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>,
              ffi.Pointer<_va_list_tag_>)>>('vdprintf');
  late final _vdprintf = _vdprintfPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<_va_list_tag_>)>();

  int dprintf(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
  ) {
    return _dprintf(
      __fd,
      __fmt,
    );
  }

  late final _dprintfPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>)>>(
      'dprintf');
  late final _dprintf =
      _dprintfPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  int fscanf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fscanf(
      __stream,
      __format,
    );
  }

  late final _fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf = _fscanfPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int scanf(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _scanf(
      __format,
    );
  }

  late final _scanfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf =
      _scanfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sscanf(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sscanf(
      __s,
      __format,
    );
  }

  late final _sscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf = _sscanfPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfscanf(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<_va_list_tag_> __arg,
  ) {
    return _vfscanf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<_va_list_tag_>)>>('vfscanf');
  late final _vfscanf = _vfscanfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<_va_list_tag_>)>();

  int vscanf(
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<_va_list_tag_> __arg,
  ) {
    return _vscanf(
      __format,
      __arg,
    );
  }

  late final _vscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<_va_list_tag_>)>>('vscanf');
  late final _vscanf = _vscanfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<_va_list_tag_>)>();

  int vsscanf(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<_va_list_tag_> __arg,
  ) {
    return _vsscanf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<_va_list_tag_>)>>('vsscanf');
  late final _vsscanf = _vsscanfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<_va_list_tag_>)>();

  int fgetc(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc(
      __stream,
    );
  }

  late final _fgetcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('fgetc');
  late final _fgetc = _fgetcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getc(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc(
      __stream,
    );
  }

  late final _getcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getc');
  late final _getc = _getcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar() {
    return _getchar();
  }

  late final _getcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar');
  late final _getchar = _getcharPtr.asFunction<int Function()>();

  int getc_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc_unlocked(
      __stream,
    );
  }

  late final _getc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'getc_unlocked');
  late final _getc_unlocked =
      _getc_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar_unlocked() {
    return _getchar_unlocked();
  }

  late final _getchar_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar_unlocked');
  late final _getchar_unlocked =
      _getchar_unlockedPtr.asFunction<int Function()>();

  int fgetc_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc_unlocked(
      __stream,
    );
  }

  late final _fgetc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fgetc_unlocked');
  late final _fgetc_unlocked =
      _fgetc_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fputc(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc(
      __c,
      __stream,
    );
  }

  late final _fputcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc');
  late final _fputc =
      _fputcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc(
      __c,
      __stream,
    );
  }

  late final _putcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc');
  late final _putc =
      _putcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar(
    int __c,
  ) {
    return _putchar(
      __c,
    );
  }

  late final _putcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('putchar');
  late final _putchar = _putcharPtr.asFunction<int Function(int)>();

  int fputc_unlocked(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc_unlocked(
      __c,
      __stream,
    );
  }

  late final _fputc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc_unlocked');
  late final _fputc_unlocked =
      _fputc_unlockedPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc_unlocked(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc_unlocked(
      __c,
      __stream,
    );
  }

  late final _putc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc_unlocked');
  late final _putc_unlocked =
      _putc_unlockedPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar_unlocked(
    int __c,
  ) {
    return _putchar_unlocked(
      __c,
    );
  }

  late final _putchar_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'putchar_unlocked');
  late final _putchar_unlocked =
      _putchar_unlockedPtr.asFunction<int Function(int)>();

  int getw(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getw(
      __stream,
    );
  }

  late final _getwPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getw');
  late final _getw = _getwPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int putw(
    int __w,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putw(
      __w,
      __stream,
    );
  }

  late final _putwPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putw');
  late final _putw =
      _putwPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Char> fgets(
    ffi.Pointer<ffi.Char> __s,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgets(
      __s,
      __n,
      __stream,
    );
  }

  late final _fgetsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<FILE>)>>('fgets');
  late final _fgets = _fgetsPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<FILE>)>();

  int __getdelim(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Size> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return ___getdelim(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final ___getdelimPtr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>,
              ffi.Int,
              ffi.Pointer<FILE>)>>('__getdelim');
  late final ___getdelim = ___getdelimPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>,
          int, ffi.Pointer<FILE>)>();

  int getdelim(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Size> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getdelim(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final _getdelimPtr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>, ffi.Int, ffi.Pointer<FILE>)>>('getdelim');
  late final _getdelim = _getdelimPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>,
          int, ffi.Pointer<FILE>)>();

  int getline(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Size> __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getline(
      __lineptr,
      __n,
      __stream,
    );
  }

  late final _getlinePtr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>, ffi.Pointer<FILE>)>>('getline');
  late final _getline = _getlinePtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<FILE>)>();

  int fputs(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputs(
      __s,
      __stream,
    );
  }

  late final _fputsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('fputs');
  late final _fputs = _fputsPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  int puts(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _puts(
      __s,
    );
  }

  late final _putsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'puts');
  late final _puts = _putsPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int ungetc(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _ungetc(
      __c,
      __stream,
    );
  }

  late final _ungetcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'ungetc');
  late final _ungetc =
      _ungetcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int fread(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<FILE>)>>('fread');
  late final _fread = _freadPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __s,
  ) {
    return _fwrite(
      __ptr,
      __size,
      __n,
      __s,
    );
  }

  late final _fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<FILE>)>>('fwrite');
  late final _fwrite = _fwritePtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fread_unlocked(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread_unlocked(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread_unlockedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<FILE>)>>('fread_unlocked');
  late final _fread_unlocked = _fread_unlockedPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite_unlocked(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fwrite_unlocked(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fwrite_unlockedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<FILE>)>>('fwrite_unlocked');
  late final _fwrite_unlocked = _fwrite_unlockedPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fseek(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseek(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseekPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Long, ffi.Int)>>('fseek');
  late final _fseek =
      _fseekPtr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftell(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftell(
      __stream,
    );
  }

  late final _ftellPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<FILE>)>>(
          'ftell');
  late final _ftell = _ftellPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void rewind(
    ffi.Pointer<FILE> __stream,
  ) {
    return _rewind(
      __stream,
    );
  }

  late final _rewindPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'rewind');
  late final _rewind =
      _rewindPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fseeko(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseeko(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseekoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, __off_t, ffi.Int)>>('fseeko');
  late final _fseeko =
      _fseekoPtr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftello(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftello(
      __stream,
    );
  }

  late final _ftelloPtr =
      _lookup<ffi.NativeFunction<__off_t Function(ffi.Pointer<FILE>)>>(
          'ftello');
  late final _ftello = _ftelloPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetpos(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fgetpos(
      __stream,
      __pos,
    );
  }

  late final _fgetposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fgetpos');
  late final _fgetpos = _fgetposPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  int fsetpos(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fsetpos(
      __stream,
      __pos,
    );
  }

  late final _fsetposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fsetpos');
  late final _fsetpos = _fsetposPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  void clearerr(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr(
      __stream,
    );
  }

  late final _clearerrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr');
  late final _clearerr =
      _clearerrPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof(
      __stream,
    );
  }

  late final _feofPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('feof');
  late final _feof = _feofPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror(
      __stream,
    );
  }

  late final _ferrorPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror');
  late final _ferror = _ferrorPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void clearerr_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr_unlocked(
      __stream,
    );
  }

  late final _clearerr_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr_unlocked');
  late final _clearerr_unlocked =
      _clearerr_unlockedPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof_unlocked(
      __stream,
    );
  }

  late final _feof_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'feof_unlocked');
  late final _feof_unlocked =
      _feof_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror_unlocked(
      __stream,
    );
  }

  late final _ferror_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror_unlocked');
  late final _ferror_unlocked =
      _ferror_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void perror(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _perror(
      __s,
    );
  }

  late final _perrorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'perror');
  late final _perror =
      _perrorPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int fileno(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno(
      __stream,
    );
  }

  late final _filenoPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno');
  late final _fileno = _filenoPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fileno_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno_unlocked(
      __stream,
    );
  }

  late final _fileno_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno_unlocked');
  late final _fileno_unlocked =
      _fileno_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int pclose(
    ffi.Pointer<FILE> __stream,
  ) {
    return _pclose(
      __stream,
    );
  }

  late final _pclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'pclose');
  late final _pclose = _pclosePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> popen(
    ffi.Pointer<ffi.Char> __command,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _popen(
      __command,
      __modes,
    );
  }

  late final _popenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('popen');
  late final _popen = _popenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ctermid(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _ctermid(
      __s,
    );
  }

  late final _ctermidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('ctermid');
  late final _ctermid = _ctermidPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void flockfile(
    ffi.Pointer<FILE> __stream,
  ) {
    return _flockfile(
      __stream,
    );
  }

  late final _flockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'flockfile');
  late final _flockfile =
      _flockfilePtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int ftrylockfile(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftrylockfile(
      __stream,
    );
  }

  late final _ftrylockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ftrylockfile');
  late final _ftrylockfile =
      _ftrylockfilePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void funlockfile(
    ffi.Pointer<FILE> __stream,
  ) {
    return _funlockfile(
      __stream,
    );
  }

  late final _funlockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'funlockfile');
  late final _funlockfile =
      _funlockfilePtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int __uflow(
    ffi.Pointer<FILE> arg0,
  ) {
    return ___uflow(
      arg0,
    );
  }

  late final ___uflowPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          '__uflow');
  late final ___uflow =
      ___uflowPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int __overflow(
    ffi.Pointer<FILE> arg0,
    int arg1,
  ) {
    return ___overflow(
      arg0,
      arg1,
    );
  }

  late final ___overflowPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>, ffi.Int)>>(
          '__overflow');
  late final ___overflow =
      ___overflowPtr.asFunction<int Function(ffi.Pointer<FILE>, int)>();

  int __ctype_get_mb_cur_max() {
    return ___ctype_get_mb_cur_max();
  }

  late final ___ctype_get_mb_cur_maxPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>(
          '__ctype_get_mb_cur_max');
  late final ___ctype_get_mb_cur_max =
      ___ctype_get_mb_cur_maxPtr.asFunction<int Function()>();

  double atof(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atof(
      __nptr,
    );
  }

  late final _atofPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'atof');
  late final _atof =
      _atofPtr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  int atoi(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoi(
      __nptr,
    );
  }

  late final _atoiPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'atoi');
  late final _atoi = _atoiPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atol(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atol(
      __nptr,
    );
  }

  late final _atolPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'atol');
  late final _atol = _atolPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atoll(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoll(
      __nptr,
    );
  }

  late final _atollPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.Char>)>>(
          'atoll');
  late final _atoll =
      _atollPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  double strtod(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtod(
      __nptr,
      __endptr,
    );
  }

  late final _strtodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtod');
  late final _strtod = _strtodPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  double strtof(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtof(
      __nptr,
      __endptr,
    );
  }

  late final _strtofPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtof');
  late final _strtof = _strtofPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strtol(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtol(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtol');
  late final _strtol = _strtolPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoul(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoul(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoulPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoul');
  late final _strtoul = _strtoulPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoq(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoq(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoqPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoq');
  late final _strtoq = _strtoqPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtouq(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtouq(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtouqPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtouq');
  late final _strtouq = _strtouqPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoll(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoll(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtollPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoll');
  late final _strtoll = _strtollPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoull(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoull(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoullPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoull');
  late final _strtoull = _strtoullPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  ffi.Pointer<ffi.Char> l64a(
    int __n,
  ) {
    return _l64a(
      __n,
    );
  }

  late final _l64aPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Long)>>(
          'l64a');
  late final _l64a = _l64aPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int a64l(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _a64l(
      __s,
    );
  }

  late final _a64lPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'a64l');
  late final _a64l = _a64lPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int select(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timeval> __timeout,
  ) {
    return _select(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
    );
  }

  late final _selectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>>('select');
  late final _select = _selectPtr.asFunction<
      int Function(int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>();

  int pselect(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timespec> __timeout,
    ffi.Pointer<_sigset_t_> __sigmask,
  ) {
    return _pselect(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
      __sigmask,
    );
  }

  late final _pselectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<timespec>,
              ffi.Pointer<_sigset_t_>)>>('pselect');
  late final _pselect = _pselectPtr.asFunction<
      int Function(
          int,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<timespec>,
          ffi.Pointer<_sigset_t_>)>();

  int random() {
    return _random();
  }

  late final _randomPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('random');
  late final _random = _randomPtr.asFunction<int Function()>();

  void srandom(
    int __seed,
  ) {
    return _srandom(
      __seed,
    );
  }

  late final _srandomPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'srandom');
  late final _srandom = _srandomPtr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> initstate(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
  ) {
    return _initstate(
      __seed,
      __statebuf,
      __statelen,
    );
  }

  late final _initstatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Size)>>('initstate');
  late final _initstate = _initstatePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> setstate(
    ffi.Pointer<ffi.Char> __statebuf,
  ) {
    return _setstate(
      __statebuf,
    );
  }

  late final _setstatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('setstate');
  late final _setstate = _setstatePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int random_r(
    ffi.Pointer<random_data> __buf,
    ffi.Pointer<ffi.Int32> __result,
  ) {
    return _random_r(
      __buf,
      __result,
    );
  }

  late final _random_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>>('random_r');
  late final _random_r = _random_rPtr.asFunction<
      int Function(ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>();

  int srandom_r(
    int __seed,
    ffi.Pointer<random_data> __buf,
  ) {
    return _srandom_r(
      __seed,
      __buf,
    );
  }

  late final _srandom_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedInt, ffi.Pointer<random_data>)>>('srandom_r');
  late final _srandom_r =
      _srandom_rPtr.asFunction<int Function(int, ffi.Pointer<random_data>)>();

  int initstate_r(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
    ffi.Pointer<random_data> __buf,
  ) {
    return _initstate_r(
      __seed,
      __statebuf,
      __statelen,
      __buf,
    );
  }

  late final _initstate_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<random_data>)>>('initstate_r');
  late final _initstate_r = _initstate_rPtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<random_data>)>();

  int setstate_r(
    ffi.Pointer<ffi.Char> __statebuf,
    ffi.Pointer<random_data> __buf,
  ) {
    return _setstate_r(
      __statebuf,
      __buf,
    );
  }

  late final _setstate_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>>('setstate_r');
  late final _setstate_r = _setstate_rPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>();

  int rand() {
    return _rand();
  }

  late final _randPtr = _lookup<ffi.NativeFunction<ffi.Int Function()>>('rand');
  late final _rand = _randPtr.asFunction<int Function()>();

  void srand(
    int __seed,
  ) {
    return _srand(
      __seed,
    );
  }

  late final _srandPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>('srand');
  late final _srand = _srandPtr.asFunction<void Function(int)>();

  int rand_r(
    ffi.Pointer<ffi.UnsignedInt> __seed,
  ) {
    return _rand_r(
      __seed,
    );
  }

  late final _rand_rPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>)>>(
      'rand_r');
  late final _rand_r =
      _rand_rPtr.asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>)>();

  double drand48() {
    return _drand48();
  }

  late final _drand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('drand48');
  late final _drand48 = _drand48Ptr.asFunction<double Function()>();

  double erand48(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _erand48(
      __xsubi,
    );
  }

  late final _erand48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.UnsignedShort>)>>('erand48');
  late final _erand48 =
      _erand48Ptr.asFunction<double Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int lrand48() {
    return _lrand48();
  }

  late final _lrand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('lrand48');
  late final _lrand48 = _lrand48Ptr.asFunction<int Function()>();

  int nrand48(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _nrand48(
      __xsubi,
    );
  }

  late final _nrand48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('nrand48');
  late final _nrand48 =
      _nrand48Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int mrand48() {
    return _mrand48();
  }

  late final _mrand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('mrand48');
  late final _mrand48 = _mrand48Ptr.asFunction<int Function()>();

  int jrand48(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _jrand48(
      __xsubi,
    );
  }

  late final _jrand48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('jrand48');
  late final _jrand48 =
      _jrand48Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  void srand48(
    int __seedval,
  ) {
    return _srand48(
      __seedval,
    );
  }

  late final _srand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>('srand48');
  late final _srand48 = _srand48Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.UnsignedShort> seed48(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
  ) {
    return _seed48(
      __seed16v,
    );
  }

  late final _seed48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedShort> Function(
              ffi.Pointer<ffi.UnsignedShort>)>>('seed48');
  late final _seed48 = _seed48Ptr.asFunction<
      ffi.Pointer<ffi.UnsignedShort> Function(
          ffi.Pointer<ffi.UnsignedShort>)>();

  void lcong48(
    ffi.Pointer<ffi.UnsignedShort> __param,
  ) {
    return _lcong48(
      __param,
    );
  }

  late final _lcong48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.UnsignedShort>)>>('lcong48');
  late final _lcong48 =
      _lcong48Ptr.asFunction<void Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int drand48_r(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _drand48_r(
      __buffer,
      __result,
    );
  }

  late final _drand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('drand48_r');
  late final _drand48_r = _drand48_rPtr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Double>)>();

  int erand48_r(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _erand48_r(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _erand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('erand48_r');
  late final _erand48_r = _erand48_rPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Double>)>();

  int lrand48_r(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _lrand48_r(
      __buffer,
      __result,
    );
  }

  late final _lrand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('lrand48_r');
  late final _lrand48_r = _lrand48_rPtr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int nrand48_r(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _nrand48_r(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _nrand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('nrand48_r');
  late final _nrand48_r = _nrand48_rPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int mrand48_r(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _mrand48_r(
      __buffer,
      __result,
    );
  }

  late final _mrand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('mrand48_r');
  late final _mrand48_r = _mrand48_rPtr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int jrand48_r(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _jrand48_r(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _jrand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('jrand48_r');
  late final _jrand48_r = _jrand48_rPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int srand48_r(
    int __seedval,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _srand48_r(
      __seedval,
      __buffer,
    );
  }

  late final _srand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Long, ffi.Pointer<drand48_data>)>>('srand48_r');
  late final _srand48_r =
      _srand48_rPtr.asFunction<int Function(int, ffi.Pointer<drand48_data>)>();

  int seed48_r(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _seed48_r(
      __seed16v,
      __buffer,
    );
  }

  late final _seed48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('seed48_r');
  late final _seed48_r = _seed48_rPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  int lcong48_r(
    ffi.Pointer<ffi.UnsignedShort> __param,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _lcong48_r(
      __param,
      __buffer,
    );
  }

  late final _lcong48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('lcong48_r');
  late final _lcong48_r = _lcong48_rPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  ffi.Pointer<ffi.Void> malloc(
    int __size,
  ) {
    return _malloc(
      __size,
    );
  }

  late final _mallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'malloc');
  late final _malloc =
      _mallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> calloc(
    int __nmemb,
    int __size,
  ) {
    return _calloc(
      __nmemb,
      __size,
    );
  }

  late final _callocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>>('calloc');
  late final _calloc =
      _callocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> realloc(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _realloc(
      __ptr,
      __size,
    );
  }

  late final _reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size)>>('realloc');
  late final _realloc = _reallocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  void free(
    ffi.Pointer<ffi.Void> __ptr,
  ) {
    return _free(
      __ptr,
    );
  }

  late final _freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'free');
  late final _free =
      _freePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> reallocarray(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size)>>('reallocarray');
  late final _reallocarray = _reallocarrayPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> alloca(
    int __size,
  ) {
    return _alloca(
      __size,
    );
  }

  late final _allocaPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'alloca');
  late final _alloca =
      _allocaPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> valloc(
    int __size,
  ) {
    return _valloc(
      __size,
    );
  }

  late final _vallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'valloc');
  late final _valloc =
      _vallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int posix_memalign(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    int __alignment,
    int __size,
  ) {
    return _posix_memalign(
      __memptr,
      __alignment,
      __size,
    );
  }

  late final _posix_memalignPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Size,
              ffi.Size)>>('posix_memalign');
  late final _posix_memalign = _posix_memalignPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, int, int)>();

  ffi.Pointer<ffi.Void> aligned_alloc(
    int __alignment,
    int __size,
  ) {
    return _aligned_alloc(
      __alignment,
      __size,
    );
  }

  late final _aligned_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>>('aligned_alloc');
  late final _aligned_alloc =
      _aligned_allocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  void abort() {
    return _abort();
  }

  late final _abortPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('abort');
  late final _abort = _abortPtr.asFunction<void Function()>();

  int atexit(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _atexit(
      __func,
    );
  }

  late final _atexitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>('atexit');
  late final _atexit = _atexitPtr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int at_quick_exit(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _at_quick_exit(
      __func,
    );
  }

  late final _at_quick_exitPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'at_quick_exit');
  late final _at_quick_exit = _at_quick_exitPtr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int on_exit(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Int __status, ffi.Pointer<ffi.Void> __arg)>>
        __func,
    ffi.Pointer<ffi.Void> __arg,
  ) {
    return _on_exit(
      __func,
      __arg,
    );
  }

  late final _on_exitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Int __status, ffi.Pointer<ffi.Void> __arg)>>,
              ffi.Pointer<ffi.Void>)>>('on_exit');
  late final _on_exit = _on_exitPtr.asFunction<
      int Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Int __status, ffi.Pointer<ffi.Void> __arg)>>,
          ffi.Pointer<ffi.Void>)>();

  void exit(
    int __status,
  ) {
    return _exit1(
      __status,
    );
  }

  late final _exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('exit');
  late final _exit1 = _exitPtr.asFunction<void Function(int)>();

  void quick_exit(
    int __status,
  ) {
    return _quick_exit(
      __status,
    );
  }

  late final _quick_exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('quick_exit');
  late final _quick_exit = _quick_exitPtr.asFunction<void Function(int)>();

  void _Exit(
    int __status,
  ) {
    return __Exit(
      __status,
    );
  }

  late final __ExitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_Exit');
  late final __Exit = __ExitPtr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> getenv(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _getenv(
      __name,
    );
  }

  late final _getenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getenv');
  late final _getenv = _getenvPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int putenv(
    ffi.Pointer<ffi.Char> __string,
  ) {
    return _putenv(
      __string,
    );
  }

  late final _putenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'putenv');
  late final _putenv =
      _putenvPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int setenv(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __value,
    int __replace,
  ) {
    return _setenv(
      __name,
      __value,
      __replace,
    );
  }

  late final _setenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('setenv');
  late final _setenv = _setenvPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int unsetenv(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _unsetenv(
      __name,
    );
  }

  late final _unsetenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'unsetenv');
  late final _unsetenv =
      _unsetenvPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int clearenv() {
    return _clearenv();
  }

  late final _clearenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('clearenv');
  late final _clearenv = _clearenvPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> mktemp(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mktemp(
      __template,
    );
  }

  late final _mktempPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mktemp');
  late final _mktemp = _mktempPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int mkstemp(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkstemp(
      __template,
    );
  }

  late final _mkstempPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'mkstemp');
  late final _mkstemp =
      _mkstempPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int mkstemps(
    ffi.Pointer<ffi.Char> __template,
    int __suffixlen,
  ) {
    return _mkstemps(
      __template,
      __suffixlen,
    );
  }

  late final _mkstempsPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mkstemps');
  late final _mkstemps =
      _mkstempsPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> mkdtemp(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkdtemp(
      __template,
    );
  }

  late final _mkdtempPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mkdtemp');
  late final _mkdtemp = _mkdtempPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int system(
    ffi.Pointer<ffi.Char> __command,
  ) {
    return _system(
      __command,
    );
  }

  late final _systemPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'system');
  late final _system =
      _systemPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> realpath(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __resolved,
  ) {
    return _realpath(
      __name,
      __resolved,
    );
  }

  late final _realpathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('realpath');
  late final _realpath = _realpathPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> bsearch(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _bsearch(
      __key,
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _bsearchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              __compar_fn_t)>>('bsearch');
  late final _bsearch = _bsearchPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  void qsort(
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _qsort(
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _qsortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              __compar_fn_t)>>('qsort');
  late final _qsort = _qsortPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  int abs(
    int __x,
  ) {
    return _abs(
      __x,
    );
  }

  late final _absPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('abs');
  late final _abs = _absPtr.asFunction<int Function(int)>();

  int labs(
    int __x,
  ) {
    return _labs(
      __x,
    );
  }

  late final _labsPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Long)>>('labs');
  late final _labs = _labsPtr.asFunction<int Function(int)>();

  int llabs(
    int __x,
  ) {
    return _llabs(
      __x,
    );
  }

  late final _llabsPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.LongLong)>>('llabs');
  late final _llabs = _llabsPtr.asFunction<int Function(int)>();

  div_t div(
    int __numer,
    int __denom,
  ) {
    return _div(
      __numer,
      __denom,
    );
  }

  late final _divPtr =
      _lookup<ffi.NativeFunction<div_t Function(ffi.Int, ffi.Int)>>('div');
  late final _div = _divPtr.asFunction<div_t Function(int, int)>();

  ldiv_t ldiv(
    int __numer,
    int __denom,
  ) {
    return _ldiv(
      __numer,
      __denom,
    );
  }

  late final _ldivPtr =
      _lookup<ffi.NativeFunction<ldiv_t Function(ffi.Long, ffi.Long)>>('ldiv');
  late final _ldiv = _ldivPtr.asFunction<ldiv_t Function(int, int)>();

  lldiv_t lldiv(
    int __numer,
    int __denom,
  ) {
    return _lldiv(
      __numer,
      __denom,
    );
  }

  late final _lldivPtr =
      _lookup<ffi.NativeFunction<lldiv_t Function(ffi.LongLong, ffi.LongLong)>>(
          'lldiv');
  late final _lldiv = _lldivPtr.asFunction<lldiv_t Function(int, int)>();

  ffi.Pointer<ffi.Char> ecvt(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _ecvt(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _ecvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('ecvt');
  late final _ecvt = _ecvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> fcvt(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _fcvt(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _fcvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('fcvt');
  late final _fcvt = _fcvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> gcvt(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _gcvt(
      __value,
      __ndigit,
      __buf,
    );
  }

  late final _gcvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Double, ffi.Int, ffi.Pointer<ffi.Char>)>>('gcvt');
  late final _gcvt = _gcvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(double, int, ffi.Pointer<ffi.Char>)>();

  int ecvt_r(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _ecvt_r(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _ecvt_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Double,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('ecvt_r');
  late final _ecvt_r = _ecvt_rPtr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int fcvt_r(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _fcvt_r(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _fcvt_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Double,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('fcvt_r');
  late final _fcvt_r = _fcvt_rPtr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int mblen(
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mblen(
      __s,
      __n,
    );
  }

  late final _mblenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('mblen');
  late final _mblen =
      _mblenPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbtowc(
    ffi.Pointer<ffi.WChar> __pwc,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbtowc(
      __pwc,
      __s,
      __n,
    );
  }

  late final _mbtowcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('mbtowc');
  late final _mbtowc = _mbtowcPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, int)>();

  int wctomb(
    ffi.Pointer<ffi.Char> __s,
    int __wchar,
  ) {
    return _wctomb(
      __s,
      __wchar,
    );
  }

  late final _wctombPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.WChar)>>('wctomb');
  late final _wctomb =
      _wctombPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbstowcs(
    ffi.Pointer<ffi.WChar> __pwcs,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbstowcs(
      __pwcs,
      __s,
      __n,
    );
  }

  late final _mbstowcsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('mbstowcs');
  late final _mbstowcs = _mbstowcsPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, int)>();

  int wcstombs(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.WChar> __pwcs,
    int __n,
  ) {
    return _wcstombs(
      __s,
      __pwcs,
      __n,
    );
  }

  late final _wcstombsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.WChar>,
              ffi.Size)>>('wcstombs');
  late final _wcstombs = _wcstombsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.WChar>, int)>();

  int rpmatch(
    ffi.Pointer<ffi.Char> __response,
  ) {
    return _rpmatch(
      __response,
    );
  }

  late final _rpmatchPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'rpmatch');
  late final _rpmatch =
      _rpmatchPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int getsubopt(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __optionp,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __tokens,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __valuep,
  ) {
    return _getsubopt(
      __optionp,
      __tokens,
      __valuep,
    );
  }

  late final _getsuboptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('getsubopt');
  late final _getsubopt = _getsuboptPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int getloadavg(
    ffi.Pointer<ffi.Double> __loadavg,
    int __nelem,
  ) {
    return _getloadavg(
      __loadavg,
      __nelem,
    );
  }

  late final _getloadavgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Double>, ffi.Int)>>('getloadavg');
  late final _getloadavg =
      _getloadavgPtr.asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  ffi.Pointer<ffi.Void> memcpy(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memcpy(
      __dest,
      __src,
      __n,
    );
  }

  late final _memcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('memcpy');
  late final _memcpy = _memcpyPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memmove(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memmove(
      __dest,
      __src,
      __n,
    );
  }

  late final _memmovePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('memmove');
  late final _memmove = _memmovePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memccpy(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __c,
    int __n,
  ) {
    return _memccpy(
      __dest,
      __src,
      __c,
      __n,
    );
  }

  late final _memccpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Size)>>('memccpy');
  late final _memccpy = _memccpyPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> memset(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memset(
      __s,
      __c,
      __n,
    );
  }

  late final _memsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Size)>>('memset');
  late final _memset = _memsetPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  int memcmp(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _memcmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _memcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('memcmp');
  late final _memcmp = _memcmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int __memcmpeq(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return ___memcmpeq(
      __s1,
      __s2,
      __n,
    );
  }

  late final ___memcmpeqPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('__memcmpeq');
  late final ___memcmpeq = ___memcmpeqPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memchr(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memchr(
      __s,
      __c,
      __n,
    );
  }

  late final _memchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Size)>>('memchr');
  late final _memchr = _memchrPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Char> strcpy(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcpy(
      __dest,
      __src,
    );
  }

  late final _strcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcpy');
  late final _strcpy = _strcpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncpy(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncpy(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strncpy');
  late final _strncpy = _strncpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strcat(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _strcat(
      __dest,
      __src,
    );
  }

  late final _strcatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcat');
  late final _strcat = _strcatPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strncat(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strncat(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strncat');
  late final _strncat = _strncatPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcmp(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcmp(
      __s1,
      __s2,
    );
  }

  late final _strcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcmp');
  late final _strcmp = _strcmpPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncmp(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('strncmp');
  late final _strncmp = _strncmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcoll(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcoll(
      __s1,
      __s2,
    );
  }

  late final _strcollPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcoll');
  late final _strcoll = _strcollPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strxfrm(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _strxfrm(
      __dest,
      __src,
      __n,
    );
  }

  late final _strxfrmPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strxfrm');
  late final _strxfrm = _strxfrmPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcoll_l(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    locale_t __l,
  ) {
    return _strcoll_l(
      __s1,
      __s2,
      __l,
    );
  }

  late final _strcoll_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              locale_t)>>('strcoll_l');
  late final _strcoll_l = _strcoll_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>();

  int strxfrm_l(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
    locale_t __l,
  ) {
    return _strxfrm_l(
      __dest,
      __src,
      __n,
      __l,
    );
  }

  late final _strxfrm_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size, locale_t)>>('strxfrm_l');
  late final _strxfrm_l = _strxfrm_lPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, locale_t)>();

  ffi.Pointer<ffi.Char> strdup(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strdup(
      __s,
    );
  }

  late final _strdupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('strdup');
  late final _strdup = _strdupPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strndup(
    ffi.Pointer<ffi.Char> __string,
    int __n,
  ) {
    return _strndup(
      __string,
      __n,
    );
  }

  late final _strndupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Size)>>('strndup');
  late final _strndup = _strndupPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strchr(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strchr(
      __s,
      __c,
    );
  }

  late final _strchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strchr');
  late final _strchr = _strchrPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strrchr(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _strrchr(
      __s,
      __c,
    );
  }

  late final _strrchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('strrchr');
  late final _strrchr = _strrchrPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int strcspn(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __reject,
  ) {
    return _strcspn(
      __s,
      __reject,
    );
  }

  late final _strcspnPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcspn');
  late final _strcspn = _strcspnPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strspn(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __accept,
  ) {
    return _strspn(
      __s,
      __accept,
    );
  }

  late final _strspnPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strspn');
  late final _strspn = _strspnPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strpbrk(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __accept,
  ) {
    return _strpbrk(
      __s,
      __accept,
    );
  }

  late final _strpbrkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strpbrk');
  late final _strpbrk = _strpbrkPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strstr(
    ffi.Pointer<ffi.Char> __haystack,
    ffi.Pointer<ffi.Char> __needle,
  ) {
    return _strstr(
      __haystack,
      __needle,
    );
  }

  late final _strstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strstr');
  late final _strstr = _strstrPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strtok(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strtok(
      __s,
      __delim,
    );
  }

  late final _strtokPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strtok');
  late final _strtok = _strtokPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> __strtok_r(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
  ) {
    return ___strtok_r(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final ___strtok_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('__strtok_r');
  late final ___strtok_r = ___strtok_rPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.Char> strtok_r(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __save_ptr,
  ) {
    return _strtok_r(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final _strtok_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtok_r');
  late final _strtok_r = _strtok_rPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strlen(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _strlen(
      __s,
    );
  }

  late final _strlenPtr = _lookup<
          ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>)>>(
      'strlen');
  late final _strlen =
      _strlenPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int strnlen(
    ffi.Pointer<ffi.Char> __string,
    int __maxlen,
  ) {
    return _strnlen(
      __string,
      __maxlen,
    );
  }

  late final _strnlenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('strnlen');
  late final _strnlen =
      _strnlenPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strerror(
    int __errnum,
  ) {
    return _strerror(
      __errnum,
    );
  }

  late final _strerrorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strerror');
  late final _strerror =
      _strerrorPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int strerror_r(
    int __errnum,
    ffi.Pointer<ffi.Char> __buf,
    int __buflen,
  ) {
    return _strerror_r(
      __errnum,
      __buf,
      __buflen,
    );
  }

  late final _strerror_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Size)>>('strerror_r');
  late final _strerror_r = _strerror_rPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> strerror_l(
    int __errnum,
    locale_t __l,
  ) {
    return _strerror_l(
      __errnum,
      __l,
    );
  }

  late final _strerror_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Int, locale_t)>>('strerror_l');
  late final _strerror_l = _strerror_lPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int, locale_t)>();

  int bcmp(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _bcmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _bcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Size)>>('bcmp');
  late final _bcmp = _bcmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bcopy(
    ffi.Pointer<ffi.Void> __src,
    ffi.Pointer<ffi.Void> __dest,
    int __n,
  ) {
    return _bcopy(
      __src,
      __dest,
      __n,
    );
  }

  late final _bcopyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('bcopy');
  late final _bcopy = _bcopyPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bzero(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _bzero(
      __s,
      __n,
    );
  }

  late final _bzeroPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size)>>('bzero');
  late final _bzero =
      _bzeroPtr.asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> index(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _index(
      __s,
      __c,
    );
  }

  late final _indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('index');
  late final _index = _indexPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> rindex(
    ffi.Pointer<ffi.Char> __s,
    int __c,
  ) {
    return _rindex(
      __s,
      __c,
    );
  }

  late final _rindexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('rindex');
  late final _rindex = _rindexPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int ffs(
    int __i,
  ) {
    return _ffs(
      __i,
    );
  }

  late final _ffsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('ffs');
  late final _ffs = _ffsPtr.asFunction<int Function(int)>();

  int ffsl(
    int __l,
  ) {
    return _ffsl(
      __l,
    );
  }

  late final _ffslPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Long)>>('ffsl');
  late final _ffsl = _ffslPtr.asFunction<int Function(int)>();

  int ffsll(
    int __ll,
  ) {
    return _ffsll(
      __ll,
    );
  }

  late final _ffsllPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.LongLong)>>('ffsll');
  late final _ffsll = _ffsllPtr.asFunction<int Function(int)>();

  int strcasecmp(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
  ) {
    return _strcasecmp(
      __s1,
      __s2,
    );
  }

  late final _strcasecmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('strcasecmp');
  late final _strcasecmp = _strcasecmpPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int strncasecmp(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
  ) {
    return _strncasecmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncasecmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('strncasecmp');
  late final _strncasecmp = _strncasecmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int strcasecmp_l(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    locale_t __loc,
  ) {
    return _strcasecmp_l(
      __s1,
      __s2,
      __loc,
    );
  }

  late final _strcasecmp_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              locale_t)>>('strcasecmp_l');
  late final _strcasecmp_l = _strcasecmp_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, locale_t)>();

  int strncasecmp_l(
    ffi.Pointer<ffi.Char> __s1,
    ffi.Pointer<ffi.Char> __s2,
    int __n,
    locale_t __loc,
  ) {
    return _strncasecmp_l(
      __s1,
      __s2,
      __n,
      __loc,
    );
  }

  late final _strncasecmp_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size, locale_t)>>('strncasecmp_l');
  late final _strncasecmp_l = _strncasecmp_lPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, locale_t)>();

  void explicit_bzero(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _explicit_bzero(
      __s,
      __n,
    );
  }

  late final _explicit_bzeroPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Size)>>('explicit_bzero');
  late final _explicit_bzero = _explicit_bzeroPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> strsep(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __stringp,
    ffi.Pointer<ffi.Char> __delim,
  ) {
    return _strsep(
      __stringp,
      __delim,
    );
  }

  late final _strsepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('strsep');
  late final _strsep = _strsepPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> strsignal(
    int __sig,
  ) {
    return _strsignal(
      __sig,
    );
  }

  late final _strsignalPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strsignal');
  late final _strsignal =
      _strsignalPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> __stpcpy(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return ___stpcpy(
      __dest,
      __src,
    );
  }

  late final ___stpcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('__stpcpy');
  late final ___stpcpy = ___stpcpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> stpcpy(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
  ) {
    return _stpcpy(
      __dest,
      __src,
    );
  }

  late final _stpcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('stpcpy');
  late final _stpcpy = _stpcpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> __stpncpy(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return ___stpncpy(
      __dest,
      __src,
      __n,
    );
  }

  late final ___stpncpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('__stpncpy');
  late final ___stpncpy = ___stpncpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> stpncpy(
    ffi.Pointer<ffi.Char> __dest,
    ffi.Pointer<ffi.Char> __src,
    int __n,
  ) {
    return _stpncpy(
      __dest,
      __src,
      __n,
    );
  }

  late final _stpncpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('stpncpy');
  late final _stpncpy = _stpncpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int fcntl(
    int __fd,
    int __cmd,
  ) {
    return _fcntl(
      __fd,
      __cmd,
    );
  }

  late final _fcntlPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>('fcntl');
  late final _fcntl = _fcntlPtr.asFunction<int Function(int, int)>();

  int open(
    ffi.Pointer<ffi.Char> __file,
    int __oflag,
  ) {
    return _open(
      __file,
      __oflag,
    );
  }

  late final _openPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'open');
  late final _open =
      _openPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int openat(
    int __fd,
    ffi.Pointer<ffi.Char> __file,
    int __oflag,
  ) {
    return _openat(
      __fd,
      __file,
      __oflag,
    );
  }

  late final _openatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('openat');
  late final _openat =
      _openatPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int creat(
    ffi.Pointer<ffi.Char> __file,
    int __mode,
  ) {
    return _creat(
      __file,
      __mode,
    );
  }

  late final _creatPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, mode_t)>>(
      'creat');
  late final _creat =
      _creatPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int posix_fadvise(
    int __fd,
    int __offset,
    int __len,
    int __advise,
  ) {
    return _posix_fadvise(
      __fd,
      __offset,
      __len,
      __advise,
    );
  }

  late final _posix_fadvisePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, off_t, off_t, ffi.Int)>>(
      'posix_fadvise');
  late final _posix_fadvise =
      _posix_fadvisePtr.asFunction<int Function(int, int, int, int)>();

  int posix_fallocate(
    int __fd,
    int __offset,
    int __len,
  ) {
    return _posix_fallocate(
      __fd,
      __offset,
      __len,
    );
  }

  late final _posix_fallocatePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, off_t, off_t)>>(
          'posix_fallocate');
  late final _posix_fallocate =
      _posix_fallocatePtr.asFunction<int Function(int, int, int)>();

  void __assert_fail(
    ffi.Pointer<ffi.Char> __assertion,
    ffi.Pointer<ffi.Char> __file,
    int __line,
    ffi.Pointer<ffi.Char> __function,
  ) {
    return ___assert_fail(
      __assertion,
      __file,
      __line,
      __function,
    );
  }

  late final ___assert_failPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt, ffi.Pointer<ffi.Char>)>>('__assert_fail');
  late final ___assert_fail = ___assert_failPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Char>)>();

  void __assert_perror_fail(
    int __errnum,
    ffi.Pointer<ffi.Char> __file,
    int __line,
    ffi.Pointer<ffi.Char> __function,
  ) {
    return ___assert_perror_fail(
      __errnum,
      __file,
      __line,
      __function,
    );
  }

  late final ___assert_perror_failPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.UnsignedInt,
              ffi.Pointer<ffi.Char>)>>('__assert_perror_fail');
  late final ___assert_perror_fail = ___assert_perror_failPtr.asFunction<
      void Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  void __assert(
    ffi.Pointer<ffi.Char> __assertion,
    ffi.Pointer<ffi.Char> __file,
    int __line,
  ) {
    return ___assert(
      __assertion,
      __file,
      __line,
    );
  }

  late final ___assertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('__assert');
  late final ___assert = ___assertPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int poll(
    ffi.Pointer<pollfd> __fds,
    int __nfds,
    int __timeout,
  ) {
    return _poll(
      __fds,
      __nfds,
      __timeout,
    );
  }

  late final _pollPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pollfd>, nfds_t, ffi.Int)>>('poll');
  late final _poll =
      _pollPtr.asFunction<int Function(ffi.Pointer<pollfd>, int, int)>();

  ffi.Pointer<ffi.Int> __errno_location() {
    return ___errno_location();
  }

  late final ___errno_locationPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int> Function()>>(
          '__errno_location');
  late final ___errno_location =
      ___errno_locationPtr.asFunction<ffi.Pointer<ffi.Int> Function()>();

  int clock() {
    return _clock();
  }

  late final _clockPtr =
      _lookup<ffi.NativeFunction<clock_t Function()>>('clock');
  late final _clock = _clockPtr.asFunction<int Function()>();

  int time(
    ffi.Pointer<time_t> __timer,
  ) {
    return _time(
      __timer,
    );
  }

  late final _timePtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<time_t>)>>('time');
  late final _time = _timePtr.asFunction<int Function(ffi.Pointer<time_t>)>();

  double difftime(
    int __time1,
    int __time0,
  ) {
    return _difftime(
      __time1,
      __time0,
    );
  }

  late final _difftimePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(time_t, time_t)>>(
          'difftime');
  late final _difftime = _difftimePtr.asFunction<double Function(int, int)>();

  int mktime(
    ffi.Pointer<tm> __tp,
  ) {
    return _mktime(
      __tp,
    );
  }

  late final _mktimePtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<tm>)>>('mktime');
  late final _mktime = _mktimePtr.asFunction<int Function(ffi.Pointer<tm>)>();

  int strftime(
    ffi.Pointer<ffi.Char> __s,
    int __maxsize,
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<tm> __tp,
  ) {
    return _strftime(
      __s,
      __maxsize,
      __format,
      __tp,
    );
  }

  late final _strftimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Char>, ffi.Pointer<tm>)>>('strftime');
  late final _strftime = _strftimePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<tm>)>();

  int strftime_l(
    ffi.Pointer<ffi.Char> __s,
    int __maxsize,
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<tm> __tp,
    locale_t __loc,
  ) {
    return _strftime_l(
      __s,
      __maxsize,
      __format,
      __tp,
      __loc,
    );
  }

  late final _strftime_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Char>, ffi.Pointer<tm>, locale_t)>>('strftime_l');
  late final _strftime_l = _strftime_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<tm>, locale_t)>();

  ffi.Pointer<tm> gmtime(
    ffi.Pointer<time_t> __timer,
  ) {
    return _gmtime(
      __timer,
    );
  }

  late final _gmtimePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>>(
      'gmtime');
  late final _gmtime =
      _gmtimePtr.asFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>();

  ffi.Pointer<tm> localtime(
    ffi.Pointer<time_t> __timer,
  ) {
    return _localtime(
      __timer,
    );
  }

  late final _localtimePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>>(
      'localtime');
  late final _localtime =
      _localtimePtr.asFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>();

  ffi.Pointer<tm> gmtime_r(
    ffi.Pointer<time_t> __timer,
    ffi.Pointer<tm> __tp,
  ) {
    return _gmtime_r(
      __timer,
      __tp,
    );
  }

  late final _gmtime_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<tm> Function(
              ffi.Pointer<time_t>, ffi.Pointer<tm>)>>('gmtime_r');
  late final _gmtime_r = _gmtime_rPtr.asFunction<
      ffi.Pointer<tm> Function(ffi.Pointer<time_t>, ffi.Pointer<tm>)>();

  ffi.Pointer<tm> localtime_r(
    ffi.Pointer<time_t> __timer,
    ffi.Pointer<tm> __tp,
  ) {
    return _localtime_r(
      __timer,
      __tp,
    );
  }

  late final _localtime_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<tm> Function(
              ffi.Pointer<time_t>, ffi.Pointer<tm>)>>('localtime_r');
  late final _localtime_r = _localtime_rPtr.asFunction<
      ffi.Pointer<tm> Function(ffi.Pointer<time_t>, ffi.Pointer<tm>)>();

  ffi.Pointer<ffi.Char> asctime(
    ffi.Pointer<tm> __tp,
  ) {
    return _asctime(
      __tp,
    );
  }

  late final _asctimePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<tm>)>>(
      'asctime');
  late final _asctime =
      _asctimePtr.asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<tm>)>();

  ffi.Pointer<ffi.Char> ctime(
    ffi.Pointer<time_t> __timer,
  ) {
    return _ctime(
      __timer,
    );
  }

  late final _ctimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<time_t>)>>('ctime');
  late final _ctime = _ctimePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<time_t>)>();

  ffi.Pointer<ffi.Char> asctime_r(
    ffi.Pointer<tm> __tp,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _asctime_r(
      __tp,
      __buf,
    );
  }

  late final _asctime_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<tm>, ffi.Pointer<ffi.Char>)>>('asctime_r');
  late final _asctime_r = _asctime_rPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<tm>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ctime_r(
    ffi.Pointer<time_t> __timer,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _ctime_r(
      __timer,
      __buf,
    );
  }

  late final _ctime_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<time_t>, ffi.Pointer<ffi.Char>)>>('ctime_r');
  late final _ctime_r = _ctime_rPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<time_t>, ffi.Pointer<ffi.Char>)>();

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> ___tzname =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Char>>>('__tzname');

  ffi.Pointer<ffi.Pointer<ffi.Char>> get __tzname => ___tzname.value;

  set __tzname(ffi.Pointer<ffi.Pointer<ffi.Char>> value) =>
      ___tzname.value = value;

  late final ffi.Pointer<ffi.Int> ___daylight = _lookup<ffi.Int>('__daylight');

  int get __daylight => ___daylight.value;

  set __daylight(int value) => ___daylight.value = value;

  late final ffi.Pointer<ffi.Long> ___timezone =
      _lookup<ffi.Long>('__timezone');

  int get __timezone => ___timezone.value;

  set __timezone(int value) => ___timezone.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> _tzname =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Char>>>('tzname');

  ffi.Pointer<ffi.Pointer<ffi.Char>> get tzname => _tzname.value;

  set tzname(ffi.Pointer<ffi.Pointer<ffi.Char>> value) => _tzname.value = value;

  void tzset() {
    return _tzset();
  }

  late final _tzsetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('tzset');
  late final _tzset = _tzsetPtr.asFunction<void Function()>();

  late final ffi.Pointer<ffi.Int> _daylight = _lookup<ffi.Int>('daylight');

  int get daylight => _daylight.value;

  set daylight(int value) => _daylight.value = value;

  late final ffi.Pointer<ffi.Long> _timezone = _lookup<ffi.Long>('timezone');

  int get timezone => _timezone.value;

  set timezone(int value) => _timezone.value = value;

  int timegm(
    ffi.Pointer<tm> __tp,
  ) {
    return _timegm(
      __tp,
    );
  }

  late final _timegmPtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<tm>)>>('timegm');
  late final _timegm = _timegmPtr.asFunction<int Function(ffi.Pointer<tm>)>();

  int timelocal(
    ffi.Pointer<tm> __tp,
  ) {
    return _timelocal(
      __tp,
    );
  }

  late final _timelocalPtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<tm>)>>(
          'timelocal');
  late final _timelocal =
      _timelocalPtr.asFunction<int Function(ffi.Pointer<tm>)>();

  int dysize(
    int __year,
  ) {
    return _dysize(
      __year,
    );
  }

  late final _dysizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('dysize');
  late final _dysize = _dysizePtr.asFunction<int Function(int)>();

  int nanosleep(
    ffi.Pointer<timespec> __requested_time,
    ffi.Pointer<timespec> __remaining,
  ) {
    return _nanosleep(
      __requested_time,
      __remaining,
    );
  }

  late final _nanosleepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<timespec>, ffi.Pointer<timespec>)>>('nanosleep');
  late final _nanosleep = _nanosleepPtr
      .asFunction<int Function(ffi.Pointer<timespec>, ffi.Pointer<timespec>)>();

  int clock_getres(
    int __clock_id,
    ffi.Pointer<timespec> __res,
  ) {
    return _clock_getres(
      __clock_id,
      __res,
    );
  }

  late final _clock_getresPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(clockid_t, ffi.Pointer<timespec>)>>('clock_getres');
  late final _clock_getres =
      _clock_getresPtr.asFunction<int Function(int, ffi.Pointer<timespec>)>();

  int clock_gettime(
    int __clock_id,
    ffi.Pointer<timespec> __tp,
  ) {
    return _clock_gettime(
      __clock_id,
      __tp,
    );
  }

  late final _clock_gettimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(clockid_t, ffi.Pointer<timespec>)>>('clock_gettime');
  late final _clock_gettime =
      _clock_gettimePtr.asFunction<int Function(int, ffi.Pointer<timespec>)>();

  int clock_settime(
    int __clock_id,
    ffi.Pointer<timespec> __tp,
  ) {
    return _clock_settime(
      __clock_id,
      __tp,
    );
  }

  late final _clock_settimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(clockid_t, ffi.Pointer<timespec>)>>('clock_settime');
  late final _clock_settime =
      _clock_settimePtr.asFunction<int Function(int, ffi.Pointer<timespec>)>();

  int clock_nanosleep(
    int __clock_id,
    int __flags,
    ffi.Pointer<timespec> __req,
    ffi.Pointer<timespec> __rem,
  ) {
    return _clock_nanosleep(
      __clock_id,
      __flags,
      __req,
      __rem,
    );
  }

  late final _clock_nanosleepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(clockid_t, ffi.Int, ffi.Pointer<timespec>,
              ffi.Pointer<timespec>)>>('clock_nanosleep');
  late final _clock_nanosleep = _clock_nanosleepPtr.asFunction<
      int Function(int, int, ffi.Pointer<timespec>, ffi.Pointer<timespec>)>();

  int clock_getcpuclockid(
    int __pid,
    ffi.Pointer<clockid_t> __clock_id,
  ) {
    return _clock_getcpuclockid(
      __pid,
      __clock_id,
    );
  }

  late final _clock_getcpuclockidPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(pid_t, ffi.Pointer<clockid_t>)>>(
      'clock_getcpuclockid');
  late final _clock_getcpuclockid = _clock_getcpuclockidPtr
      .asFunction<int Function(int, ffi.Pointer<clockid_t>)>();

  int timer_create(
    int __clock_id,
    ffi.Pointer<sigevent> __evp,
    ffi.Pointer<timer_t> __timerid,
  ) {
    return _timer_create(
      __clock_id,
      __evp,
      __timerid,
    );
  }

  late final _timer_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(clockid_t, ffi.Pointer<sigevent>,
              ffi.Pointer<timer_t>)>>('timer_create');
  late final _timer_create = _timer_createPtr.asFunction<
      int Function(int, ffi.Pointer<sigevent>, ffi.Pointer<timer_t>)>();

  int timer_delete(
    timer_t __timerid,
  ) {
    return _timer_delete(
      __timerid,
    );
  }

  late final _timer_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(timer_t)>>('timer_delete');
  late final _timer_delete =
      _timer_deletePtr.asFunction<int Function(timer_t)>();

  int timer_settime(
    timer_t __timerid,
    int __flags,
    ffi.Pointer<itimerspec> __value,
    ffi.Pointer<itimerspec> __ovalue,
  ) {
    return _timer_settime(
      __timerid,
      __flags,
      __value,
      __ovalue,
    );
  }

  late final _timer_settimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(timer_t, ffi.Int, ffi.Pointer<itimerspec>,
              ffi.Pointer<itimerspec>)>>('timer_settime');
  late final _timer_settime = _timer_settimePtr.asFunction<
      int Function(
          timer_t, int, ffi.Pointer<itimerspec>, ffi.Pointer<itimerspec>)>();

  int timer_gettime(
    timer_t __timerid,
    ffi.Pointer<itimerspec> __value,
  ) {
    return _timer_gettime(
      __timerid,
      __value,
    );
  }

  late final _timer_gettimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(timer_t, ffi.Pointer<itimerspec>)>>('timer_gettime');
  late final _timer_gettime = _timer_gettimePtr
      .asFunction<int Function(timer_t, ffi.Pointer<itimerspec>)>();

  int timer_getoverrun(
    timer_t __timerid,
  ) {
    return _timer_getoverrun(
      __timerid,
    );
  }

  late final _timer_getoverrunPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(timer_t)>>(
          'timer_getoverrun');
  late final _timer_getoverrun =
      _timer_getoverrunPtr.asFunction<int Function(timer_t)>();

  int timespec_get(
    ffi.Pointer<timespec> __ts,
    int __base,
  ) {
    return _timespec_get(
      __ts,
      __base,
    );
  }

  late final _timespec_getPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<timespec>, ffi.Int)>>(
      'timespec_get');
  late final _timespec_get =
      _timespec_getPtr.asFunction<int Function(ffi.Pointer<timespec>, int)>();

  ffi.Pointer<ffi.Char> snd_asoundlib_version() {
    return _snd_asoundlib_version();
  }

  late final _snd_asoundlib_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'snd_asoundlib_version');
  late final _snd_asoundlib_version =
      _snd_asoundlib_versionPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  late final ffi.Pointer<ffi.Pointer<snd_dlsym_link>> _snd_dlsym_start =
      _lookup<ffi.Pointer<snd_dlsym_link>>('snd_dlsym_start');

  ffi.Pointer<snd_dlsym_link> get snd_dlsym_start => _snd_dlsym_start.value;

  set snd_dlsym_start(ffi.Pointer<snd_dlsym_link> value) =>
      _snd_dlsym_start.value = value;

  int snd_dlpath(
    ffi.Pointer<ffi.Char> path,
    int path_len,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _snd_dlpath(
      path,
      path_len,
      name,
    );
  }

  late final _snd_dlpathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('snd_dlpath');
  late final _snd_dlpath = _snd_dlpathPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> snd_dlopen(
    ffi.Pointer<ffi.Char> file,
    int mode,
    ffi.Pointer<ffi.Char> errbuf,
    int errbuflen,
  ) {
    return _snd_dlopen(
      file,
      mode,
      errbuf,
      errbuflen,
    );
  }

  late final _snd_dlopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('snd_dlopen');
  late final _snd_dlopen = _snd_dlopenPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Void> snd_dlsym(
    ffi.Pointer<ffi.Void> handle,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> version,
  ) {
    return _snd_dlsym(
      handle,
      name,
      version,
    );
  }

  late final _snd_dlsymPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('snd_dlsym');
  late final _snd_dlsym = _snd_dlsymPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int snd_dlclose(
    ffi.Pointer<ffi.Void> handle,
  ) {
    return _snd_dlclose(
      handle,
    );
  }

  late final _snd_dlclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'snd_dlclose');
  late final _snd_dlclose =
      _snd_dlclosePtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  int snd_async_add_handler(
    ffi.Pointer<ffi.Pointer<snd_async_handler_t>> handler,
    int fd,
    snd_async_callback_t callback,
    ffi.Pointer<ffi.Void> private_data,
  ) {
    return _snd_async_add_handler(
      handler,
      fd,
      callback,
      private_data,
    );
  }

  late final _snd_async_add_handlerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<snd_async_handler_t>>,
              ffi.Int,
              snd_async_callback_t,
              ffi.Pointer<ffi.Void>)>>('snd_async_add_handler');
  late final _snd_async_add_handler = _snd_async_add_handlerPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<snd_async_handler_t>>, int,
          snd_async_callback_t, ffi.Pointer<ffi.Void>)>();

  int snd_async_del_handler(
    ffi.Pointer<snd_async_handler_t> handler,
  ) {
    return _snd_async_del_handler(
      handler,
    );
  }

  late final _snd_async_del_handlerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_async_handler_t>)>>('snd_async_del_handler');
  late final _snd_async_del_handler = _snd_async_del_handlerPtr
      .asFunction<int Function(ffi.Pointer<snd_async_handler_t>)>();

  int snd_async_handler_get_fd(
    ffi.Pointer<snd_async_handler_t> handler,
  ) {
    return _snd_async_handler_get_fd(
      handler,
    );
  }

  late final _snd_async_handler_get_fdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_async_handler_t>)>>('snd_async_handler_get_fd');
  late final _snd_async_handler_get_fd = _snd_async_handler_get_fdPtr
      .asFunction<int Function(ffi.Pointer<snd_async_handler_t>)>();

  int snd_async_handler_get_signo(
    ffi.Pointer<snd_async_handler_t> handler,
  ) {
    return _snd_async_handler_get_signo(
      handler,
    );
  }

  late final _snd_async_handler_get_signoPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_async_handler_t>)>>(
      'snd_async_handler_get_signo');
  late final _snd_async_handler_get_signo = _snd_async_handler_get_signoPtr
      .asFunction<int Function(ffi.Pointer<snd_async_handler_t>)>();

  ffi.Pointer<ffi.Void> snd_async_handler_get_callback_private(
    ffi.Pointer<snd_async_handler_t> handler,
  ) {
    return _snd_async_handler_get_callback_private(
      handler,
    );
  }

  late final _snd_async_handler_get_callback_privatePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<snd_async_handler_t>)>>(
      'snd_async_handler_get_callback_private');
  late final _snd_async_handler_get_callback_private =
      _snd_async_handler_get_callback_privatePtr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<snd_async_handler_t>)>();

  ffi.Pointer<snd_shm_area> snd_shm_area_create(
    int shmid,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _snd_shm_area_create(
      shmid,
      ptr,
    );
  }

  late final _snd_shm_area_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<snd_shm_area> Function(
              ffi.Int, ffi.Pointer<ffi.Void>)>>('snd_shm_area_create');
  late final _snd_shm_area_create = _snd_shm_area_createPtr.asFunction<
      ffi.Pointer<snd_shm_area> Function(int, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<snd_shm_area> snd_shm_area_share(
    ffi.Pointer<snd_shm_area> area,
  ) {
    return _snd_shm_area_share(
      area,
    );
  }

  late final _snd_shm_area_sharePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<snd_shm_area> Function(
              ffi.Pointer<snd_shm_area>)>>('snd_shm_area_share');
  late final _snd_shm_area_share = _snd_shm_area_sharePtr.asFunction<
      ffi.Pointer<snd_shm_area> Function(ffi.Pointer<snd_shm_area>)>();

  int snd_shm_area_destroy(
    ffi.Pointer<snd_shm_area> area,
  ) {
    return _snd_shm_area_destroy(
      area,
    );
  }

  late final _snd_shm_area_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_shm_area>)>>(
          'snd_shm_area_destroy');
  late final _snd_shm_area_destroy = _snd_shm_area_destroyPtr
      .asFunction<int Function(ffi.Pointer<snd_shm_area>)>();

  int snd_user_file(
    ffi.Pointer<ffi.Char> file,
    ffi.Pointer<ffi.Pointer<ffi.Char>> result,
  ) {
    return _snd_user_file(
      file,
      result,
    );
  }

  late final _snd_user_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('snd_user_file');
  late final _snd_user_file = _snd_user_filePtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int snd_input_stdio_open(
    ffi.Pointer<ffi.Pointer<snd_input_t>> inputp,
    ffi.Pointer<ffi.Char> file,
    ffi.Pointer<ffi.Char> mode,
  ) {
    return _snd_input_stdio_open(
      inputp,
      file,
      mode,
    );
  }

  late final _snd_input_stdio_openPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<snd_input_t>>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('snd_input_stdio_open');
  late final _snd_input_stdio_open = _snd_input_stdio_openPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<snd_input_t>>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  int snd_input_stdio_attach(
    ffi.Pointer<ffi.Pointer<snd_input_t>> inputp,
    ffi.Pointer<FILE> fp,
    int _close,
  ) {
    return _snd_input_stdio_attach(
      inputp,
      fp,
      _close,
    );
  }

  late final _snd_input_stdio_attachPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<snd_input_t>>,
              ffi.Pointer<FILE>, ffi.Int)>>('snd_input_stdio_attach');
  late final _snd_input_stdio_attach = _snd_input_stdio_attachPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<snd_input_t>>, ffi.Pointer<FILE>, int)>();

  int snd_input_buffer_open(
    ffi.Pointer<ffi.Pointer<snd_input_t>> inputp,
    ffi.Pointer<ffi.Char> buffer,
    int size,
  ) {
    return _snd_input_buffer_open(
      inputp,
      buffer,
      size,
    );
  }

  late final _snd_input_buffer_openPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<snd_input_t>>,
              ffi.Pointer<ffi.Char>, ssize_t)>>('snd_input_buffer_open');
  late final _snd_input_buffer_open = _snd_input_buffer_openPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<snd_input_t>>, ffi.Pointer<ffi.Char>, int)>();

  int snd_input_close(
    ffi.Pointer<snd_input_t> input,
  ) {
    return _snd_input_close(
      input,
    );
  }

  late final _snd_input_closePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_input_t>)>>(
          'snd_input_close');
  late final _snd_input_close =
      _snd_input_closePtr.asFunction<int Function(ffi.Pointer<snd_input_t>)>();

  int snd_input_scanf(
    ffi.Pointer<snd_input_t> input,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _snd_input_scanf(
      input,
      format,
    );
  }

  late final _snd_input_scanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_input_t>,
              ffi.Pointer<ffi.Char>)>>('snd_input_scanf');
  late final _snd_input_scanf = _snd_input_scanfPtr.asFunction<
      int Function(ffi.Pointer<snd_input_t>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> snd_input_gets(
    ffi.Pointer<snd_input_t> input,
    ffi.Pointer<ffi.Char> str,
    int size,
  ) {
    return _snd_input_gets(
      input,
      str,
      size,
    );
  }

  late final _snd_input_getsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<snd_input_t>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('snd_input_gets');
  late final _snd_input_gets = _snd_input_getsPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<snd_input_t>, ffi.Pointer<ffi.Char>, int)>();

  int snd_input_getc(
    ffi.Pointer<snd_input_t> input,
  ) {
    return _snd_input_getc(
      input,
    );
  }

  late final _snd_input_getcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_input_t>)>>(
          'snd_input_getc');
  late final _snd_input_getc =
      _snd_input_getcPtr.asFunction<int Function(ffi.Pointer<snd_input_t>)>();

  int snd_input_ungetc(
    ffi.Pointer<snd_input_t> input,
    int c,
  ) {
    return _snd_input_ungetc(
      input,
      c,
    );
  }

  late final _snd_input_ungetcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_input_t>, ffi.Int)>>('snd_input_ungetc');
  late final _snd_input_ungetc = _snd_input_ungetcPtr
      .asFunction<int Function(ffi.Pointer<snd_input_t>, int)>();

  int snd_output_stdio_open(
    ffi.Pointer<ffi.Pointer<snd_output_t>> outputp,
    ffi.Pointer<ffi.Char> file,
    ffi.Pointer<ffi.Char> mode,
  ) {
    return _snd_output_stdio_open(
      outputp,
      file,
      mode,
    );
  }

  late final _snd_output_stdio_openPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<snd_output_t>>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('snd_output_stdio_open');
  late final _snd_output_stdio_open = _snd_output_stdio_openPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<snd_output_t>>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int snd_output_stdio_attach(
    ffi.Pointer<ffi.Pointer<snd_output_t>> outputp,
    ffi.Pointer<FILE> fp,
    int _close,
  ) {
    return _snd_output_stdio_attach(
      outputp,
      fp,
      _close,
    );
  }

  late final _snd_output_stdio_attachPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<snd_output_t>>,
              ffi.Pointer<FILE>, ffi.Int)>>('snd_output_stdio_attach');
  late final _snd_output_stdio_attach = _snd_output_stdio_attachPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<snd_output_t>>, ffi.Pointer<FILE>, int)>();

  int snd_output_buffer_open(
    ffi.Pointer<ffi.Pointer<snd_output_t>> outputp,
  ) {
    return _snd_output_buffer_open(
      outputp,
    );
  }

  late final _snd_output_buffer_openPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Pointer<snd_output_t>>)>>(
      'snd_output_buffer_open');
  late final _snd_output_buffer_open = _snd_output_buffer_openPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<snd_output_t>>)>();

  int snd_output_buffer_string(
    ffi.Pointer<snd_output_t> output,
    ffi.Pointer<ffi.Pointer<ffi.Char>> buf,
  ) {
    return _snd_output_buffer_string(
      output,
      buf,
    );
  }

  late final _snd_output_buffer_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<snd_output_t>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('snd_output_buffer_string');
  late final _snd_output_buffer_string =
      _snd_output_buffer_stringPtr.asFunction<
          int Function(
              ffi.Pointer<snd_output_t>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int snd_output_buffer_steal(
    ffi.Pointer<snd_output_t> output,
    ffi.Pointer<ffi.Pointer<ffi.Char>> buf,
  ) {
    return _snd_output_buffer_steal(
      output,
      buf,
    );
  }

  late final _snd_output_buffer_stealPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<snd_output_t>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('snd_output_buffer_steal');
  late final _snd_output_buffer_steal = _snd_output_buffer_stealPtr.asFunction<
      int Function(
          ffi.Pointer<snd_output_t>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int snd_output_close(
    ffi.Pointer<snd_output_t> output,
  ) {
    return _snd_output_close(
      output,
    );
  }

  late final _snd_output_closePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_output_t>)>>(
          'snd_output_close');
  late final _snd_output_close = _snd_output_closePtr
      .asFunction<int Function(ffi.Pointer<snd_output_t>)>();

  int snd_output_printf(
    ffi.Pointer<snd_output_t> output,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _snd_output_printf(
      output,
      format,
    );
  }

  late final _snd_output_printfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_output_t>,
              ffi.Pointer<ffi.Char>)>>('snd_output_printf');
  late final _snd_output_printf = _snd_output_printfPtr.asFunction<
      int Function(ffi.Pointer<snd_output_t>, ffi.Pointer<ffi.Char>)>();

  int snd_output_vprintf(
    ffi.Pointer<snd_output_t> output,
    ffi.Pointer<ffi.Char> format,
    ffi.Pointer<_va_list_tag_> args,
  ) {
    return _snd_output_vprintf(
      output,
      format,
      args,
    );
  }

  late final _snd_output_vprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_output_t>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<_va_list_tag_>)>>('snd_output_vprintf');
  late final _snd_output_vprintf = _snd_output_vprintfPtr.asFunction<
      int Function(ffi.Pointer<snd_output_t>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<_va_list_tag_>)>();

  int snd_output_puts(
    ffi.Pointer<snd_output_t> output,
    ffi.Pointer<ffi.Char> str,
  ) {
    return _snd_output_puts(
      output,
      str,
    );
  }

  late final _snd_output_putsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_output_t>,
              ffi.Pointer<ffi.Char>)>>('snd_output_puts');
  late final _snd_output_puts = _snd_output_putsPtr.asFunction<
      int Function(ffi.Pointer<snd_output_t>, ffi.Pointer<ffi.Char>)>();

  int snd_output_putc(
    ffi.Pointer<snd_output_t> output,
    int c,
  ) {
    return _snd_output_putc(
      output,
      c,
    );
  }

  late final _snd_output_putcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_output_t>, ffi.Int)>>('snd_output_putc');
  late final _snd_output_putc = _snd_output_putcPtr
      .asFunction<int Function(ffi.Pointer<snd_output_t>, int)>();

  int snd_output_flush(
    ffi.Pointer<snd_output_t> output,
  ) {
    return _snd_output_flush(
      output,
    );
  }

  late final _snd_output_flushPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_output_t>)>>(
          'snd_output_flush');
  late final _snd_output_flush = _snd_output_flushPtr
      .asFunction<int Function(ffi.Pointer<snd_output_t>)>();

  ffi.Pointer<ffi.Char> snd_strerror(
    int errnum,
  ) {
    return _snd_strerror(
      errnum,
    );
  }

  late final _snd_strerrorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'snd_strerror');
  late final _snd_strerror =
      _snd_strerrorPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  late final ffi.Pointer<snd_lib_error_handler_t> _snd_lib_error =
      _lookup<snd_lib_error_handler_t>('snd_lib_error');

  snd_lib_error_handler_t get snd_lib_error => _snd_lib_error.value;

  set snd_lib_error(snd_lib_error_handler_t value) =>
      _snd_lib_error.value = value;

  int snd_lib_error_set_handler(
    snd_lib_error_handler_t handler,
  ) {
    return _snd_lib_error_set_handler(
      handler,
    );
  }

  late final _snd_lib_error_set_handlerPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(snd_lib_error_handler_t)>>(
          'snd_lib_error_set_handler');
  late final _snd_lib_error_set_handler = _snd_lib_error_set_handlerPtr
      .asFunction<int Function(snd_lib_error_handler_t)>();

  snd_local_error_handler_t snd_lib_error_set_local(
    snd_local_error_handler_t func,
  ) {
    return _snd_lib_error_set_local(
      func,
    );
  }

  late final _snd_lib_error_set_localPtr = _lookup<
      ffi.NativeFunction<
          snd_local_error_handler_t Function(
              snd_local_error_handler_t)>>('snd_lib_error_set_local');
  late final _snd_lib_error_set_local = _snd_lib_error_set_localPtr.asFunction<
      snd_local_error_handler_t Function(snd_local_error_handler_t)>();

  late final ffi.Pointer<ffi.Pointer<snd_config_t>> _snd_config =
      _lookup<ffi.Pointer<snd_config_t>>('snd_config');

  ffi.Pointer<snd_config_t> get snd_config => _snd_config.value;

  set snd_config(ffi.Pointer<snd_config_t> value) => _snd_config.value = value;

  ffi.Pointer<ffi.Char> snd_config_topdir() {
    return _snd_config_topdir();
  }

  late final _snd_config_topdirPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'snd_config_topdir');
  late final _snd_config_topdir =
      _snd_config_topdirPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  int snd_config_top(
    ffi.Pointer<ffi.Pointer<snd_config_t>> config,
  ) {
    return _snd_config_top(
      config,
    );
  }

  late final _snd_config_topPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<snd_config_t>>)>>('snd_config_top');
  late final _snd_config_top = _snd_config_topPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<snd_config_t>>)>();

  int snd_config_load(
    ffi.Pointer<snd_config_t> config,
    ffi.Pointer<snd_input_t> in1,
  ) {
    return _snd_config_load(
      config,
      in1,
    );
  }

  late final _snd_config_loadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_config_t>,
              ffi.Pointer<snd_input_t>)>>('snd_config_load');
  late final _snd_config_load = _snd_config_loadPtr.asFunction<
      int Function(ffi.Pointer<snd_config_t>, ffi.Pointer<snd_input_t>)>();

  int snd_config_load_string(
    ffi.Pointer<ffi.Pointer<snd_config_t>> config,
    ffi.Pointer<ffi.Char> s,
    int size,
  ) {
    return _snd_config_load_string(
      config,
      s,
      size,
    );
  }

  late final _snd_config_load_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<snd_config_t>>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('snd_config_load_string');
  late final _snd_config_load_string = _snd_config_load_stringPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<snd_config_t>>,
          ffi.Pointer<ffi.Char>, int)>();

  int snd_config_load_override(
    ffi.Pointer<snd_config_t> config,
    ffi.Pointer<snd_input_t> in1,
  ) {
    return _snd_config_load_override(
      config,
      in1,
    );
  }

  late final _snd_config_load_overridePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_config_t>,
              ffi.Pointer<snd_input_t>)>>('snd_config_load_override');
  late final _snd_config_load_override =
      _snd_config_load_overridePtr.asFunction<
          int Function(ffi.Pointer<snd_config_t>, ffi.Pointer<snd_input_t>)>();

  int snd_config_save(
    ffi.Pointer<snd_config_t> config,
    ffi.Pointer<snd_output_t> out,
  ) {
    return _snd_config_save(
      config,
      out,
    );
  }

  late final _snd_config_savePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_config_t>,
              ffi.Pointer<snd_output_t>)>>('snd_config_save');
  late final _snd_config_save = _snd_config_savePtr.asFunction<
      int Function(ffi.Pointer<snd_config_t>, ffi.Pointer<snd_output_t>)>();

  int snd_config_update() {
    return _snd_config_update();
  }

  late final _snd_config_updatePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('snd_config_update');
  late final _snd_config_update =
      _snd_config_updatePtr.asFunction<int Function()>();

  int snd_config_update_r(
    ffi.Pointer<ffi.Pointer<snd_config_t>> top,
    ffi.Pointer<ffi.Pointer<snd_config_update_t>> update,
    ffi.Pointer<ffi.Char> path,
  ) {
    return _snd_config_update_r(
      top,
      update,
      path,
    );
  }

  late final _snd_config_update_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<snd_config_t>>,
              ffi.Pointer<ffi.Pointer<snd_config_update_t>>,
              ffi.Pointer<ffi.Char>)>>('snd_config_update_r');
  late final _snd_config_update_r = _snd_config_update_rPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<snd_config_t>>,
          ffi.Pointer<ffi.Pointer<snd_config_update_t>>,
          ffi.Pointer<ffi.Char>)>();

  int snd_config_update_free(
    ffi.Pointer<snd_config_update_t> update,
  ) {
    return _snd_config_update_free(
      update,
    );
  }

  late final _snd_config_update_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_config_update_t>)>>('snd_config_update_free');
  late final _snd_config_update_free = _snd_config_update_freePtr
      .asFunction<int Function(ffi.Pointer<snd_config_update_t>)>();

  int snd_config_update_free_global() {
    return _snd_config_update_free_global();
  }

  late final _snd_config_update_free_globalPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'snd_config_update_free_global');
  late final _snd_config_update_free_global =
      _snd_config_update_free_globalPtr.asFunction<int Function()>();

  int snd_config_update_ref(
    ffi.Pointer<ffi.Pointer<snd_config_t>> top,
  ) {
    return _snd_config_update_ref(
      top,
    );
  }

  late final _snd_config_update_refPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Pointer<snd_config_t>>)>>(
      'snd_config_update_ref');
  late final _snd_config_update_ref = _snd_config_update_refPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<snd_config_t>>)>();

  void snd_config_ref(
    ffi.Pointer<snd_config_t> top,
  ) {
    return _snd_config_ref(
      top,
    );
  }

  late final _snd_config_refPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<snd_config_t>)>>(
          'snd_config_ref');
  late final _snd_config_ref =
      _snd_config_refPtr.asFunction<void Function(ffi.Pointer<snd_config_t>)>();

  void snd_config_unref(
    ffi.Pointer<snd_config_t> top,
  ) {
    return _snd_config_unref(
      top,
    );
  }

  late final _snd_config_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<snd_config_t>)>>(
          'snd_config_unref');
  late final _snd_config_unref = _snd_config_unrefPtr
      .asFunction<void Function(ffi.Pointer<snd_config_t>)>();

  int snd_config_search(
    ffi.Pointer<snd_config_t> config,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Pointer<snd_config_t>> result,
  ) {
    return _snd_config_search(
      config,
      key,
      result,
    );
  }

  late final _snd_config_searchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_config_t>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<snd_config_t>>)>>('snd_config_search');
  late final _snd_config_search = _snd_config_searchPtr.asFunction<
      int Function(ffi.Pointer<snd_config_t>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<snd_config_t>>)>();

  int snd_config_searchv(
    ffi.Pointer<snd_config_t> config,
    ffi.Pointer<ffi.Pointer<snd_config_t>> result,
  ) {
    return _snd_config_searchv(
      config,
      result,
    );
  }

  late final _snd_config_searchvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_config_t>,
              ffi.Pointer<ffi.Pointer<snd_config_t>>)>>('snd_config_searchv');
  late final _snd_config_searchv = _snd_config_searchvPtr.asFunction<
      int Function(
          ffi.Pointer<snd_config_t>, ffi.Pointer<ffi.Pointer<snd_config_t>>)>();

  int snd_config_search_definition(
    ffi.Pointer<snd_config_t> config,
    ffi.Pointer<ffi.Char> base,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Pointer<snd_config_t>> result,
  ) {
    return _snd_config_search_definition(
      config,
      base,
      key,
      result,
    );
  }

  late final _snd_config_search_definitionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<snd_config_t>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Pointer<snd_config_t>>)>>(
      'snd_config_search_definition');
  late final _snd_config_search_definition =
      _snd_config_search_definitionPtr.asFunction<
          int Function(ffi.Pointer<snd_config_t>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<snd_config_t>>)>();

  int snd_config_expand_custom(
    ffi.Pointer<snd_config_t> config,
    ffi.Pointer<snd_config_t> root,
    snd_config_expand_fcn_t fcn,
    ffi.Pointer<ffi.Void> private_data,
    ffi.Pointer<ffi.Pointer<snd_config_t>> result,
  ) {
    return _snd_config_expand_custom(
      config,
      root,
      fcn,
      private_data,
      result,
    );
  }

  late final _snd_config_expand_customPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<snd_config_t>,
                  ffi.Pointer<snd_config_t>,
                  snd_config_expand_fcn_t,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Pointer<snd_config_t>>)>>(
      'snd_config_expand_custom');
  late final _snd_config_expand_custom =
      _snd_config_expand_customPtr.asFunction<
          int Function(
              ffi.Pointer<snd_config_t>,
              ffi.Pointer<snd_config_t>,
              snd_config_expand_fcn_t,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Pointer<snd_config_t>>)>();

  int snd_config_expand(
    ffi.Pointer<snd_config_t> config,
    ffi.Pointer<snd_config_t> root,
    ffi.Pointer<ffi.Char> args,
    ffi.Pointer<snd_config_t> private_data,
    ffi.Pointer<ffi.Pointer<snd_config_t>> result,
  ) {
    return _snd_config_expand(
      config,
      root,
      args,
      private_data,
      result,
    );
  }

  late final _snd_config_expandPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_config_t>,
              ffi.Pointer<snd_config_t>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<snd_config_t>,
              ffi.Pointer<ffi.Pointer<snd_config_t>>)>>('snd_config_expand');
  late final _snd_config_expand = _snd_config_expandPtr.asFunction<
      int Function(
          ffi.Pointer<snd_config_t>,
          ffi.Pointer<snd_config_t>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<snd_config_t>,
          ffi.Pointer<ffi.Pointer<snd_config_t>>)>();

  int snd_config_evaluate(
    ffi.Pointer<snd_config_t> config,
    ffi.Pointer<snd_config_t> root,
    ffi.Pointer<snd_config_t> private_data,
    ffi.Pointer<ffi.Pointer<snd_config_t>> result,
  ) {
    return _snd_config_evaluate(
      config,
      root,
      private_data,
      result,
    );
  }

  late final _snd_config_evaluatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_config_t>,
              ffi.Pointer<snd_config_t>,
              ffi.Pointer<snd_config_t>,
              ffi.Pointer<ffi.Pointer<snd_config_t>>)>>('snd_config_evaluate');
  late final _snd_config_evaluate = _snd_config_evaluatePtr.asFunction<
      int Function(ffi.Pointer<snd_config_t>, ffi.Pointer<snd_config_t>,
          ffi.Pointer<snd_config_t>, ffi.Pointer<ffi.Pointer<snd_config_t>>)>();

  int snd_config_evaluate_string(
    ffi.Pointer<ffi.Pointer<snd_config_t>> dst,
    ffi.Pointer<ffi.Char> s,
    snd_config_expand_fcn_t fcn,
    ffi.Pointer<ffi.Void> private_data,
  ) {
    return _snd_config_evaluate_string(
      dst,
      s,
      fcn,
      private_data,
    );
  }

  late final _snd_config_evaluate_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<snd_config_t>>,
              ffi.Pointer<ffi.Char>,
              snd_config_expand_fcn_t,
              ffi.Pointer<ffi.Void>)>>('snd_config_evaluate_string');
  late final _snd_config_evaluate_string =
      _snd_config_evaluate_stringPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Pointer<snd_config_t>>,
              ffi.Pointer<ffi.Char>,
              snd_config_expand_fcn_t,
              ffi.Pointer<ffi.Void>)>();

  int snd_config_add(
    ffi.Pointer<snd_config_t> config,
    ffi.Pointer<snd_config_t> child,
  ) {
    return _snd_config_add(
      config,
      child,
    );
  }

  late final _snd_config_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_config_t>,
              ffi.Pointer<snd_config_t>)>>('snd_config_add');
  late final _snd_config_add = _snd_config_addPtr.asFunction<
      int Function(ffi.Pointer<snd_config_t>, ffi.Pointer<snd_config_t>)>();

  int snd_config_add_before(
    ffi.Pointer<snd_config_t> before,
    ffi.Pointer<snd_config_t> child,
  ) {
    return _snd_config_add_before(
      before,
      child,
    );
  }

  late final _snd_config_add_beforePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_config_t>,
              ffi.Pointer<snd_config_t>)>>('snd_config_add_before');
  late final _snd_config_add_before = _snd_config_add_beforePtr.asFunction<
      int Function(ffi.Pointer<snd_config_t>, ffi.Pointer<snd_config_t>)>();

  int snd_config_add_after(
    ffi.Pointer<snd_config_t> after,
    ffi.Pointer<snd_config_t> child,
  ) {
    return _snd_config_add_after(
      after,
      child,
    );
  }

  late final _snd_config_add_afterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_config_t>,
              ffi.Pointer<snd_config_t>)>>('snd_config_add_after');
  late final _snd_config_add_after = _snd_config_add_afterPtr.asFunction<
      int Function(ffi.Pointer<snd_config_t>, ffi.Pointer<snd_config_t>)>();

  int snd_config_remove(
    ffi.Pointer<snd_config_t> config,
  ) {
    return _snd_config_remove(
      config,
    );
  }

  late final _snd_config_removePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_config_t>)>>(
          'snd_config_remove');
  late final _snd_config_remove = _snd_config_removePtr
      .asFunction<int Function(ffi.Pointer<snd_config_t>)>();

  int snd_config_delete(
    ffi.Pointer<snd_config_t> config,
  ) {
    return _snd_config_delete(
      config,
    );
  }

  late final _snd_config_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_config_t>)>>(
          'snd_config_delete');
  late final _snd_config_delete = _snd_config_deletePtr
      .asFunction<int Function(ffi.Pointer<snd_config_t>)>();

  int snd_config_delete_compound_members(
    ffi.Pointer<snd_config_t> config,
  ) {
    return _snd_config_delete_compound_members(
      config,
    );
  }

  late final _snd_config_delete_compound_membersPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_config_t>)>>(
          'snd_config_delete_compound_members');
  late final _snd_config_delete_compound_members =
      _snd_config_delete_compound_membersPtr
          .asFunction<int Function(ffi.Pointer<snd_config_t>)>();

  int snd_config_copy(
    ffi.Pointer<ffi.Pointer<snd_config_t>> dst,
    ffi.Pointer<snd_config_t> src,
  ) {
    return _snd_config_copy(
      dst,
      src,
    );
  }

  late final _snd_config_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<snd_config_t>>,
              ffi.Pointer<snd_config_t>)>>('snd_config_copy');
  late final _snd_config_copy = _snd_config_copyPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<snd_config_t>>, ffi.Pointer<snd_config_t>)>();

  int snd_config_merge(
    ffi.Pointer<snd_config_t> dst,
    ffi.Pointer<snd_config_t> src,
    int override,
  ) {
    return _snd_config_merge(
      dst,
      src,
      override,
    );
  }

  late final _snd_config_mergePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_config_t>, ffi.Pointer<snd_config_t>,
              ffi.Int)>>('snd_config_merge');
  late final _snd_config_merge = _snd_config_mergePtr.asFunction<
      int Function(
          ffi.Pointer<snd_config_t>, ffi.Pointer<snd_config_t>, int)>();

  int snd_config_make(
    ffi.Pointer<ffi.Pointer<snd_config_t>> config,
    ffi.Pointer<ffi.Char> key,
    int type,
  ) {
    return _snd_config_make(
      config,
      key,
      type,
    );
  }

  late final _snd_config_makePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<snd_config_t>>,
              ffi.Pointer<ffi.Char>, ffi.Int32)>>('snd_config_make');
  late final _snd_config_make = _snd_config_makePtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<snd_config_t>>,
          ffi.Pointer<ffi.Char>, int)>();

  int snd_config_make_integer(
    ffi.Pointer<ffi.Pointer<snd_config_t>> config,
    ffi.Pointer<ffi.Char> key,
  ) {
    return _snd_config_make_integer(
      config,
      key,
    );
  }

  late final _snd_config_make_integerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<snd_config_t>>,
              ffi.Pointer<ffi.Char>)>>('snd_config_make_integer');
  late final _snd_config_make_integer = _snd_config_make_integerPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<snd_config_t>>, ffi.Pointer<ffi.Char>)>();

  int snd_config_make_integer64(
    ffi.Pointer<ffi.Pointer<snd_config_t>> config,
    ffi.Pointer<ffi.Char> key,
  ) {
    return _snd_config_make_integer64(
      config,
      key,
    );
  }

  late final _snd_config_make_integer64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<snd_config_t>>,
              ffi.Pointer<ffi.Char>)>>('snd_config_make_integer64');
  late final _snd_config_make_integer64 =
      _snd_config_make_integer64Ptr.asFunction<
          int Function(
              ffi.Pointer<ffi.Pointer<snd_config_t>>, ffi.Pointer<ffi.Char>)>();

  int snd_config_make_real(
    ffi.Pointer<ffi.Pointer<snd_config_t>> config,
    ffi.Pointer<ffi.Char> key,
  ) {
    return _snd_config_make_real(
      config,
      key,
    );
  }

  late final _snd_config_make_realPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<snd_config_t>>,
              ffi.Pointer<ffi.Char>)>>('snd_config_make_real');
  late final _snd_config_make_real = _snd_config_make_realPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<snd_config_t>>, ffi.Pointer<ffi.Char>)>();

  int snd_config_make_string(
    ffi.Pointer<ffi.Pointer<snd_config_t>> config,
    ffi.Pointer<ffi.Char> key,
  ) {
    return _snd_config_make_string(
      config,
      key,
    );
  }

  late final _snd_config_make_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<snd_config_t>>,
              ffi.Pointer<ffi.Char>)>>('snd_config_make_string');
  late final _snd_config_make_string = _snd_config_make_stringPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<snd_config_t>>, ffi.Pointer<ffi.Char>)>();

  int snd_config_make_pointer(
    ffi.Pointer<ffi.Pointer<snd_config_t>> config,
    ffi.Pointer<ffi.Char> key,
  ) {
    return _snd_config_make_pointer(
      config,
      key,
    );
  }

  late final _snd_config_make_pointerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<snd_config_t>>,
              ffi.Pointer<ffi.Char>)>>('snd_config_make_pointer');
  late final _snd_config_make_pointer = _snd_config_make_pointerPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<snd_config_t>>, ffi.Pointer<ffi.Char>)>();

  int snd_config_make_compound(
    ffi.Pointer<ffi.Pointer<snd_config_t>> config,
    ffi.Pointer<ffi.Char> key,
    int join,
  ) {
    return _snd_config_make_compound(
      config,
      key,
      join,
    );
  }

  late final _snd_config_make_compoundPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<snd_config_t>>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('snd_config_make_compound');
  late final _snd_config_make_compound =
      _snd_config_make_compoundPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<snd_config_t>>,
              ffi.Pointer<ffi.Char>, int)>();

  int snd_config_make_path(
    ffi.Pointer<ffi.Pointer<snd_config_t>> config,
    ffi.Pointer<snd_config_t> root,
    ffi.Pointer<ffi.Char> key,
    int join,
    int override,
  ) {
    return _snd_config_make_path(
      config,
      root,
      key,
      join,
      override,
    );
  }

  late final _snd_config_make_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<snd_config_t>>,
              ffi.Pointer<snd_config_t>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Int)>>('snd_config_make_path');
  late final _snd_config_make_path = _snd_config_make_pathPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<snd_config_t>>,
          ffi.Pointer<snd_config_t>, ffi.Pointer<ffi.Char>, int, int)>();

  int snd_config_imake_integer(
    ffi.Pointer<ffi.Pointer<snd_config_t>> config,
    ffi.Pointer<ffi.Char> key,
    int value,
  ) {
    return _snd_config_imake_integer(
      config,
      key,
      value,
    );
  }

  late final _snd_config_imake_integerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<snd_config_t>>,
              ffi.Pointer<ffi.Char>, ffi.Long)>>('snd_config_imake_integer');
  late final _snd_config_imake_integer =
      _snd_config_imake_integerPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<snd_config_t>>,
              ffi.Pointer<ffi.Char>, int)>();

  int snd_config_imake_integer64(
    ffi.Pointer<ffi.Pointer<snd_config_t>> config,
    ffi.Pointer<ffi.Char> key,
    int value,
  ) {
    return _snd_config_imake_integer64(
      config,
      key,
      value,
    );
  }

  late final _snd_config_imake_integer64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<snd_config_t>>,
              ffi.Pointer<ffi.Char>,
              ffi.LongLong)>>('snd_config_imake_integer64');
  late final _snd_config_imake_integer64 =
      _snd_config_imake_integer64Ptr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<snd_config_t>>,
              ffi.Pointer<ffi.Char>, int)>();

  int snd_config_imake_real(
    ffi.Pointer<ffi.Pointer<snd_config_t>> config,
    ffi.Pointer<ffi.Char> key,
    double value,
  ) {
    return _snd_config_imake_real(
      config,
      key,
      value,
    );
  }

  late final _snd_config_imake_realPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<snd_config_t>>,
              ffi.Pointer<ffi.Char>, ffi.Double)>>('snd_config_imake_real');
  late final _snd_config_imake_real = _snd_config_imake_realPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<snd_config_t>>,
          ffi.Pointer<ffi.Char>, double)>();

  int snd_config_imake_string(
    ffi.Pointer<ffi.Pointer<snd_config_t>> config,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Char> ascii,
  ) {
    return _snd_config_imake_string(
      config,
      key,
      ascii,
    );
  }

  late final _snd_config_imake_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<snd_config_t>>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('snd_config_imake_string');
  late final _snd_config_imake_string = _snd_config_imake_stringPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<snd_config_t>>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int snd_config_imake_safe_string(
    ffi.Pointer<ffi.Pointer<snd_config_t>> config,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Char> ascii,
  ) {
    return _snd_config_imake_safe_string(
      config,
      key,
      ascii,
    );
  }

  late final _snd_config_imake_safe_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<snd_config_t>>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('snd_config_imake_safe_string');
  late final _snd_config_imake_safe_string =
      _snd_config_imake_safe_stringPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<snd_config_t>>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int snd_config_imake_pointer(
    ffi.Pointer<ffi.Pointer<snd_config_t>> config,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _snd_config_imake_pointer(
      config,
      key,
      ptr,
    );
  }

  late final _snd_config_imake_pointerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<snd_config_t>>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('snd_config_imake_pointer');
  late final _snd_config_imake_pointer =
      _snd_config_imake_pointerPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<snd_config_t>>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int snd_config_get_type(
    ffi.Pointer<snd_config_t> config,
  ) {
    return _snd_config_get_type(
      config,
    );
  }

  late final _snd_config_get_typePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<snd_config_t>)>>(
      'snd_config_get_type');
  late final _snd_config_get_type = _snd_config_get_typePtr
      .asFunction<int Function(ffi.Pointer<snd_config_t>)>();

  int snd_config_is_array(
    ffi.Pointer<snd_config_t> config,
  ) {
    return _snd_config_is_array(
      config,
    );
  }

  late final _snd_config_is_arrayPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_config_t>)>>(
          'snd_config_is_array');
  late final _snd_config_is_array = _snd_config_is_arrayPtr
      .asFunction<int Function(ffi.Pointer<snd_config_t>)>();

  int snd_config_is_empty(
    ffi.Pointer<snd_config_t> config,
  ) {
    return _snd_config_is_empty(
      config,
    );
  }

  late final _snd_config_is_emptyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_config_t>)>>(
          'snd_config_is_empty');
  late final _snd_config_is_empty = _snd_config_is_emptyPtr
      .asFunction<int Function(ffi.Pointer<snd_config_t>)>();

  int snd_config_set_id(
    ffi.Pointer<snd_config_t> config,
    ffi.Pointer<ffi.Char> id,
  ) {
    return _snd_config_set_id(
      config,
      id,
    );
  }

  late final _snd_config_set_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_config_t>,
              ffi.Pointer<ffi.Char>)>>('snd_config_set_id');
  late final _snd_config_set_id = _snd_config_set_idPtr.asFunction<
      int Function(ffi.Pointer<snd_config_t>, ffi.Pointer<ffi.Char>)>();

  int snd_config_set_integer(
    ffi.Pointer<snd_config_t> config,
    int value,
  ) {
    return _snd_config_set_integer(
      config,
      value,
    );
  }

  late final _snd_config_set_integerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_config_t>, ffi.Long)>>('snd_config_set_integer');
  late final _snd_config_set_integer = _snd_config_set_integerPtr
      .asFunction<int Function(ffi.Pointer<snd_config_t>, int)>();

  int snd_config_set_integer64(
    ffi.Pointer<snd_config_t> config,
    int value,
  ) {
    return _snd_config_set_integer64(
      config,
      value,
    );
  }

  late final _snd_config_set_integer64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_config_t>,
              ffi.LongLong)>>('snd_config_set_integer64');
  late final _snd_config_set_integer64 = _snd_config_set_integer64Ptr
      .asFunction<int Function(ffi.Pointer<snd_config_t>, int)>();

  int snd_config_set_real(
    ffi.Pointer<snd_config_t> config,
    double value,
  ) {
    return _snd_config_set_real(
      config,
      value,
    );
  }

  late final _snd_config_set_realPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_config_t>, ffi.Double)>>('snd_config_set_real');
  late final _snd_config_set_real = _snd_config_set_realPtr
      .asFunction<int Function(ffi.Pointer<snd_config_t>, double)>();

  int snd_config_set_string(
    ffi.Pointer<snd_config_t> config,
    ffi.Pointer<ffi.Char> value,
  ) {
    return _snd_config_set_string(
      config,
      value,
    );
  }

  late final _snd_config_set_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_config_t>,
              ffi.Pointer<ffi.Char>)>>('snd_config_set_string');
  late final _snd_config_set_string = _snd_config_set_stringPtr.asFunction<
      int Function(ffi.Pointer<snd_config_t>, ffi.Pointer<ffi.Char>)>();

  int snd_config_set_ascii(
    ffi.Pointer<snd_config_t> config,
    ffi.Pointer<ffi.Char> ascii,
  ) {
    return _snd_config_set_ascii(
      config,
      ascii,
    );
  }

  late final _snd_config_set_asciiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_config_t>,
              ffi.Pointer<ffi.Char>)>>('snd_config_set_ascii');
  late final _snd_config_set_ascii = _snd_config_set_asciiPtr.asFunction<
      int Function(ffi.Pointer<snd_config_t>, ffi.Pointer<ffi.Char>)>();

  int snd_config_set_pointer(
    ffi.Pointer<snd_config_t> config,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _snd_config_set_pointer(
      config,
      ptr,
    );
  }

  late final _snd_config_set_pointerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_config_t>,
              ffi.Pointer<ffi.Void>)>>('snd_config_set_pointer');
  late final _snd_config_set_pointer = _snd_config_set_pointerPtr.asFunction<
      int Function(ffi.Pointer<snd_config_t>, ffi.Pointer<ffi.Void>)>();

  int snd_config_get_id(
    ffi.Pointer<snd_config_t> config,
    ffi.Pointer<ffi.Pointer<ffi.Char>> value,
  ) {
    return _snd_config_get_id(
      config,
      value,
    );
  }

  late final _snd_config_get_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_config_t>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('snd_config_get_id');
  late final _snd_config_get_id = _snd_config_get_idPtr.asFunction<
      int Function(
          ffi.Pointer<snd_config_t>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int snd_config_get_integer(
    ffi.Pointer<snd_config_t> config,
    ffi.Pointer<ffi.Long> value,
  ) {
    return _snd_config_get_integer(
      config,
      value,
    );
  }

  late final _snd_config_get_integerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_config_t>,
              ffi.Pointer<ffi.Long>)>>('snd_config_get_integer');
  late final _snd_config_get_integer = _snd_config_get_integerPtr.asFunction<
      int Function(ffi.Pointer<snd_config_t>, ffi.Pointer<ffi.Long>)>();

  int snd_config_get_integer64(
    ffi.Pointer<snd_config_t> config,
    ffi.Pointer<ffi.LongLong> value,
  ) {
    return _snd_config_get_integer64(
      config,
      value,
    );
  }

  late final _snd_config_get_integer64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_config_t>,
              ffi.Pointer<ffi.LongLong>)>>('snd_config_get_integer64');
  late final _snd_config_get_integer64 =
      _snd_config_get_integer64Ptr.asFunction<
          int Function(ffi.Pointer<snd_config_t>, ffi.Pointer<ffi.LongLong>)>();

  int snd_config_get_real(
    ffi.Pointer<snd_config_t> config,
    ffi.Pointer<ffi.Double> value,
  ) {
    return _snd_config_get_real(
      config,
      value,
    );
  }

  late final _snd_config_get_realPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_config_t>,
              ffi.Pointer<ffi.Double>)>>('snd_config_get_real');
  late final _snd_config_get_real = _snd_config_get_realPtr.asFunction<
      int Function(ffi.Pointer<snd_config_t>, ffi.Pointer<ffi.Double>)>();

  int snd_config_get_ireal(
    ffi.Pointer<snd_config_t> config,
    ffi.Pointer<ffi.Double> value,
  ) {
    return _snd_config_get_ireal(
      config,
      value,
    );
  }

  late final _snd_config_get_irealPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_config_t>,
              ffi.Pointer<ffi.Double>)>>('snd_config_get_ireal');
  late final _snd_config_get_ireal = _snd_config_get_irealPtr.asFunction<
      int Function(ffi.Pointer<snd_config_t>, ffi.Pointer<ffi.Double>)>();

  int snd_config_get_string(
    ffi.Pointer<snd_config_t> config,
    ffi.Pointer<ffi.Pointer<ffi.Char>> value,
  ) {
    return _snd_config_get_string(
      config,
      value,
    );
  }

  late final _snd_config_get_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_config_t>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('snd_config_get_string');
  late final _snd_config_get_string = _snd_config_get_stringPtr.asFunction<
      int Function(
          ffi.Pointer<snd_config_t>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int snd_config_get_ascii(
    ffi.Pointer<snd_config_t> config,
    ffi.Pointer<ffi.Pointer<ffi.Char>> value,
  ) {
    return _snd_config_get_ascii(
      config,
      value,
    );
  }

  late final _snd_config_get_asciiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_config_t>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('snd_config_get_ascii');
  late final _snd_config_get_ascii = _snd_config_get_asciiPtr.asFunction<
      int Function(
          ffi.Pointer<snd_config_t>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int snd_config_get_pointer(
    ffi.Pointer<snd_config_t> config,
    ffi.Pointer<ffi.Pointer<ffi.Void>> value,
  ) {
    return _snd_config_get_pointer(
      config,
      value,
    );
  }

  late final _snd_config_get_pointerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_config_t>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('snd_config_get_pointer');
  late final _snd_config_get_pointer = _snd_config_get_pointerPtr.asFunction<
      int Function(
          ffi.Pointer<snd_config_t>, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  int snd_config_test_id(
    ffi.Pointer<snd_config_t> config,
    ffi.Pointer<ffi.Char> id,
  ) {
    return _snd_config_test_id(
      config,
      id,
    );
  }

  late final _snd_config_test_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_config_t>,
              ffi.Pointer<ffi.Char>)>>('snd_config_test_id');
  late final _snd_config_test_id = _snd_config_test_idPtr.asFunction<
      int Function(ffi.Pointer<snd_config_t>, ffi.Pointer<ffi.Char>)>();

  snd_config_iterator_t snd_config_iterator_first(
    ffi.Pointer<snd_config_t> node,
  ) {
    return _snd_config_iterator_first(
      node,
    );
  }

  late final _snd_config_iterator_firstPtr = _lookup<
      ffi.NativeFunction<
          snd_config_iterator_t Function(
              ffi.Pointer<snd_config_t>)>>('snd_config_iterator_first');
  late final _snd_config_iterator_first = _snd_config_iterator_firstPtr
      .asFunction<snd_config_iterator_t Function(ffi.Pointer<snd_config_t>)>();

  snd_config_iterator_t snd_config_iterator_next(
    snd_config_iterator_t iterator,
  ) {
    return _snd_config_iterator_next(
      iterator,
    );
  }

  late final _snd_config_iterator_nextPtr = _lookup<
      ffi.NativeFunction<
          snd_config_iterator_t Function(
              snd_config_iterator_t)>>('snd_config_iterator_next');
  late final _snd_config_iterator_next = _snd_config_iterator_nextPtr
      .asFunction<snd_config_iterator_t Function(snd_config_iterator_t)>();

  snd_config_iterator_t snd_config_iterator_end(
    ffi.Pointer<snd_config_t> node,
  ) {
    return _snd_config_iterator_end(
      node,
    );
  }

  late final _snd_config_iterator_endPtr = _lookup<
      ffi.NativeFunction<
          snd_config_iterator_t Function(
              ffi.Pointer<snd_config_t>)>>('snd_config_iterator_end');
  late final _snd_config_iterator_end = _snd_config_iterator_endPtr
      .asFunction<snd_config_iterator_t Function(ffi.Pointer<snd_config_t>)>();

  ffi.Pointer<snd_config_t> snd_config_iterator_entry(
    snd_config_iterator_t iterator,
  ) {
    return _snd_config_iterator_entry(
      iterator,
    );
  }

  late final _snd_config_iterator_entryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<snd_config_t> Function(
              snd_config_iterator_t)>>('snd_config_iterator_entry');
  late final _snd_config_iterator_entry = _snd_config_iterator_entryPtr
      .asFunction<ffi.Pointer<snd_config_t> Function(snd_config_iterator_t)>();

  int snd_config_get_bool_ascii(
    ffi.Pointer<ffi.Char> ascii,
  ) {
    return _snd_config_get_bool_ascii(
      ascii,
    );
  }

  late final _snd_config_get_bool_asciiPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'snd_config_get_bool_ascii');
  late final _snd_config_get_bool_ascii = _snd_config_get_bool_asciiPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int snd_config_get_bool(
    ffi.Pointer<snd_config_t> conf,
  ) {
    return _snd_config_get_bool(
      conf,
    );
  }

  late final _snd_config_get_boolPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_config_t>)>>(
          'snd_config_get_bool');
  late final _snd_config_get_bool = _snd_config_get_boolPtr
      .asFunction<int Function(ffi.Pointer<snd_config_t>)>();

  int snd_config_get_card(
    ffi.Pointer<snd_config_t> conf,
  ) {
    return _snd_config_get_card(
      conf,
    );
  }

  late final _snd_config_get_cardPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_config_t>)>>(
          'snd_config_get_card');
  late final _snd_config_get_card = _snd_config_get_cardPtr
      .asFunction<int Function(ffi.Pointer<snd_config_t>)>();

  int snd_config_get_ctl_iface_ascii(
    ffi.Pointer<ffi.Char> ascii,
  ) {
    return _snd_config_get_ctl_iface_ascii(
      ascii,
    );
  }

  late final _snd_config_get_ctl_iface_asciiPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'snd_config_get_ctl_iface_ascii');
  late final _snd_config_get_ctl_iface_ascii =
      _snd_config_get_ctl_iface_asciiPtr
          .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int snd_config_get_ctl_iface(
    ffi.Pointer<snd_config_t> conf,
  ) {
    return _snd_config_get_ctl_iface(
      conf,
    );
  }

  late final _snd_config_get_ctl_ifacePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_config_t>)>>(
          'snd_config_get_ctl_iface');
  late final _snd_config_get_ctl_iface = _snd_config_get_ctl_ifacePtr
      .asFunction<int Function(ffi.Pointer<snd_config_t>)>();

  int snd_names_list(
    ffi.Pointer<ffi.Char> iface,
    ffi.Pointer<ffi.Pointer<snd_devname_t>> list,
  ) {
    return _snd_names_list(
      iface,
      list,
    );
  }

  late final _snd_names_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<snd_devname_t>>)>>('snd_names_list');
  late final _snd_names_list = _snd_names_listPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<snd_devname_t>>)>();

  void snd_names_list_free(
    ffi.Pointer<snd_devname_t> list,
  ) {
    return _snd_names_list_free(
      list,
    );
  }

  late final _snd_names_list_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<snd_devname_t>)>>(
      'snd_names_list_free');
  late final _snd_names_list_free = _snd_names_list_freePtr
      .asFunction<void Function(ffi.Pointer<snd_devname_t>)>();

  int snd_pcm_open(
    ffi.Pointer<ffi.Pointer<snd_pcm_t>> pcm,
    ffi.Pointer<ffi.Char> name,
    int stream,
    int mode,
  ) {
    return _snd_pcm_open(
      pcm,
      name,
      stream,
      mode,
    );
  }

  late final _snd_pcm_openPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<snd_pcm_t>>,
              ffi.Pointer<ffi.Char>, ffi.Int32, ffi.Int)>>('snd_pcm_open');
  late final _snd_pcm_open = _snd_pcm_openPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<snd_pcm_t>>, ffi.Pointer<ffi.Char>,
          int, int)>();

  int snd_pcm_open_lconf(
    ffi.Pointer<ffi.Pointer<snd_pcm_t>> pcm,
    ffi.Pointer<ffi.Char> name,
    int stream,
    int mode,
    ffi.Pointer<snd_config_t> lconf,
  ) {
    return _snd_pcm_open_lconf(
      pcm,
      name,
      stream,
      mode,
      lconf,
    );
  }

  late final _snd_pcm_open_lconfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<snd_pcm_t>>,
              ffi.Pointer<ffi.Char>,
              ffi.Int32,
              ffi.Int,
              ffi.Pointer<snd_config_t>)>>('snd_pcm_open_lconf');
  late final _snd_pcm_open_lconf = _snd_pcm_open_lconfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<snd_pcm_t>>, ffi.Pointer<ffi.Char>,
          int, int, ffi.Pointer<snd_config_t>)>();

  int snd_pcm_open_fallback(
    ffi.Pointer<ffi.Pointer<snd_pcm_t>> pcm,
    ffi.Pointer<snd_config_t> root,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> orig_name,
    int stream,
    int mode,
  ) {
    return _snd_pcm_open_fallback(
      pcm,
      root,
      name,
      orig_name,
      stream,
      mode,
    );
  }

  late final _snd_pcm_open_fallbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<snd_pcm_t>>,
              ffi.Pointer<snd_config_t>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int32,
              ffi.Int)>>('snd_pcm_open_fallback');
  late final _snd_pcm_open_fallback = _snd_pcm_open_fallbackPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<snd_pcm_t>>,
          ffi.Pointer<snd_config_t>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          int,
          int)>();

  int snd_pcm_close(
    ffi.Pointer<snd_pcm_t> pcm,
  ) {
    return _snd_pcm_close(
      pcm,
    );
  }

  late final _snd_pcm_closePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_pcm_t>)>>(
          'snd_pcm_close');
  late final _snd_pcm_close =
      _snd_pcm_closePtr.asFunction<int Function(ffi.Pointer<snd_pcm_t>)>();

  ffi.Pointer<ffi.Char> snd_pcm_name(
    ffi.Pointer<snd_pcm_t> pcm,
  ) {
    return _snd_pcm_name(
      pcm,
    );
  }

  late final _snd_pcm_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<snd_pcm_t>)>>('snd_pcm_name');
  late final _snd_pcm_name = _snd_pcm_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<snd_pcm_t>)>();

  int snd_pcm_type(
    ffi.Pointer<snd_pcm_t> pcm,
  ) {
    return _snd_pcm_type(
      pcm,
    );
  }

  late final _snd_pcm_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<snd_pcm_t>)>>(
          'snd_pcm_type');
  late final _snd_pcm_type =
      _snd_pcm_typePtr.asFunction<int Function(ffi.Pointer<snd_pcm_t>)>();

  int snd_pcm_stream(
    ffi.Pointer<snd_pcm_t> pcm,
  ) {
    return _snd_pcm_stream(
      pcm,
    );
  }

  late final _snd_pcm_streamPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<snd_pcm_t>)>>(
          'snd_pcm_stream');
  late final _snd_pcm_stream =
      _snd_pcm_streamPtr.asFunction<int Function(ffi.Pointer<snd_pcm_t>)>();

  int snd_pcm_poll_descriptors_count(
    ffi.Pointer<snd_pcm_t> pcm,
  ) {
    return _snd_pcm_poll_descriptors_count(
      pcm,
    );
  }

  late final _snd_pcm_poll_descriptors_countPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_pcm_t>)>>(
          'snd_pcm_poll_descriptors_count');
  late final _snd_pcm_poll_descriptors_count =
      _snd_pcm_poll_descriptors_countPtr
          .asFunction<int Function(ffi.Pointer<snd_pcm_t>)>();

  int snd_pcm_poll_descriptors(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<pollfd> pfds,
    int space,
  ) {
    return _snd_pcm_poll_descriptors(
      pcm,
      pfds,
      space,
    );
  }

  late final _snd_pcm_poll_descriptorsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<pollfd>,
              ffi.UnsignedInt)>>('snd_pcm_poll_descriptors');
  late final _snd_pcm_poll_descriptors =
      _snd_pcm_poll_descriptorsPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<pollfd>, int)>();

  int snd_pcm_poll_descriptors_revents(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<pollfd> pfds,
    int nfds,
    ffi.Pointer<ffi.UnsignedShort> revents,
  ) {
    return _snd_pcm_poll_descriptors_revents(
      pcm,
      pfds,
      nfds,
      revents,
    );
  }

  late final _snd_pcm_poll_descriptors_reventsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<pollfd>,
                  ffi.UnsignedInt, ffi.Pointer<ffi.UnsignedShort>)>>(
      'snd_pcm_poll_descriptors_revents');
  late final _snd_pcm_poll_descriptors_revents =
      _snd_pcm_poll_descriptors_reventsPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<pollfd>, int,
              ffi.Pointer<ffi.UnsignedShort>)>();

  int snd_pcm_nonblock(
    ffi.Pointer<snd_pcm_t> pcm,
    int nonblock,
  ) {
    return _snd_pcm_nonblock(
      pcm,
      nonblock,
    );
  }

  late final _snd_pcm_nonblockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>, ffi.Int)>>('snd_pcm_nonblock');
  late final _snd_pcm_nonblock = _snd_pcm_nonblockPtr
      .asFunction<int Function(ffi.Pointer<snd_pcm_t>, int)>();

  int snd_async_add_pcm_handler(
    ffi.Pointer<ffi.Pointer<snd_async_handler_t>> handler,
    ffi.Pointer<snd_pcm_t> pcm,
    snd_async_callback_t callback,
    ffi.Pointer<ffi.Void> private_data,
  ) {
    return _snd_async_add_pcm_handler(
      handler,
      pcm,
      callback,
      private_data,
    );
  }

  late final _snd_async_add_pcm_handlerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<snd_async_handler_t>>,
              ffi.Pointer<snd_pcm_t>,
              snd_async_callback_t,
              ffi.Pointer<ffi.Void>)>>('snd_async_add_pcm_handler');
  late final _snd_async_add_pcm_handler =
      _snd_async_add_pcm_handlerPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Pointer<snd_async_handler_t>>,
              ffi.Pointer<snd_pcm_t>,
              snd_async_callback_t,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<snd_pcm_t> snd_async_handler_get_pcm(
    ffi.Pointer<snd_async_handler_t> handler,
  ) {
    return _snd_async_handler_get_pcm(
      handler,
    );
  }

  late final _snd_async_handler_get_pcmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<snd_pcm_t> Function(
              ffi.Pointer<snd_async_handler_t>)>>('snd_async_handler_get_pcm');
  late final _snd_async_handler_get_pcm =
      _snd_async_handler_get_pcmPtr.asFunction<
          ffi.Pointer<snd_pcm_t> Function(ffi.Pointer<snd_async_handler_t>)>();

  int snd_pcm_info(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_info_t> info,
  ) {
    return _snd_pcm_info(
      pcm,
      info,
    );
  }

  late final _snd_pcm_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_info_t>)>>('snd_pcm_info');
  late final _snd_pcm_info = _snd_pcm_infoPtr.asFunction<
      int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_info_t>)>();

  int snd_pcm_hw_params_current(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
  ) {
    return _snd_pcm_hw_params_current(
      pcm,
      params,
    );
  }

  late final _snd_pcm_hw_params_currentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_hw_params_t>)>>('snd_pcm_hw_params_current');
  late final _snd_pcm_hw_params_current =
      _snd_pcm_hw_params_currentPtr.asFunction<
          int Function(
              ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>)>();

  int snd_pcm_hw_params(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
  ) {
    return _snd_pcm_hw_params(
      pcm,
      params,
    );
  }

  late final _snd_pcm_hw_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_hw_params_t>)>>('snd_pcm_hw_params');
  late final _snd_pcm_hw_params = _snd_pcm_hw_paramsPtr.asFunction<
      int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>)>();

  int snd_pcm_hw_free(
    ffi.Pointer<snd_pcm_t> pcm,
  ) {
    return _snd_pcm_hw_free(
      pcm,
    );
  }

  late final _snd_pcm_hw_freePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_pcm_t>)>>(
          'snd_pcm_hw_free');
  late final _snd_pcm_hw_free =
      _snd_pcm_hw_freePtr.asFunction<int Function(ffi.Pointer<snd_pcm_t>)>();

  int snd_pcm_sw_params_current(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_sw_params_t> params,
  ) {
    return _snd_pcm_sw_params_current(
      pcm,
      params,
    );
  }

  late final _snd_pcm_sw_params_currentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_sw_params_t>)>>('snd_pcm_sw_params_current');
  late final _snd_pcm_sw_params_current =
      _snd_pcm_sw_params_currentPtr.asFunction<
          int Function(
              ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_sw_params_t>)>();

  int snd_pcm_sw_params(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_sw_params_t> params,
  ) {
    return _snd_pcm_sw_params(
      pcm,
      params,
    );
  }

  late final _snd_pcm_sw_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_sw_params_t>)>>('snd_pcm_sw_params');
  late final _snd_pcm_sw_params = _snd_pcm_sw_paramsPtr.asFunction<
      int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_sw_params_t>)>();

  int snd_pcm_prepare(
    ffi.Pointer<snd_pcm_t> pcm,
  ) {
    return _snd_pcm_prepare(
      pcm,
    );
  }

  late final _snd_pcm_preparePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_pcm_t>)>>(
          'snd_pcm_prepare');
  late final _snd_pcm_prepare =
      _snd_pcm_preparePtr.asFunction<int Function(ffi.Pointer<snd_pcm_t>)>();

  int snd_pcm_reset(
    ffi.Pointer<snd_pcm_t> pcm,
  ) {
    return _snd_pcm_reset(
      pcm,
    );
  }

  late final _snd_pcm_resetPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_pcm_t>)>>(
          'snd_pcm_reset');
  late final _snd_pcm_reset =
      _snd_pcm_resetPtr.asFunction<int Function(ffi.Pointer<snd_pcm_t>)>();

  int snd_pcm_status(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_status_t> status,
  ) {
    return _snd_pcm_status(
      pcm,
      status,
    );
  }

  late final _snd_pcm_statusPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_status_t>)>>('snd_pcm_status');
  late final _snd_pcm_status = _snd_pcm_statusPtr.asFunction<
      int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_status_t>)>();

  int snd_pcm_start(
    ffi.Pointer<snd_pcm_t> pcm,
  ) {
    return _snd_pcm_start(
      pcm,
    );
  }

  late final _snd_pcm_startPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_pcm_t>)>>(
          'snd_pcm_start');
  late final _snd_pcm_start =
      _snd_pcm_startPtr.asFunction<int Function(ffi.Pointer<snd_pcm_t>)>();

  int snd_pcm_drop(
    ffi.Pointer<snd_pcm_t> pcm,
  ) {
    return _snd_pcm_drop(
      pcm,
    );
  }

  late final _snd_pcm_dropPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_pcm_t>)>>(
          'snd_pcm_drop');
  late final _snd_pcm_drop =
      _snd_pcm_dropPtr.asFunction<int Function(ffi.Pointer<snd_pcm_t>)>();

  int snd_pcm_drain(
    ffi.Pointer<snd_pcm_t> pcm,
  ) {
    return _snd_pcm_drain(
      pcm,
    );
  }

  late final _snd_pcm_drainPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_pcm_t>)>>(
          'snd_pcm_drain');
  late final _snd_pcm_drain =
      _snd_pcm_drainPtr.asFunction<int Function(ffi.Pointer<snd_pcm_t>)>();

  int snd_pcm_pause(
    ffi.Pointer<snd_pcm_t> pcm,
    int enable,
  ) {
    return _snd_pcm_pause(
      pcm,
      enable,
    );
  }

  late final _snd_pcm_pausePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_pcm_t>, ffi.Int)>>('snd_pcm_pause');
  late final _snd_pcm_pause =
      _snd_pcm_pausePtr.asFunction<int Function(ffi.Pointer<snd_pcm_t>, int)>();

  int snd_pcm_state(
    ffi.Pointer<snd_pcm_t> pcm,
  ) {
    return _snd_pcm_state(
      pcm,
    );
  }

  late final _snd_pcm_statePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<snd_pcm_t>)>>(
          'snd_pcm_state');
  late final _snd_pcm_state =
      _snd_pcm_statePtr.asFunction<int Function(ffi.Pointer<snd_pcm_t>)>();

  int snd_pcm_hwsync(
    ffi.Pointer<snd_pcm_t> pcm,
  ) {
    return _snd_pcm_hwsync(
      pcm,
    );
  }

  late final _snd_pcm_hwsyncPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_pcm_t>)>>(
          'snd_pcm_hwsync');
  late final _snd_pcm_hwsync =
      _snd_pcm_hwsyncPtr.asFunction<int Function(ffi.Pointer<snd_pcm_t>)>();

  int snd_pcm_delay(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_sframes_t> delayp,
  ) {
    return _snd_pcm_delay(
      pcm,
      delayp,
    );
  }

  late final _snd_pcm_delayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_sframes_t>)>>('snd_pcm_delay');
  late final _snd_pcm_delay = _snd_pcm_delayPtr.asFunction<
      int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_sframes_t>)>();

  int snd_pcm_resume(
    ffi.Pointer<snd_pcm_t> pcm,
  ) {
    return _snd_pcm_resume(
      pcm,
    );
  }

  late final _snd_pcm_resumePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_pcm_t>)>>(
          'snd_pcm_resume');
  late final _snd_pcm_resume =
      _snd_pcm_resumePtr.asFunction<int Function(ffi.Pointer<snd_pcm_t>)>();

  int snd_pcm_htimestamp(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_uframes_t> avail,
    ffi.Pointer<snd_htimestamp_t> tstamp,
  ) {
    return _snd_pcm_htimestamp(
      pcm,
      avail,
      tstamp,
    );
  }

  late final _snd_pcm_htimestampPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_uframes_t>,
              ffi.Pointer<snd_htimestamp_t>)>>('snd_pcm_htimestamp');
  late final _snd_pcm_htimestamp = _snd_pcm_htimestampPtr.asFunction<
      int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_uframes_t>,
          ffi.Pointer<snd_htimestamp_t>)>();

  int snd_pcm_avail(
    ffi.Pointer<snd_pcm_t> pcm,
  ) {
    return _snd_pcm_avail(
      pcm,
    );
  }

  late final _snd_pcm_availPtr = _lookup<
      ffi.NativeFunction<
          snd_pcm_sframes_t Function(ffi.Pointer<snd_pcm_t>)>>('snd_pcm_avail');
  late final _snd_pcm_avail =
      _snd_pcm_availPtr.asFunction<int Function(ffi.Pointer<snd_pcm_t>)>();

  int snd_pcm_avail_update(
    ffi.Pointer<snd_pcm_t> pcm,
  ) {
    return _snd_pcm_avail_update(
      pcm,
    );
  }

  late final _snd_pcm_avail_updatePtr = _lookup<
      ffi.NativeFunction<
          snd_pcm_sframes_t Function(
              ffi.Pointer<snd_pcm_t>)>>('snd_pcm_avail_update');
  late final _snd_pcm_avail_update = _snd_pcm_avail_updatePtr
      .asFunction<int Function(ffi.Pointer<snd_pcm_t>)>();

  int snd_pcm_avail_delay(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_sframes_t> availp,
    ffi.Pointer<snd_pcm_sframes_t> delayp,
  ) {
    return _snd_pcm_avail_delay(
      pcm,
      availp,
      delayp,
    );
  }

  late final _snd_pcm_avail_delayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_sframes_t>,
              ffi.Pointer<snd_pcm_sframes_t>)>>('snd_pcm_avail_delay');
  late final _snd_pcm_avail_delay = _snd_pcm_avail_delayPtr.asFunction<
      int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_sframes_t>,
          ffi.Pointer<snd_pcm_sframes_t>)>();

  int snd_pcm_rewindable(
    ffi.Pointer<snd_pcm_t> pcm,
  ) {
    return _snd_pcm_rewindable(
      pcm,
    );
  }

  late final _snd_pcm_rewindablePtr = _lookup<
      ffi.NativeFunction<
          snd_pcm_sframes_t Function(
              ffi.Pointer<snd_pcm_t>)>>('snd_pcm_rewindable');
  late final _snd_pcm_rewindable =
      _snd_pcm_rewindablePtr.asFunction<int Function(ffi.Pointer<snd_pcm_t>)>();

  int snd_pcm_rewind(
    ffi.Pointer<snd_pcm_t> pcm,
    int frames,
  ) {
    return _snd_pcm_rewind(
      pcm,
      frames,
    );
  }

  late final _snd_pcm_rewindPtr = _lookup<
      ffi.NativeFunction<
          snd_pcm_sframes_t Function(
              ffi.Pointer<snd_pcm_t>, snd_pcm_uframes_t)>>('snd_pcm_rewind');
  late final _snd_pcm_rewind = _snd_pcm_rewindPtr
      .asFunction<int Function(ffi.Pointer<snd_pcm_t>, int)>();

  int snd_pcm_forwardable(
    ffi.Pointer<snd_pcm_t> pcm,
  ) {
    return _snd_pcm_forwardable(
      pcm,
    );
  }

  late final _snd_pcm_forwardablePtr = _lookup<
      ffi.NativeFunction<
          snd_pcm_sframes_t Function(
              ffi.Pointer<snd_pcm_t>)>>('snd_pcm_forwardable');
  late final _snd_pcm_forwardable = _snd_pcm_forwardablePtr
      .asFunction<int Function(ffi.Pointer<snd_pcm_t>)>();

  int snd_pcm_forward(
    ffi.Pointer<snd_pcm_t> pcm,
    int frames,
  ) {
    return _snd_pcm_forward(
      pcm,
      frames,
    );
  }

  late final _snd_pcm_forwardPtr = _lookup<
      ffi.NativeFunction<
          snd_pcm_sframes_t Function(
              ffi.Pointer<snd_pcm_t>, snd_pcm_uframes_t)>>('snd_pcm_forward');
  late final _snd_pcm_forward = _snd_pcm_forwardPtr
      .asFunction<int Function(ffi.Pointer<snd_pcm_t>, int)>();

  int snd_pcm_writei(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<ffi.Void> buffer,
    int size,
  ) {
    return _snd_pcm_writei(
      pcm,
      buffer,
      size,
    );
  }

  late final _snd_pcm_writeiPtr = _lookup<
      ffi.NativeFunction<
          snd_pcm_sframes_t Function(ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<ffi.Void>, snd_pcm_uframes_t)>>('snd_pcm_writei');
  late final _snd_pcm_writei = _snd_pcm_writeiPtr.asFunction<
      int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<ffi.Void>, int)>();

  int snd_pcm_readi(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<ffi.Void> buffer,
    int size,
  ) {
    return _snd_pcm_readi(
      pcm,
      buffer,
      size,
    );
  }

  late final _snd_pcm_readiPtr = _lookup<
      ffi.NativeFunction<
          snd_pcm_sframes_t Function(ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<ffi.Void>, snd_pcm_uframes_t)>>('snd_pcm_readi');
  late final _snd_pcm_readi = _snd_pcm_readiPtr.asFunction<
      int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<ffi.Void>, int)>();

  int snd_pcm_writen(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<ffi.Pointer<ffi.Void>> bufs,
    int size,
  ) {
    return _snd_pcm_writen(
      pcm,
      bufs,
      size,
    );
  }

  late final _snd_pcm_writenPtr = _lookup<
      ffi.NativeFunction<
          snd_pcm_sframes_t Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              snd_pcm_uframes_t)>>('snd_pcm_writen');
  late final _snd_pcm_writen = _snd_pcm_writenPtr.asFunction<
      int Function(
          ffi.Pointer<snd_pcm_t>, ffi.Pointer<ffi.Pointer<ffi.Void>>, int)>();

  int snd_pcm_readn(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<ffi.Pointer<ffi.Void>> bufs,
    int size,
  ) {
    return _snd_pcm_readn(
      pcm,
      bufs,
      size,
    );
  }

  late final _snd_pcm_readnPtr = _lookup<
      ffi.NativeFunction<
          snd_pcm_sframes_t Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              snd_pcm_uframes_t)>>('snd_pcm_readn');
  late final _snd_pcm_readn = _snd_pcm_readnPtr.asFunction<
      int Function(
          ffi.Pointer<snd_pcm_t>, ffi.Pointer<ffi.Pointer<ffi.Void>>, int)>();

  int snd_pcm_wait(
    ffi.Pointer<snd_pcm_t> pcm,
    int timeout,
  ) {
    return _snd_pcm_wait(
      pcm,
      timeout,
    );
  }

  late final _snd_pcm_waitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_pcm_t>, ffi.Int)>>('snd_pcm_wait');
  late final _snd_pcm_wait =
      _snd_pcm_waitPtr.asFunction<int Function(ffi.Pointer<snd_pcm_t>, int)>();

  int snd_pcm_link(
    ffi.Pointer<snd_pcm_t> pcm1,
    ffi.Pointer<snd_pcm_t> pcm2,
  ) {
    return _snd_pcm_link(
      pcm1,
      pcm2,
    );
  }

  late final _snd_pcm_linkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_t>)>>('snd_pcm_link');
  late final _snd_pcm_link = _snd_pcm_linkPtr.asFunction<
      int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_t>)>();

  int snd_pcm_unlink(
    ffi.Pointer<snd_pcm_t> pcm,
  ) {
    return _snd_pcm_unlink(
      pcm,
    );
  }

  late final _snd_pcm_unlinkPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_pcm_t>)>>(
          'snd_pcm_unlink');
  late final _snd_pcm_unlink =
      _snd_pcm_unlinkPtr.asFunction<int Function(ffi.Pointer<snd_pcm_t>)>();

  ffi.Pointer<ffi.Pointer<snd_pcm_chmap_query_t>> snd_pcm_query_chmaps(
    ffi.Pointer<snd_pcm_t> pcm,
  ) {
    return _snd_pcm_query_chmaps(
      pcm,
    );
  }

  late final _snd_pcm_query_chmapsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<snd_pcm_chmap_query_t>> Function(
              ffi.Pointer<snd_pcm_t>)>>('snd_pcm_query_chmaps');
  late final _snd_pcm_query_chmaps = _snd_pcm_query_chmapsPtr.asFunction<
      ffi.Pointer<ffi.Pointer<snd_pcm_chmap_query_t>> Function(
          ffi.Pointer<snd_pcm_t>)>();

  ffi.Pointer<ffi.Pointer<snd_pcm_chmap_query_t>> snd_pcm_query_chmaps_from_hw(
    int card,
    int dev,
    int subdev,
    int stream,
  ) {
    return _snd_pcm_query_chmaps_from_hw(
      card,
      dev,
      subdev,
      stream,
    );
  }

  late final _snd_pcm_query_chmaps_from_hwPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<snd_pcm_chmap_query_t>> Function(ffi.Int,
              ffi.Int, ffi.Int, ffi.Int32)>>('snd_pcm_query_chmaps_from_hw');
  late final _snd_pcm_query_chmaps_from_hw =
      _snd_pcm_query_chmaps_from_hwPtr.asFunction<
          ffi.Pointer<ffi.Pointer<snd_pcm_chmap_query_t>> Function(
              int, int, int, int)>();

  void snd_pcm_free_chmaps(
    ffi.Pointer<ffi.Pointer<snd_pcm_chmap_query_t>> maps,
  ) {
    return _snd_pcm_free_chmaps(
      maps,
    );
  }

  late final _snd_pcm_free_chmapsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ffi.Pointer<snd_pcm_chmap_query_t>>)>>(
      'snd_pcm_free_chmaps');
  late final _snd_pcm_free_chmaps = _snd_pcm_free_chmapsPtr.asFunction<
      void Function(ffi.Pointer<ffi.Pointer<snd_pcm_chmap_query_t>>)>();

  ffi.Pointer<snd_pcm_chmap_t> snd_pcm_get_chmap(
    ffi.Pointer<snd_pcm_t> pcm,
  ) {
    return _snd_pcm_get_chmap(
      pcm,
    );
  }

  late final _snd_pcm_get_chmapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<snd_pcm_chmap_t> Function(
              ffi.Pointer<snd_pcm_t>)>>('snd_pcm_get_chmap');
  late final _snd_pcm_get_chmap = _snd_pcm_get_chmapPtr.asFunction<
      ffi.Pointer<snd_pcm_chmap_t> Function(ffi.Pointer<snd_pcm_t>)>();

  int snd_pcm_set_chmap(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_chmap_t> map,
  ) {
    return _snd_pcm_set_chmap(
      pcm,
      map,
    );
  }

  late final _snd_pcm_set_chmapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_chmap_t>)>>('snd_pcm_set_chmap');
  late final _snd_pcm_set_chmap = _snd_pcm_set_chmapPtr.asFunction<
      int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_chmap_t>)>();

  ffi.Pointer<ffi.Char> snd_pcm_chmap_type_name(
    int val,
  ) {
    return _snd_pcm_chmap_type_name(
      val,
    );
  }

  late final _snd_pcm_chmap_type_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'snd_pcm_chmap_type_name');
  late final _snd_pcm_chmap_type_name = _snd_pcm_chmap_type_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> snd_pcm_chmap_name(
    int val,
  ) {
    return _snd_pcm_chmap_name(
      val,
    );
  }

  late final _snd_pcm_chmap_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'snd_pcm_chmap_name');
  late final _snd_pcm_chmap_name =
      _snd_pcm_chmap_namePtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> snd_pcm_chmap_long_name(
    int val,
  ) {
    return _snd_pcm_chmap_long_name(
      val,
    );
  }

  late final _snd_pcm_chmap_long_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'snd_pcm_chmap_long_name');
  late final _snd_pcm_chmap_long_name = _snd_pcm_chmap_long_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int snd_pcm_chmap_print(
    ffi.Pointer<snd_pcm_chmap_t> map,
    int maxlen,
    ffi.Pointer<ffi.Char> buf,
  ) {
    return _snd_pcm_chmap_print(
      map,
      maxlen,
      buf,
    );
  }

  late final _snd_pcm_chmap_printPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_pcm_chmap_t>, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('snd_pcm_chmap_print');
  late final _snd_pcm_chmap_print = _snd_pcm_chmap_printPtr.asFunction<
      int Function(ffi.Pointer<snd_pcm_chmap_t>, int, ffi.Pointer<ffi.Char>)>();

  int snd_pcm_chmap_from_string(
    ffi.Pointer<ffi.Char> str,
  ) {
    return _snd_pcm_chmap_from_string(
      str,
    );
  }

  late final _snd_pcm_chmap_from_stringPtr = _lookup<
          ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<ffi.Char>)>>(
      'snd_pcm_chmap_from_string');
  late final _snd_pcm_chmap_from_string = _snd_pcm_chmap_from_stringPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<snd_pcm_chmap_t> snd_pcm_chmap_parse_string(
    ffi.Pointer<ffi.Char> str,
  ) {
    return _snd_pcm_chmap_parse_string(
      str,
    );
  }

  late final _snd_pcm_chmap_parse_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<snd_pcm_chmap_t> Function(
              ffi.Pointer<ffi.Char>)>>('snd_pcm_chmap_parse_string');
  late final _snd_pcm_chmap_parse_string =
      _snd_pcm_chmap_parse_stringPtr.asFunction<
          ffi.Pointer<snd_pcm_chmap_t> Function(ffi.Pointer<ffi.Char>)>();

  int snd_pcm_recover(
    ffi.Pointer<snd_pcm_t> pcm,
    int err,
    int silent,
  ) {
    return _snd_pcm_recover(
      pcm,
      err,
      silent,
    );
  }

  late final _snd_pcm_recoverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>, ffi.Int, ffi.Int)>>('snd_pcm_recover');
  late final _snd_pcm_recover = _snd_pcm_recoverPtr
      .asFunction<int Function(ffi.Pointer<snd_pcm_t>, int, int)>();

  int snd_pcm_set_params(
    ffi.Pointer<snd_pcm_t> pcm,
    int format,
    int access,
    int channels,
    int rate,
    int soft_resample,
    int latency,
  ) {
    return _snd_pcm_set_params(
      pcm,
      format,
      access,
      channels,
      rate,
      soft_resample,
      latency,
    );
  }

  late final _snd_pcm_set_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Int32,
              ffi.Int32,
              ffi.UnsignedInt,
              ffi.UnsignedInt,
              ffi.Int,
              ffi.UnsignedInt)>>('snd_pcm_set_params');
  late final _snd_pcm_set_params = _snd_pcm_set_paramsPtr.asFunction<
      int Function(ffi.Pointer<snd_pcm_t>, int, int, int, int, int, int)>();

  int snd_pcm_get_params(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_uframes_t> buffer_size,
    ffi.Pointer<snd_pcm_uframes_t> period_size,
  ) {
    return _snd_pcm_get_params(
      pcm,
      buffer_size,
      period_size,
    );
  }

  late final _snd_pcm_get_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_uframes_t>,
              ffi.Pointer<snd_pcm_uframes_t>)>>('snd_pcm_get_params');
  late final _snd_pcm_get_params = _snd_pcm_get_paramsPtr.asFunction<
      int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_uframes_t>,
          ffi.Pointer<snd_pcm_uframes_t>)>();

  int snd_pcm_info_sizeof() {
    return _snd_pcm_info_sizeof();
  }

  late final _snd_pcm_info_sizeofPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('snd_pcm_info_sizeof');
  late final _snd_pcm_info_sizeof =
      _snd_pcm_info_sizeofPtr.asFunction<int Function()>();

  int snd_pcm_info_malloc(
    ffi.Pointer<ffi.Pointer<snd_pcm_info_t>> ptr,
  ) {
    return _snd_pcm_info_malloc(
      ptr,
    );
  }

  late final _snd_pcm_info_mallocPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Pointer<snd_pcm_info_t>>)>>(
      'snd_pcm_info_malloc');
  late final _snd_pcm_info_malloc = _snd_pcm_info_mallocPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<snd_pcm_info_t>>)>();

  void snd_pcm_info_free(
    ffi.Pointer<snd_pcm_info_t> obj,
  ) {
    return _snd_pcm_info_free(
      obj,
    );
  }

  late final _snd_pcm_info_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<snd_pcm_info_t>)>>(
      'snd_pcm_info_free');
  late final _snd_pcm_info_free = _snd_pcm_info_freePtr
      .asFunction<void Function(ffi.Pointer<snd_pcm_info_t>)>();

  void snd_pcm_info_copy(
    ffi.Pointer<snd_pcm_info_t> dst,
    ffi.Pointer<snd_pcm_info_t> src,
  ) {
    return _snd_pcm_info_copy(
      dst,
      src,
    );
  }

  late final _snd_pcm_info_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_pcm_info_t>,
              ffi.Pointer<snd_pcm_info_t>)>>('snd_pcm_info_copy');
  late final _snd_pcm_info_copy = _snd_pcm_info_copyPtr.asFunction<
      void Function(
          ffi.Pointer<snd_pcm_info_t>, ffi.Pointer<snd_pcm_info_t>)>();

  int snd_pcm_info_get_device(
    ffi.Pointer<snd_pcm_info_t> obj,
  ) {
    return _snd_pcm_info_get_device(
      obj,
    );
  }

  late final _snd_pcm_info_get_devicePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<snd_pcm_info_t>)>>('snd_pcm_info_get_device');
  late final _snd_pcm_info_get_device = _snd_pcm_info_get_devicePtr
      .asFunction<int Function(ffi.Pointer<snd_pcm_info_t>)>();

  int snd_pcm_info_get_subdevice(
    ffi.Pointer<snd_pcm_info_t> obj,
  ) {
    return _snd_pcm_info_get_subdevice(
      obj,
    );
  }

  late final _snd_pcm_info_get_subdevicePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<snd_pcm_info_t>)>>('snd_pcm_info_get_subdevice');
  late final _snd_pcm_info_get_subdevice = _snd_pcm_info_get_subdevicePtr
      .asFunction<int Function(ffi.Pointer<snd_pcm_info_t>)>();

  int snd_pcm_info_get_stream(
    ffi.Pointer<snd_pcm_info_t> obj,
  ) {
    return _snd_pcm_info_get_stream(
      obj,
    );
  }

  late final _snd_pcm_info_get_streamPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<snd_pcm_info_t>)>>(
      'snd_pcm_info_get_stream');
  late final _snd_pcm_info_get_stream = _snd_pcm_info_get_streamPtr
      .asFunction<int Function(ffi.Pointer<snd_pcm_info_t>)>();

  int snd_pcm_info_get_card(
    ffi.Pointer<snd_pcm_info_t> obj,
  ) {
    return _snd_pcm_info_get_card(
      obj,
    );
  }

  late final _snd_pcm_info_get_cardPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_pcm_info_t>)>>(
      'snd_pcm_info_get_card');
  late final _snd_pcm_info_get_card = _snd_pcm_info_get_cardPtr
      .asFunction<int Function(ffi.Pointer<snd_pcm_info_t>)>();

  ffi.Pointer<ffi.Char> snd_pcm_info_get_id(
    ffi.Pointer<snd_pcm_info_t> obj,
  ) {
    return _snd_pcm_info_get_id(
      obj,
    );
  }

  late final _snd_pcm_info_get_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<snd_pcm_info_t>)>>('snd_pcm_info_get_id');
  late final _snd_pcm_info_get_id = _snd_pcm_info_get_idPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<snd_pcm_info_t>)>();

  ffi.Pointer<ffi.Char> snd_pcm_info_get_name(
    ffi.Pointer<snd_pcm_info_t> obj,
  ) {
    return _snd_pcm_info_get_name(
      obj,
    );
  }

  late final _snd_pcm_info_get_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<snd_pcm_info_t>)>>('snd_pcm_info_get_name');
  late final _snd_pcm_info_get_name = _snd_pcm_info_get_namePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<snd_pcm_info_t>)>();

  ffi.Pointer<ffi.Char> snd_pcm_info_get_subdevice_name(
    ffi.Pointer<snd_pcm_info_t> obj,
  ) {
    return _snd_pcm_info_get_subdevice_name(
      obj,
    );
  }

  late final _snd_pcm_info_get_subdevice_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<snd_pcm_info_t>)>>('snd_pcm_info_get_subdevice_name');
  late final _snd_pcm_info_get_subdevice_name =
      _snd_pcm_info_get_subdevice_namePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<snd_pcm_info_t>)>();

  int snd_pcm_info_get_class(
    ffi.Pointer<snd_pcm_info_t> obj,
  ) {
    return _snd_pcm_info_get_class(
      obj,
    );
  }

  late final _snd_pcm_info_get_classPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<snd_pcm_info_t>)>>(
      'snd_pcm_info_get_class');
  late final _snd_pcm_info_get_class = _snd_pcm_info_get_classPtr
      .asFunction<int Function(ffi.Pointer<snd_pcm_info_t>)>();

  int snd_pcm_info_get_subclass(
    ffi.Pointer<snd_pcm_info_t> obj,
  ) {
    return _snd_pcm_info_get_subclass(
      obj,
    );
  }

  late final _snd_pcm_info_get_subclassPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<snd_pcm_info_t>)>>(
      'snd_pcm_info_get_subclass');
  late final _snd_pcm_info_get_subclass = _snd_pcm_info_get_subclassPtr
      .asFunction<int Function(ffi.Pointer<snd_pcm_info_t>)>();

  int snd_pcm_info_get_subdevices_count(
    ffi.Pointer<snd_pcm_info_t> obj,
  ) {
    return _snd_pcm_info_get_subdevices_count(
      obj,
    );
  }

  late final _snd_pcm_info_get_subdevices_countPtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<snd_pcm_info_t>)>>(
      'snd_pcm_info_get_subdevices_count');
  late final _snd_pcm_info_get_subdevices_count =
      _snd_pcm_info_get_subdevices_countPtr
          .asFunction<int Function(ffi.Pointer<snd_pcm_info_t>)>();

  int snd_pcm_info_get_subdevices_avail(
    ffi.Pointer<snd_pcm_info_t> obj,
  ) {
    return _snd_pcm_info_get_subdevices_avail(
      obj,
    );
  }

  late final _snd_pcm_info_get_subdevices_availPtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<snd_pcm_info_t>)>>(
      'snd_pcm_info_get_subdevices_avail');
  late final _snd_pcm_info_get_subdevices_avail =
      _snd_pcm_info_get_subdevices_availPtr
          .asFunction<int Function(ffi.Pointer<snd_pcm_info_t>)>();

  snd_pcm_sync_id_t snd_pcm_info_get_sync(
    ffi.Pointer<snd_pcm_info_t> obj,
  ) {
    return _snd_pcm_info_get_sync(
      obj,
    );
  }

  late final _snd_pcm_info_get_syncPtr = _lookup<
      ffi.NativeFunction<
          snd_pcm_sync_id_t Function(
              ffi.Pointer<snd_pcm_info_t>)>>('snd_pcm_info_get_sync');
  late final _snd_pcm_info_get_sync = _snd_pcm_info_get_syncPtr
      .asFunction<snd_pcm_sync_id_t Function(ffi.Pointer<snd_pcm_info_t>)>();

  void snd_pcm_info_set_device(
    ffi.Pointer<snd_pcm_info_t> obj,
    int val,
  ) {
    return _snd_pcm_info_set_device(
      obj,
      val,
    );
  }

  late final _snd_pcm_info_set_devicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_pcm_info_t>,
              ffi.UnsignedInt)>>('snd_pcm_info_set_device');
  late final _snd_pcm_info_set_device = _snd_pcm_info_set_devicePtr
      .asFunction<void Function(ffi.Pointer<snd_pcm_info_t>, int)>();

  void snd_pcm_info_set_subdevice(
    ffi.Pointer<snd_pcm_info_t> obj,
    int val,
  ) {
    return _snd_pcm_info_set_subdevice(
      obj,
      val,
    );
  }

  late final _snd_pcm_info_set_subdevicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_pcm_info_t>,
              ffi.UnsignedInt)>>('snd_pcm_info_set_subdevice');
  late final _snd_pcm_info_set_subdevice = _snd_pcm_info_set_subdevicePtr
      .asFunction<void Function(ffi.Pointer<snd_pcm_info_t>, int)>();

  void snd_pcm_info_set_stream(
    ffi.Pointer<snd_pcm_info_t> obj,
    int val,
  ) {
    return _snd_pcm_info_set_stream(
      obj,
      val,
    );
  }

  late final _snd_pcm_info_set_streamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_pcm_info_t>,
              ffi.Int32)>>('snd_pcm_info_set_stream');
  late final _snd_pcm_info_set_stream = _snd_pcm_info_set_streamPtr
      .asFunction<void Function(ffi.Pointer<snd_pcm_info_t>, int)>();

  int snd_pcm_hw_params_any(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
  ) {
    return _snd_pcm_hw_params_any(
      pcm,
      params,
    );
  }

  late final _snd_pcm_hw_params_anyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_hw_params_t>)>>('snd_pcm_hw_params_any');
  late final _snd_pcm_hw_params_any = _snd_pcm_hw_params_anyPtr.asFunction<
      int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>)>();

  int snd_pcm_hw_params_can_mmap_sample_resolution(
    ffi.Pointer<snd_pcm_hw_params_t> params,
  ) {
    return _snd_pcm_hw_params_can_mmap_sample_resolution(
      params,
    );
  }

  late final _snd_pcm_hw_params_can_mmap_sample_resolutionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_pcm_hw_params_t>)>>(
      'snd_pcm_hw_params_can_mmap_sample_resolution');
  late final _snd_pcm_hw_params_can_mmap_sample_resolution =
      _snd_pcm_hw_params_can_mmap_sample_resolutionPtr
          .asFunction<int Function(ffi.Pointer<snd_pcm_hw_params_t>)>();

  int snd_pcm_hw_params_is_double(
    ffi.Pointer<snd_pcm_hw_params_t> params,
  ) {
    return _snd_pcm_hw_params_is_double(
      params,
    );
  }

  late final _snd_pcm_hw_params_is_doublePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_pcm_hw_params_t>)>>(
      'snd_pcm_hw_params_is_double');
  late final _snd_pcm_hw_params_is_double = _snd_pcm_hw_params_is_doublePtr
      .asFunction<int Function(ffi.Pointer<snd_pcm_hw_params_t>)>();

  int snd_pcm_hw_params_is_batch(
    ffi.Pointer<snd_pcm_hw_params_t> params,
  ) {
    return _snd_pcm_hw_params_is_batch(
      params,
    );
  }

  late final _snd_pcm_hw_params_is_batchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_hw_params_t>)>>('snd_pcm_hw_params_is_batch');
  late final _snd_pcm_hw_params_is_batch = _snd_pcm_hw_params_is_batchPtr
      .asFunction<int Function(ffi.Pointer<snd_pcm_hw_params_t>)>();

  int snd_pcm_hw_params_is_block_transfer(
    ffi.Pointer<snd_pcm_hw_params_t> params,
  ) {
    return _snd_pcm_hw_params_is_block_transfer(
      params,
    );
  }

  late final _snd_pcm_hw_params_is_block_transferPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_pcm_hw_params_t>)>>(
      'snd_pcm_hw_params_is_block_transfer');
  late final _snd_pcm_hw_params_is_block_transfer =
      _snd_pcm_hw_params_is_block_transferPtr
          .asFunction<int Function(ffi.Pointer<snd_pcm_hw_params_t>)>();

  int snd_pcm_hw_params_is_monotonic(
    ffi.Pointer<snd_pcm_hw_params_t> params,
  ) {
    return _snd_pcm_hw_params_is_monotonic(
      params,
    );
  }

  late final _snd_pcm_hw_params_is_monotonicPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_pcm_hw_params_t>)>>(
      'snd_pcm_hw_params_is_monotonic');
  late final _snd_pcm_hw_params_is_monotonic =
      _snd_pcm_hw_params_is_monotonicPtr
          .asFunction<int Function(ffi.Pointer<snd_pcm_hw_params_t>)>();

  int snd_pcm_hw_params_can_overrange(
    ffi.Pointer<snd_pcm_hw_params_t> params,
  ) {
    return _snd_pcm_hw_params_can_overrange(
      params,
    );
  }

  late final _snd_pcm_hw_params_can_overrangePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_pcm_hw_params_t>)>>(
      'snd_pcm_hw_params_can_overrange');
  late final _snd_pcm_hw_params_can_overrange =
      _snd_pcm_hw_params_can_overrangePtr
          .asFunction<int Function(ffi.Pointer<snd_pcm_hw_params_t>)>();

  int snd_pcm_hw_params_can_pause(
    ffi.Pointer<snd_pcm_hw_params_t> params,
  ) {
    return _snd_pcm_hw_params_can_pause(
      params,
    );
  }

  late final _snd_pcm_hw_params_can_pausePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_pcm_hw_params_t>)>>(
      'snd_pcm_hw_params_can_pause');
  late final _snd_pcm_hw_params_can_pause = _snd_pcm_hw_params_can_pausePtr
      .asFunction<int Function(ffi.Pointer<snd_pcm_hw_params_t>)>();

  int snd_pcm_hw_params_can_resume(
    ffi.Pointer<snd_pcm_hw_params_t> params,
  ) {
    return _snd_pcm_hw_params_can_resume(
      params,
    );
  }

  late final _snd_pcm_hw_params_can_resumePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_pcm_hw_params_t>)>>(
      'snd_pcm_hw_params_can_resume');
  late final _snd_pcm_hw_params_can_resume = _snd_pcm_hw_params_can_resumePtr
      .asFunction<int Function(ffi.Pointer<snd_pcm_hw_params_t>)>();

  int snd_pcm_hw_params_is_half_duplex(
    ffi.Pointer<snd_pcm_hw_params_t> params,
  ) {
    return _snd_pcm_hw_params_is_half_duplex(
      params,
    );
  }

  late final _snd_pcm_hw_params_is_half_duplexPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_pcm_hw_params_t>)>>(
      'snd_pcm_hw_params_is_half_duplex');
  late final _snd_pcm_hw_params_is_half_duplex =
      _snd_pcm_hw_params_is_half_duplexPtr
          .asFunction<int Function(ffi.Pointer<snd_pcm_hw_params_t>)>();

  int snd_pcm_hw_params_is_joint_duplex(
    ffi.Pointer<snd_pcm_hw_params_t> params,
  ) {
    return _snd_pcm_hw_params_is_joint_duplex(
      params,
    );
  }

  late final _snd_pcm_hw_params_is_joint_duplexPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_pcm_hw_params_t>)>>(
      'snd_pcm_hw_params_is_joint_duplex');
  late final _snd_pcm_hw_params_is_joint_duplex =
      _snd_pcm_hw_params_is_joint_duplexPtr
          .asFunction<int Function(ffi.Pointer<snd_pcm_hw_params_t>)>();

  int snd_pcm_hw_params_can_sync_start(
    ffi.Pointer<snd_pcm_hw_params_t> params,
  ) {
    return _snd_pcm_hw_params_can_sync_start(
      params,
    );
  }

  late final _snd_pcm_hw_params_can_sync_startPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_pcm_hw_params_t>)>>(
      'snd_pcm_hw_params_can_sync_start');
  late final _snd_pcm_hw_params_can_sync_start =
      _snd_pcm_hw_params_can_sync_startPtr
          .asFunction<int Function(ffi.Pointer<snd_pcm_hw_params_t>)>();

  int snd_pcm_hw_params_can_disable_period_wakeup(
    ffi.Pointer<snd_pcm_hw_params_t> params,
  ) {
    return _snd_pcm_hw_params_can_disable_period_wakeup(
      params,
    );
  }

  late final _snd_pcm_hw_params_can_disable_period_wakeupPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_pcm_hw_params_t>)>>(
      'snd_pcm_hw_params_can_disable_period_wakeup');
  late final _snd_pcm_hw_params_can_disable_period_wakeup =
      _snd_pcm_hw_params_can_disable_period_wakeupPtr
          .asFunction<int Function(ffi.Pointer<snd_pcm_hw_params_t>)>();

  int snd_pcm_hw_params_supports_audio_wallclock_ts(
    ffi.Pointer<snd_pcm_hw_params_t> params,
  ) {
    return _snd_pcm_hw_params_supports_audio_wallclock_ts(
      params,
    );
  }

  late final _snd_pcm_hw_params_supports_audio_wallclock_tsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_pcm_hw_params_t>)>>(
      'snd_pcm_hw_params_supports_audio_wallclock_ts');
  late final _snd_pcm_hw_params_supports_audio_wallclock_ts =
      _snd_pcm_hw_params_supports_audio_wallclock_tsPtr
          .asFunction<int Function(ffi.Pointer<snd_pcm_hw_params_t>)>();

  int snd_pcm_hw_params_supports_audio_ts_type(
    ffi.Pointer<snd_pcm_hw_params_t> params,
    int type,
  ) {
    return _snd_pcm_hw_params_supports_audio_ts_type(
      params,
      type,
    );
  }

  late final _snd_pcm_hw_params_supports_audio_ts_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Int)>>('snd_pcm_hw_params_supports_audio_ts_type');
  late final _snd_pcm_hw_params_supports_audio_ts_type =
      _snd_pcm_hw_params_supports_audio_ts_typePtr
          .asFunction<int Function(ffi.Pointer<snd_pcm_hw_params_t>, int)>();

  int snd_pcm_hw_params_get_rate_numden(
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<ffi.UnsignedInt> rate_num,
    ffi.Pointer<ffi.UnsignedInt> rate_den,
  ) {
    return _snd_pcm_hw_params_get_rate_numden(
      params,
      rate_num,
      rate_den,
    );
  }

  late final _snd_pcm_hw_params_get_rate_numdenPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_pcm_hw_params_t>,
                  ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>>(
      'snd_pcm_hw_params_get_rate_numden');
  late final _snd_pcm_hw_params_get_rate_numden =
      _snd_pcm_hw_params_get_rate_numdenPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  int snd_pcm_hw_params_get_sbits(
    ffi.Pointer<snd_pcm_hw_params_t> params,
  ) {
    return _snd_pcm_hw_params_get_sbits(
      params,
    );
  }

  late final _snd_pcm_hw_params_get_sbitsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_pcm_hw_params_t>)>>(
      'snd_pcm_hw_params_get_sbits');
  late final _snd_pcm_hw_params_get_sbits = _snd_pcm_hw_params_get_sbitsPtr
      .asFunction<int Function(ffi.Pointer<snd_pcm_hw_params_t>)>();

  int snd_pcm_hw_params_get_fifo_size(
    ffi.Pointer<snd_pcm_hw_params_t> params,
  ) {
    return _snd_pcm_hw_params_get_fifo_size(
      params,
    );
  }

  late final _snd_pcm_hw_params_get_fifo_sizePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_pcm_hw_params_t>)>>(
      'snd_pcm_hw_params_get_fifo_size');
  late final _snd_pcm_hw_params_get_fifo_size =
      _snd_pcm_hw_params_get_fifo_sizePtr
          .asFunction<int Function(ffi.Pointer<snd_pcm_hw_params_t>)>();

  int snd_pcm_hw_params_sizeof() {
    return _snd_pcm_hw_params_sizeof();
  }

  late final _snd_pcm_hw_params_sizeofPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>(
          'snd_pcm_hw_params_sizeof');
  late final _snd_pcm_hw_params_sizeof =
      _snd_pcm_hw_params_sizeofPtr.asFunction<int Function()>();

  int snd_pcm_hw_params_malloc(
    ffi.Pointer<ffi.Pointer<snd_pcm_hw_params_t>> ptr,
  ) {
    return _snd_pcm_hw_params_malloc(
      ptr,
    );
  }

  late final _snd_pcm_hw_params_mallocPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Pointer<snd_pcm_hw_params_t>>)>>(
      'snd_pcm_hw_params_malloc');
  late final _snd_pcm_hw_params_malloc =
      _snd_pcm_hw_params_mallocPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<snd_pcm_hw_params_t>>)>();

  void snd_pcm_hw_params_free(
    ffi.Pointer<snd_pcm_hw_params_t> obj,
  ) {
    return _snd_pcm_hw_params_free(
      obj,
    );
  }

  late final _snd_pcm_hw_params_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<snd_pcm_hw_params_t>)>>('snd_pcm_hw_params_free');
  late final _snd_pcm_hw_params_free = _snd_pcm_hw_params_freePtr
      .asFunction<void Function(ffi.Pointer<snd_pcm_hw_params_t>)>();

  void snd_pcm_hw_params_copy(
    ffi.Pointer<snd_pcm_hw_params_t> dst,
    ffi.Pointer<snd_pcm_hw_params_t> src,
  ) {
    return _snd_pcm_hw_params_copy(
      dst,
      src,
    );
  }

  late final _snd_pcm_hw_params_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<snd_pcm_hw_params_t>)>>('snd_pcm_hw_params_copy');
  late final _snd_pcm_hw_params_copy = _snd_pcm_hw_params_copyPtr.asFunction<
      void Function(ffi.Pointer<snd_pcm_hw_params_t>,
          ffi.Pointer<snd_pcm_hw_params_t>)>();

  int snd_pcm_hw_params_get_access(
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<ffi.Int32> _access,
  ) {
    return _snd_pcm_hw_params_get_access(
      params,
      _access,
    );
  }

  late final _snd_pcm_hw_params_get_accessPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.Int32>)>>('snd_pcm_hw_params_get_access');
  late final _snd_pcm_hw_params_get_access =
      _snd_pcm_hw_params_get_accessPtr.asFunction<
          int Function(
              ffi.Pointer<snd_pcm_hw_params_t>, ffi.Pointer<ffi.Int32>)>();

  int snd_pcm_hw_params_test_access(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    int _access,
  ) {
    return _snd_pcm_hw_params_test_access(
      pcm,
      params,
      _access,
    );
  }

  late final _snd_pcm_hw_params_test_accessPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Int32)>>('snd_pcm_hw_params_test_access');
  late final _snd_pcm_hw_params_test_access =
      _snd_pcm_hw_params_test_accessPtr.asFunction<
          int Function(
              ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>, int)>();

  int snd_pcm_hw_params_set_access(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    int _access,
  ) {
    return _snd_pcm_hw_params_set_access(
      pcm,
      params,
      _access,
    );
  }

  late final _snd_pcm_hw_params_set_accessPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Int32)>>('snd_pcm_hw_params_set_access');
  late final _snd_pcm_hw_params_set_access =
      _snd_pcm_hw_params_set_accessPtr.asFunction<
          int Function(
              ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>, int)>();

  int snd_pcm_hw_params_set_access_first(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<ffi.Int32> _access,
  ) {
    return _snd_pcm_hw_params_set_access_first(
      pcm,
      params,
      _access,
    );
  }

  late final _snd_pcm_hw_params_set_access_firstPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.Int32>)>>('snd_pcm_hw_params_set_access_first');
  late final _snd_pcm_hw_params_set_access_first =
      _snd_pcm_hw_params_set_access_firstPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.Int32>)>();

  int snd_pcm_hw_params_set_access_last(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<ffi.Int32> _access,
  ) {
    return _snd_pcm_hw_params_set_access_last(
      pcm,
      params,
      _access,
    );
  }

  late final _snd_pcm_hw_params_set_access_lastPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.Int32>)>>('snd_pcm_hw_params_set_access_last');
  late final _snd_pcm_hw_params_set_access_last =
      _snd_pcm_hw_params_set_access_lastPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.Int32>)>();

  int snd_pcm_hw_params_set_access_mask(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<snd_pcm_access_mask_t> mask,
  ) {
    return _snd_pcm_hw_params_set_access_mask(
      pcm,
      params,
      mask,
    );
  }

  late final _snd_pcm_hw_params_set_access_maskPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<snd_pcm_t>,
                  ffi.Pointer<snd_pcm_hw_params_t>,
                  ffi.Pointer<snd_pcm_access_mask_t>)>>(
      'snd_pcm_hw_params_set_access_mask');
  late final _snd_pcm_hw_params_set_access_mask =
      _snd_pcm_hw_params_set_access_maskPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<snd_pcm_access_mask_t>)>();

  int snd_pcm_hw_params_get_access_mask(
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<snd_pcm_access_mask_t> mask,
  ) {
    return _snd_pcm_hw_params_get_access_mask(
      params,
      mask,
    );
  }

  late final _snd_pcm_hw_params_get_access_maskPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_pcm_hw_params_t>,
                  ffi.Pointer<snd_pcm_access_mask_t>)>>(
      'snd_pcm_hw_params_get_access_mask');
  late final _snd_pcm_hw_params_get_access_mask =
      _snd_pcm_hw_params_get_access_maskPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<snd_pcm_access_mask_t>)>();

  int snd_pcm_hw_params_get_format(
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<ffi.Int32> val,
  ) {
    return _snd_pcm_hw_params_get_format(
      params,
      val,
    );
  }

  late final _snd_pcm_hw_params_get_formatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.Int32>)>>('snd_pcm_hw_params_get_format');
  late final _snd_pcm_hw_params_get_format =
      _snd_pcm_hw_params_get_formatPtr.asFunction<
          int Function(
              ffi.Pointer<snd_pcm_hw_params_t>, ffi.Pointer<ffi.Int32>)>();

  int snd_pcm_hw_params_test_format(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    int val,
  ) {
    return _snd_pcm_hw_params_test_format(
      pcm,
      params,
      val,
    );
  }

  late final _snd_pcm_hw_params_test_formatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Int32)>>('snd_pcm_hw_params_test_format');
  late final _snd_pcm_hw_params_test_format =
      _snd_pcm_hw_params_test_formatPtr.asFunction<
          int Function(
              ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>, int)>();

  int snd_pcm_hw_params_set_format(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    int val,
  ) {
    return _snd_pcm_hw_params_set_format(
      pcm,
      params,
      val,
    );
  }

  late final _snd_pcm_hw_params_set_formatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Int32)>>('snd_pcm_hw_params_set_format');
  late final _snd_pcm_hw_params_set_format =
      _snd_pcm_hw_params_set_formatPtr.asFunction<
          int Function(
              ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>, int)>();

  int snd_pcm_hw_params_set_format_first(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<ffi.Int32> format,
  ) {
    return _snd_pcm_hw_params_set_format_first(
      pcm,
      params,
      format,
    );
  }

  late final _snd_pcm_hw_params_set_format_firstPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.Int32>)>>('snd_pcm_hw_params_set_format_first');
  late final _snd_pcm_hw_params_set_format_first =
      _snd_pcm_hw_params_set_format_firstPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.Int32>)>();

  int snd_pcm_hw_params_set_format_last(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<ffi.Int32> format,
  ) {
    return _snd_pcm_hw_params_set_format_last(
      pcm,
      params,
      format,
    );
  }

  late final _snd_pcm_hw_params_set_format_lastPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.Int32>)>>('snd_pcm_hw_params_set_format_last');
  late final _snd_pcm_hw_params_set_format_last =
      _snd_pcm_hw_params_set_format_lastPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.Int32>)>();

  int snd_pcm_hw_params_set_format_mask(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<snd_pcm_format_mask_t> mask,
  ) {
    return _snd_pcm_hw_params_set_format_mask(
      pcm,
      params,
      mask,
    );
  }

  late final _snd_pcm_hw_params_set_format_maskPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<snd_pcm_t>,
                  ffi.Pointer<snd_pcm_hw_params_t>,
                  ffi.Pointer<snd_pcm_format_mask_t>)>>(
      'snd_pcm_hw_params_set_format_mask');
  late final _snd_pcm_hw_params_set_format_mask =
      _snd_pcm_hw_params_set_format_maskPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<snd_pcm_format_mask_t>)>();

  void snd_pcm_hw_params_get_format_mask(
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<snd_pcm_format_mask_t> mask,
  ) {
    return _snd_pcm_hw_params_get_format_mask(
      params,
      mask,
    );
  }

  late final _snd_pcm_hw_params_get_format_maskPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<snd_pcm_hw_params_t>,
                  ffi.Pointer<snd_pcm_format_mask_t>)>>(
      'snd_pcm_hw_params_get_format_mask');
  late final _snd_pcm_hw_params_get_format_mask =
      _snd_pcm_hw_params_get_format_maskPtr.asFunction<
          void Function(ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<snd_pcm_format_mask_t>)>();

  int snd_pcm_hw_params_get_subformat(
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<ffi.Int32> subformat,
  ) {
    return _snd_pcm_hw_params_get_subformat(
      params,
      subformat,
    );
  }

  late final _snd_pcm_hw_params_get_subformatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.Int32>)>>('snd_pcm_hw_params_get_subformat');
  late final _snd_pcm_hw_params_get_subformat =
      _snd_pcm_hw_params_get_subformatPtr.asFunction<
          int Function(
              ffi.Pointer<snd_pcm_hw_params_t>, ffi.Pointer<ffi.Int32>)>();

  int snd_pcm_hw_params_test_subformat(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    int subformat,
  ) {
    return _snd_pcm_hw_params_test_subformat(
      pcm,
      params,
      subformat,
    );
  }

  late final _snd_pcm_hw_params_test_subformatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Int32)>>('snd_pcm_hw_params_test_subformat');
  late final _snd_pcm_hw_params_test_subformat =
      _snd_pcm_hw_params_test_subformatPtr.asFunction<
          int Function(
              ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>, int)>();

  int snd_pcm_hw_params_set_subformat(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    int subformat,
  ) {
    return _snd_pcm_hw_params_set_subformat(
      pcm,
      params,
      subformat,
    );
  }

  late final _snd_pcm_hw_params_set_subformatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Int32)>>('snd_pcm_hw_params_set_subformat');
  late final _snd_pcm_hw_params_set_subformat =
      _snd_pcm_hw_params_set_subformatPtr.asFunction<
          int Function(
              ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>, int)>();

  int snd_pcm_hw_params_set_subformat_first(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<ffi.Int32> subformat,
  ) {
    return _snd_pcm_hw_params_set_subformat_first(
      pcm,
      params,
      subformat,
    );
  }

  late final _snd_pcm_hw_params_set_subformat_firstPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_pcm_t>,
                  ffi.Pointer<snd_pcm_hw_params_t>, ffi.Pointer<ffi.Int32>)>>(
      'snd_pcm_hw_params_set_subformat_first');
  late final _snd_pcm_hw_params_set_subformat_first =
      _snd_pcm_hw_params_set_subformat_firstPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.Int32>)>();

  int snd_pcm_hw_params_set_subformat_last(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<ffi.Int32> subformat,
  ) {
    return _snd_pcm_hw_params_set_subformat_last(
      pcm,
      params,
      subformat,
    );
  }

  late final _snd_pcm_hw_params_set_subformat_lastPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.Int32>)>>('snd_pcm_hw_params_set_subformat_last');
  late final _snd_pcm_hw_params_set_subformat_last =
      _snd_pcm_hw_params_set_subformat_lastPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.Int32>)>();

  int snd_pcm_hw_params_set_subformat_mask(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<snd_pcm_subformat_mask_t> mask,
  ) {
    return _snd_pcm_hw_params_set_subformat_mask(
      pcm,
      params,
      mask,
    );
  }

  late final _snd_pcm_hw_params_set_subformat_maskPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<snd_pcm_t>,
                  ffi.Pointer<snd_pcm_hw_params_t>,
                  ffi.Pointer<snd_pcm_subformat_mask_t>)>>(
      'snd_pcm_hw_params_set_subformat_mask');
  late final _snd_pcm_hw_params_set_subformat_mask =
      _snd_pcm_hw_params_set_subformat_maskPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<snd_pcm_subformat_mask_t>)>();

  void snd_pcm_hw_params_get_subformat_mask(
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<snd_pcm_subformat_mask_t> mask,
  ) {
    return _snd_pcm_hw_params_get_subformat_mask(
      params,
      mask,
    );
  }

  late final _snd_pcm_hw_params_get_subformat_maskPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<snd_pcm_hw_params_t>,
                  ffi.Pointer<snd_pcm_subformat_mask_t>)>>(
      'snd_pcm_hw_params_get_subformat_mask');
  late final _snd_pcm_hw_params_get_subformat_mask =
      _snd_pcm_hw_params_get_subformat_maskPtr.asFunction<
          void Function(ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<snd_pcm_subformat_mask_t>)>();

  int snd_pcm_hw_params_get_channels(
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<ffi.UnsignedInt> val,
  ) {
    return _snd_pcm_hw_params_get_channels(
      params,
      val,
    );
  }

  late final _snd_pcm_hw_params_get_channelsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>)>>('snd_pcm_hw_params_get_channels');
  late final _snd_pcm_hw_params_get_channels =
      _snd_pcm_hw_params_get_channelsPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>)>();

  int snd_pcm_hw_params_get_channels_min(
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<ffi.UnsignedInt> val,
  ) {
    return _snd_pcm_hw_params_get_channels_min(
      params,
      val,
    );
  }

  late final _snd_pcm_hw_params_get_channels_minPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_pcm_hw_params_t>,
                  ffi.Pointer<ffi.UnsignedInt>)>>(
      'snd_pcm_hw_params_get_channels_min');
  late final _snd_pcm_hw_params_get_channels_min =
      _snd_pcm_hw_params_get_channels_minPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>)>();

  int snd_pcm_hw_params_get_channels_max(
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<ffi.UnsignedInt> val,
  ) {
    return _snd_pcm_hw_params_get_channels_max(
      params,
      val,
    );
  }

  late final _snd_pcm_hw_params_get_channels_maxPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_pcm_hw_params_t>,
                  ffi.Pointer<ffi.UnsignedInt>)>>(
      'snd_pcm_hw_params_get_channels_max');
  late final _snd_pcm_hw_params_get_channels_max =
      _snd_pcm_hw_params_get_channels_maxPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>)>();

  int snd_pcm_hw_params_test_channels(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    int val,
  ) {
    return _snd_pcm_hw_params_test_channels(
      pcm,
      params,
      val,
    );
  }

  late final _snd_pcm_hw_params_test_channelsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.UnsignedInt)>>('snd_pcm_hw_params_test_channels');
  late final _snd_pcm_hw_params_test_channels =
      _snd_pcm_hw_params_test_channelsPtr.asFunction<
          int Function(
              ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>, int)>();

  int snd_pcm_hw_params_set_channels(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    int val,
  ) {
    return _snd_pcm_hw_params_set_channels(
      pcm,
      params,
      val,
    );
  }

  late final _snd_pcm_hw_params_set_channelsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.UnsignedInt)>>('snd_pcm_hw_params_set_channels');
  late final _snd_pcm_hw_params_set_channels =
      _snd_pcm_hw_params_set_channelsPtr.asFunction<
          int Function(
              ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>, int)>();

  int snd_pcm_hw_params_set_channels_min(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<ffi.UnsignedInt> val,
  ) {
    return _snd_pcm_hw_params_set_channels_min(
      pcm,
      params,
      val,
    );
  }

  late final _snd_pcm_hw_params_set_channels_minPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<snd_pcm_t>,
                  ffi.Pointer<snd_pcm_hw_params_t>,
                  ffi.Pointer<ffi.UnsignedInt>)>>(
      'snd_pcm_hw_params_set_channels_min');
  late final _snd_pcm_hw_params_set_channels_min =
      _snd_pcm_hw_params_set_channels_minPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>)>();

  int snd_pcm_hw_params_set_channels_max(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<ffi.UnsignedInt> val,
  ) {
    return _snd_pcm_hw_params_set_channels_max(
      pcm,
      params,
      val,
    );
  }

  late final _snd_pcm_hw_params_set_channels_maxPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<snd_pcm_t>,
                  ffi.Pointer<snd_pcm_hw_params_t>,
                  ffi.Pointer<ffi.UnsignedInt>)>>(
      'snd_pcm_hw_params_set_channels_max');
  late final _snd_pcm_hw_params_set_channels_max =
      _snd_pcm_hw_params_set_channels_maxPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>)>();

  int snd_pcm_hw_params_set_channels_minmax(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<ffi.UnsignedInt> min,
    ffi.Pointer<ffi.UnsignedInt> max,
  ) {
    return _snd_pcm_hw_params_set_channels_minmax(
      pcm,
      params,
      min,
      max,
    );
  }

  late final _snd_pcm_hw_params_set_channels_minmaxPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<snd_pcm_t>,
                  ffi.Pointer<snd_pcm_hw_params_t>,
                  ffi.Pointer<ffi.UnsignedInt>,
                  ffi.Pointer<ffi.UnsignedInt>)>>(
      'snd_pcm_hw_params_set_channels_minmax');
  late final _snd_pcm_hw_params_set_channels_minmax =
      _snd_pcm_hw_params_set_channels_minmaxPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  int snd_pcm_hw_params_set_channels_near(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<ffi.UnsignedInt> val,
  ) {
    return _snd_pcm_hw_params_set_channels_near(
      pcm,
      params,
      val,
    );
  }

  late final _snd_pcm_hw_params_set_channels_nearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<snd_pcm_t>,
                  ffi.Pointer<snd_pcm_hw_params_t>,
                  ffi.Pointer<ffi.UnsignedInt>)>>(
      'snd_pcm_hw_params_set_channels_near');
  late final _snd_pcm_hw_params_set_channels_near =
      _snd_pcm_hw_params_set_channels_nearPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>)>();

  int snd_pcm_hw_params_set_channels_first(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<ffi.UnsignedInt> val,
  ) {
    return _snd_pcm_hw_params_set_channels_first(
      pcm,
      params,
      val,
    );
  }

  late final _snd_pcm_hw_params_set_channels_firstPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<snd_pcm_t>,
                  ffi.Pointer<snd_pcm_hw_params_t>,
                  ffi.Pointer<ffi.UnsignedInt>)>>(
      'snd_pcm_hw_params_set_channels_first');
  late final _snd_pcm_hw_params_set_channels_first =
      _snd_pcm_hw_params_set_channels_firstPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>)>();

  int snd_pcm_hw_params_set_channels_last(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<ffi.UnsignedInt> val,
  ) {
    return _snd_pcm_hw_params_set_channels_last(
      pcm,
      params,
      val,
    );
  }

  late final _snd_pcm_hw_params_set_channels_lastPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<snd_pcm_t>,
                  ffi.Pointer<snd_pcm_hw_params_t>,
                  ffi.Pointer<ffi.UnsignedInt>)>>(
      'snd_pcm_hw_params_set_channels_last');
  late final _snd_pcm_hw_params_set_channels_last =
      _snd_pcm_hw_params_set_channels_lastPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>)>();

  int snd_pcm_hw_params_get_rate(
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<ffi.UnsignedInt> val,
    ffi.Pointer<ffi.Int> dir,
  ) {
    return _snd_pcm_hw_params_get_rate(
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_get_ratePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.Int>)>>('snd_pcm_hw_params_get_rate');
  late final _snd_pcm_hw_params_get_rate =
      _snd_pcm_hw_params_get_ratePtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.Int>)>();

  int snd_pcm_hw_params_get_rate_min(
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<ffi.UnsignedInt> val,
    ffi.Pointer<ffi.Int> dir,
  ) {
    return _snd_pcm_hw_params_get_rate_min(
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_get_rate_minPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.Int>)>>('snd_pcm_hw_params_get_rate_min');
  late final _snd_pcm_hw_params_get_rate_min =
      _snd_pcm_hw_params_get_rate_minPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.Int>)>();

  int snd_pcm_hw_params_get_rate_max(
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<ffi.UnsignedInt> val,
    ffi.Pointer<ffi.Int> dir,
  ) {
    return _snd_pcm_hw_params_get_rate_max(
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_get_rate_maxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.Int>)>>('snd_pcm_hw_params_get_rate_max');
  late final _snd_pcm_hw_params_get_rate_max =
      _snd_pcm_hw_params_get_rate_maxPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.Int>)>();

  int snd_pcm_hw_params_test_rate(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    int val,
    int dir,
  ) {
    return _snd_pcm_hw_params_test_rate(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_test_ratePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.UnsignedInt,
              ffi.Int)>>('snd_pcm_hw_params_test_rate');
  late final _snd_pcm_hw_params_test_rate =
      _snd_pcm_hw_params_test_ratePtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>,
              int, int)>();

  int snd_pcm_hw_params_set_rate(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    int val,
    int dir,
  ) {
    return _snd_pcm_hw_params_set_rate(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_set_ratePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.UnsignedInt,
              ffi.Int)>>('snd_pcm_hw_params_set_rate');
  late final _snd_pcm_hw_params_set_rate =
      _snd_pcm_hw_params_set_ratePtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>,
              int, int)>();

  int snd_pcm_hw_params_set_rate_min(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<ffi.UnsignedInt> val,
    ffi.Pointer<ffi.Int> dir,
  ) {
    return _snd_pcm_hw_params_set_rate_min(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_set_rate_minPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.Int>)>>('snd_pcm_hw_params_set_rate_min');
  late final _snd_pcm_hw_params_set_rate_min =
      _snd_pcm_hw_params_set_rate_minPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.Int>)>();

  int snd_pcm_hw_params_set_rate_max(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<ffi.UnsignedInt> val,
    ffi.Pointer<ffi.Int> dir,
  ) {
    return _snd_pcm_hw_params_set_rate_max(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_set_rate_maxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.Int>)>>('snd_pcm_hw_params_set_rate_max');
  late final _snd_pcm_hw_params_set_rate_max =
      _snd_pcm_hw_params_set_rate_maxPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.Int>)>();

  int snd_pcm_hw_params_set_rate_minmax(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<ffi.UnsignedInt> min,
    ffi.Pointer<ffi.Int> mindir,
    ffi.Pointer<ffi.UnsignedInt> max,
    ffi.Pointer<ffi.Int> maxdir,
  ) {
    return _snd_pcm_hw_params_set_rate_minmax(
      pcm,
      params,
      min,
      mindir,
      max,
      maxdir,
    );
  }

  late final _snd_pcm_hw_params_set_rate_minmaxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.Int>)>>('snd_pcm_hw_params_set_rate_minmax');
  late final _snd_pcm_hw_params_set_rate_minmax =
      _snd_pcm_hw_params_set_rate_minmaxPtr.asFunction<
          int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.Int>)>();

  int snd_pcm_hw_params_set_rate_near(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<ffi.UnsignedInt> val,
    ffi.Pointer<ffi.Int> dir,
  ) {
    return _snd_pcm_hw_params_set_rate_near(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_set_rate_nearPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.Int>)>>('snd_pcm_hw_params_set_rate_near');
  late final _snd_pcm_hw_params_set_rate_near =
      _snd_pcm_hw_params_set_rate_nearPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.Int>)>();

  int snd_pcm_hw_params_set_rate_first(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<ffi.UnsignedInt> val,
    ffi.Pointer<ffi.Int> dir,
  ) {
    return _snd_pcm_hw_params_set_rate_first(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_set_rate_firstPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.Int>)>>('snd_pcm_hw_params_set_rate_first');
  late final _snd_pcm_hw_params_set_rate_first =
      _snd_pcm_hw_params_set_rate_firstPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.Int>)>();

  int snd_pcm_hw_params_set_rate_last(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<ffi.UnsignedInt> val,
    ffi.Pointer<ffi.Int> dir,
  ) {
    return _snd_pcm_hw_params_set_rate_last(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_set_rate_lastPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.Int>)>>('snd_pcm_hw_params_set_rate_last');
  late final _snd_pcm_hw_params_set_rate_last =
      _snd_pcm_hw_params_set_rate_lastPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.Int>)>();

  int snd_pcm_hw_params_set_rate_resample(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    int val,
  ) {
    return _snd_pcm_hw_params_set_rate_resample(
      pcm,
      params,
      val,
    );
  }

  late final _snd_pcm_hw_params_set_rate_resamplePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.UnsignedInt)>>('snd_pcm_hw_params_set_rate_resample');
  late final _snd_pcm_hw_params_set_rate_resample =
      _snd_pcm_hw_params_set_rate_resamplePtr.asFunction<
          int Function(
              ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>, int)>();

  int snd_pcm_hw_params_get_rate_resample(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<ffi.UnsignedInt> val,
  ) {
    return _snd_pcm_hw_params_get_rate_resample(
      pcm,
      params,
      val,
    );
  }

  late final _snd_pcm_hw_params_get_rate_resamplePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<snd_pcm_t>,
                  ffi.Pointer<snd_pcm_hw_params_t>,
                  ffi.Pointer<ffi.UnsignedInt>)>>(
      'snd_pcm_hw_params_get_rate_resample');
  late final _snd_pcm_hw_params_get_rate_resample =
      _snd_pcm_hw_params_get_rate_resamplePtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>)>();

  int snd_pcm_hw_params_set_export_buffer(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    int val,
  ) {
    return _snd_pcm_hw_params_set_export_buffer(
      pcm,
      params,
      val,
    );
  }

  late final _snd_pcm_hw_params_set_export_bufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.UnsignedInt)>>('snd_pcm_hw_params_set_export_buffer');
  late final _snd_pcm_hw_params_set_export_buffer =
      _snd_pcm_hw_params_set_export_bufferPtr.asFunction<
          int Function(
              ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>, int)>();

  int snd_pcm_hw_params_get_export_buffer(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<ffi.UnsignedInt> val,
  ) {
    return _snd_pcm_hw_params_get_export_buffer(
      pcm,
      params,
      val,
    );
  }

  late final _snd_pcm_hw_params_get_export_bufferPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<snd_pcm_t>,
                  ffi.Pointer<snd_pcm_hw_params_t>,
                  ffi.Pointer<ffi.UnsignedInt>)>>(
      'snd_pcm_hw_params_get_export_buffer');
  late final _snd_pcm_hw_params_get_export_buffer =
      _snd_pcm_hw_params_get_export_bufferPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>)>();

  int snd_pcm_hw_params_set_period_wakeup(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    int val,
  ) {
    return _snd_pcm_hw_params_set_period_wakeup(
      pcm,
      params,
      val,
    );
  }

  late final _snd_pcm_hw_params_set_period_wakeupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.UnsignedInt)>>('snd_pcm_hw_params_set_period_wakeup');
  late final _snd_pcm_hw_params_set_period_wakeup =
      _snd_pcm_hw_params_set_period_wakeupPtr.asFunction<
          int Function(
              ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>, int)>();

  int snd_pcm_hw_params_get_period_wakeup(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<ffi.UnsignedInt> val,
  ) {
    return _snd_pcm_hw_params_get_period_wakeup(
      pcm,
      params,
      val,
    );
  }

  late final _snd_pcm_hw_params_get_period_wakeupPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<snd_pcm_t>,
                  ffi.Pointer<snd_pcm_hw_params_t>,
                  ffi.Pointer<ffi.UnsignedInt>)>>(
      'snd_pcm_hw_params_get_period_wakeup');
  late final _snd_pcm_hw_params_get_period_wakeup =
      _snd_pcm_hw_params_get_period_wakeupPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>)>();

  int snd_pcm_hw_params_get_period_time(
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<ffi.UnsignedInt> val,
    ffi.Pointer<ffi.Int> dir,
  ) {
    return _snd_pcm_hw_params_get_period_time(
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_get_period_timePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.Int>)>>('snd_pcm_hw_params_get_period_time');
  late final _snd_pcm_hw_params_get_period_time =
      _snd_pcm_hw_params_get_period_timePtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.Int>)>();

  int snd_pcm_hw_params_get_period_time_min(
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<ffi.UnsignedInt> val,
    ffi.Pointer<ffi.Int> dir,
  ) {
    return _snd_pcm_hw_params_get_period_time_min(
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_get_period_time_minPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.Int>)>>('snd_pcm_hw_params_get_period_time_min');
  late final _snd_pcm_hw_params_get_period_time_min =
      _snd_pcm_hw_params_get_period_time_minPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.Int>)>();

  int snd_pcm_hw_params_get_period_time_max(
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<ffi.UnsignedInt> val,
    ffi.Pointer<ffi.Int> dir,
  ) {
    return _snd_pcm_hw_params_get_period_time_max(
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_get_period_time_maxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.Int>)>>('snd_pcm_hw_params_get_period_time_max');
  late final _snd_pcm_hw_params_get_period_time_max =
      _snd_pcm_hw_params_get_period_time_maxPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.Int>)>();

  int snd_pcm_hw_params_test_period_time(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    int val,
    int dir,
  ) {
    return _snd_pcm_hw_params_test_period_time(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_test_period_timePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.UnsignedInt,
              ffi.Int)>>('snd_pcm_hw_params_test_period_time');
  late final _snd_pcm_hw_params_test_period_time =
      _snd_pcm_hw_params_test_period_timePtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>,
              int, int)>();

  int snd_pcm_hw_params_set_period_time(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    int val,
    int dir,
  ) {
    return _snd_pcm_hw_params_set_period_time(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_set_period_timePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.UnsignedInt,
              ffi.Int)>>('snd_pcm_hw_params_set_period_time');
  late final _snd_pcm_hw_params_set_period_time =
      _snd_pcm_hw_params_set_period_timePtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>,
              int, int)>();

  int snd_pcm_hw_params_set_period_time_min(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<ffi.UnsignedInt> val,
    ffi.Pointer<ffi.Int> dir,
  ) {
    return _snd_pcm_hw_params_set_period_time_min(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_set_period_time_minPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.Int>)>>('snd_pcm_hw_params_set_period_time_min');
  late final _snd_pcm_hw_params_set_period_time_min =
      _snd_pcm_hw_params_set_period_time_minPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.Int>)>();

  int snd_pcm_hw_params_set_period_time_max(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<ffi.UnsignedInt> val,
    ffi.Pointer<ffi.Int> dir,
  ) {
    return _snd_pcm_hw_params_set_period_time_max(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_set_period_time_maxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.Int>)>>('snd_pcm_hw_params_set_period_time_max');
  late final _snd_pcm_hw_params_set_period_time_max =
      _snd_pcm_hw_params_set_period_time_maxPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.Int>)>();

  int snd_pcm_hw_params_set_period_time_minmax(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<ffi.UnsignedInt> min,
    ffi.Pointer<ffi.Int> mindir,
    ffi.Pointer<ffi.UnsignedInt> max,
    ffi.Pointer<ffi.Int> maxdir,
  ) {
    return _snd_pcm_hw_params_set_period_time_minmax(
      pcm,
      params,
      min,
      mindir,
      max,
      maxdir,
    );
  }

  late final _snd_pcm_hw_params_set_period_time_minmaxPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<snd_pcm_t>,
                  ffi.Pointer<snd_pcm_hw_params_t>,
                  ffi.Pointer<ffi.UnsignedInt>,
                  ffi.Pointer<ffi.Int>,
                  ffi.Pointer<ffi.UnsignedInt>,
                  ffi.Pointer<ffi.Int>)>>(
      'snd_pcm_hw_params_set_period_time_minmax');
  late final _snd_pcm_hw_params_set_period_time_minmax =
      _snd_pcm_hw_params_set_period_time_minmaxPtr.asFunction<
          int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.Int>)>();

  int snd_pcm_hw_params_set_period_time_near(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<ffi.UnsignedInt> val,
    ffi.Pointer<ffi.Int> dir,
  ) {
    return _snd_pcm_hw_params_set_period_time_near(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_set_period_time_nearPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.Int>)>>('snd_pcm_hw_params_set_period_time_near');
  late final _snd_pcm_hw_params_set_period_time_near =
      _snd_pcm_hw_params_set_period_time_nearPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.Int>)>();

  int snd_pcm_hw_params_set_period_time_first(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<ffi.UnsignedInt> val,
    ffi.Pointer<ffi.Int> dir,
  ) {
    return _snd_pcm_hw_params_set_period_time_first(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_set_period_time_firstPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<snd_pcm_t>,
                  ffi.Pointer<snd_pcm_hw_params_t>,
                  ffi.Pointer<ffi.UnsignedInt>,
                  ffi.Pointer<ffi.Int>)>>(
      'snd_pcm_hw_params_set_period_time_first');
  late final _snd_pcm_hw_params_set_period_time_first =
      _snd_pcm_hw_params_set_period_time_firstPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.Int>)>();

  int snd_pcm_hw_params_set_period_time_last(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<ffi.UnsignedInt> val,
    ffi.Pointer<ffi.Int> dir,
  ) {
    return _snd_pcm_hw_params_set_period_time_last(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_set_period_time_lastPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.Int>)>>('snd_pcm_hw_params_set_period_time_last');
  late final _snd_pcm_hw_params_set_period_time_last =
      _snd_pcm_hw_params_set_period_time_lastPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.Int>)>();

  int snd_pcm_hw_params_get_period_size(
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<snd_pcm_uframes_t> frames,
    ffi.Pointer<ffi.Int> dir,
  ) {
    return _snd_pcm_hw_params_get_period_size(
      params,
      frames,
      dir,
    );
  }

  late final _snd_pcm_hw_params_get_period_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<snd_pcm_uframes_t>,
              ffi.Pointer<ffi.Int>)>>('snd_pcm_hw_params_get_period_size');
  late final _snd_pcm_hw_params_get_period_size =
      _snd_pcm_hw_params_get_period_sizePtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<snd_pcm_uframes_t>, ffi.Pointer<ffi.Int>)>();

  int snd_pcm_hw_params_get_period_size_min(
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<snd_pcm_uframes_t> frames,
    ffi.Pointer<ffi.Int> dir,
  ) {
    return _snd_pcm_hw_params_get_period_size_min(
      params,
      frames,
      dir,
    );
  }

  late final _snd_pcm_hw_params_get_period_size_minPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<snd_pcm_uframes_t>,
              ffi.Pointer<ffi.Int>)>>('snd_pcm_hw_params_get_period_size_min');
  late final _snd_pcm_hw_params_get_period_size_min =
      _snd_pcm_hw_params_get_period_size_minPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<snd_pcm_uframes_t>, ffi.Pointer<ffi.Int>)>();

  int snd_pcm_hw_params_get_period_size_max(
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<snd_pcm_uframes_t> frames,
    ffi.Pointer<ffi.Int> dir,
  ) {
    return _snd_pcm_hw_params_get_period_size_max(
      params,
      frames,
      dir,
    );
  }

  late final _snd_pcm_hw_params_get_period_size_maxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<snd_pcm_uframes_t>,
              ffi.Pointer<ffi.Int>)>>('snd_pcm_hw_params_get_period_size_max');
  late final _snd_pcm_hw_params_get_period_size_max =
      _snd_pcm_hw_params_get_period_size_maxPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<snd_pcm_uframes_t>, ffi.Pointer<ffi.Int>)>();

  int snd_pcm_hw_params_test_period_size(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    int val,
    int dir,
  ) {
    return _snd_pcm_hw_params_test_period_size(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_test_period_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_hw_params_t>,
              snd_pcm_uframes_t,
              ffi.Int)>>('snd_pcm_hw_params_test_period_size');
  late final _snd_pcm_hw_params_test_period_size =
      _snd_pcm_hw_params_test_period_sizePtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>,
              int, int)>();

  int snd_pcm_hw_params_set_period_size(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    int val,
    int dir,
  ) {
    return _snd_pcm_hw_params_set_period_size(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_set_period_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_hw_params_t>,
              snd_pcm_uframes_t,
              ffi.Int)>>('snd_pcm_hw_params_set_period_size');
  late final _snd_pcm_hw_params_set_period_size =
      _snd_pcm_hw_params_set_period_sizePtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>,
              int, int)>();

  int snd_pcm_hw_params_set_period_size_min(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<snd_pcm_uframes_t> val,
    ffi.Pointer<ffi.Int> dir,
  ) {
    return _snd_pcm_hw_params_set_period_size_min(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_set_period_size_minPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<snd_pcm_uframes_t>,
              ffi.Pointer<ffi.Int>)>>('snd_pcm_hw_params_set_period_size_min');
  late final _snd_pcm_hw_params_set_period_size_min =
      _snd_pcm_hw_params_set_period_size_minPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<snd_pcm_uframes_t>, ffi.Pointer<ffi.Int>)>();

  int snd_pcm_hw_params_set_period_size_max(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<snd_pcm_uframes_t> val,
    ffi.Pointer<ffi.Int> dir,
  ) {
    return _snd_pcm_hw_params_set_period_size_max(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_set_period_size_maxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<snd_pcm_uframes_t>,
              ffi.Pointer<ffi.Int>)>>('snd_pcm_hw_params_set_period_size_max');
  late final _snd_pcm_hw_params_set_period_size_max =
      _snd_pcm_hw_params_set_period_size_maxPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<snd_pcm_uframes_t>, ffi.Pointer<ffi.Int>)>();

  int snd_pcm_hw_params_set_period_size_minmax(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<snd_pcm_uframes_t> min,
    ffi.Pointer<ffi.Int> mindir,
    ffi.Pointer<snd_pcm_uframes_t> max,
    ffi.Pointer<ffi.Int> maxdir,
  ) {
    return _snd_pcm_hw_params_set_period_size_minmax(
      pcm,
      params,
      min,
      mindir,
      max,
      maxdir,
    );
  }

  late final _snd_pcm_hw_params_set_period_size_minmaxPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<snd_pcm_t>,
                  ffi.Pointer<snd_pcm_hw_params_t>,
                  ffi.Pointer<snd_pcm_uframes_t>,
                  ffi.Pointer<ffi.Int>,
                  ffi.Pointer<snd_pcm_uframes_t>,
                  ffi.Pointer<ffi.Int>)>>(
      'snd_pcm_hw_params_set_period_size_minmax');
  late final _snd_pcm_hw_params_set_period_size_minmax =
      _snd_pcm_hw_params_set_period_size_minmaxPtr.asFunction<
          int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<snd_pcm_uframes_t>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<snd_pcm_uframes_t>,
              ffi.Pointer<ffi.Int>)>();

  int snd_pcm_hw_params_set_period_size_near(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<snd_pcm_uframes_t> val,
    ffi.Pointer<ffi.Int> dir,
  ) {
    return _snd_pcm_hw_params_set_period_size_near(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_set_period_size_nearPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<snd_pcm_uframes_t>,
              ffi.Pointer<ffi.Int>)>>('snd_pcm_hw_params_set_period_size_near');
  late final _snd_pcm_hw_params_set_period_size_near =
      _snd_pcm_hw_params_set_period_size_nearPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<snd_pcm_uframes_t>, ffi.Pointer<ffi.Int>)>();

  int snd_pcm_hw_params_set_period_size_first(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<snd_pcm_uframes_t> val,
    ffi.Pointer<ffi.Int> dir,
  ) {
    return _snd_pcm_hw_params_set_period_size_first(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_set_period_size_firstPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<snd_pcm_t>,
                  ffi.Pointer<snd_pcm_hw_params_t>,
                  ffi.Pointer<snd_pcm_uframes_t>,
                  ffi.Pointer<ffi.Int>)>>(
      'snd_pcm_hw_params_set_period_size_first');
  late final _snd_pcm_hw_params_set_period_size_first =
      _snd_pcm_hw_params_set_period_size_firstPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<snd_pcm_uframes_t>, ffi.Pointer<ffi.Int>)>();

  int snd_pcm_hw_params_set_period_size_last(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<snd_pcm_uframes_t> val,
    ffi.Pointer<ffi.Int> dir,
  ) {
    return _snd_pcm_hw_params_set_period_size_last(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_set_period_size_lastPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<snd_pcm_uframes_t>,
              ffi.Pointer<ffi.Int>)>>('snd_pcm_hw_params_set_period_size_last');
  late final _snd_pcm_hw_params_set_period_size_last =
      _snd_pcm_hw_params_set_period_size_lastPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<snd_pcm_uframes_t>, ffi.Pointer<ffi.Int>)>();

  int snd_pcm_hw_params_set_period_size_integer(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
  ) {
    return _snd_pcm_hw_params_set_period_size_integer(
      pcm,
      params,
    );
  }

  late final _snd_pcm_hw_params_set_period_size_integerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>)>>(
      'snd_pcm_hw_params_set_period_size_integer');
  late final _snd_pcm_hw_params_set_period_size_integer =
      _snd_pcm_hw_params_set_period_size_integerPtr.asFunction<
          int Function(
              ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>)>();

  int snd_pcm_hw_params_get_periods(
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<ffi.UnsignedInt> val,
    ffi.Pointer<ffi.Int> dir,
  ) {
    return _snd_pcm_hw_params_get_periods(
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_get_periodsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.Int>)>>('snd_pcm_hw_params_get_periods');
  late final _snd_pcm_hw_params_get_periods =
      _snd_pcm_hw_params_get_periodsPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.Int>)>();

  int snd_pcm_hw_params_get_periods_min(
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<ffi.UnsignedInt> val,
    ffi.Pointer<ffi.Int> dir,
  ) {
    return _snd_pcm_hw_params_get_periods_min(
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_get_periods_minPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.Int>)>>('snd_pcm_hw_params_get_periods_min');
  late final _snd_pcm_hw_params_get_periods_min =
      _snd_pcm_hw_params_get_periods_minPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.Int>)>();

  int snd_pcm_hw_params_get_periods_max(
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<ffi.UnsignedInt> val,
    ffi.Pointer<ffi.Int> dir,
  ) {
    return _snd_pcm_hw_params_get_periods_max(
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_get_periods_maxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.Int>)>>('snd_pcm_hw_params_get_periods_max');
  late final _snd_pcm_hw_params_get_periods_max =
      _snd_pcm_hw_params_get_periods_maxPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.Int>)>();

  int snd_pcm_hw_params_test_periods(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    int val,
    int dir,
  ) {
    return _snd_pcm_hw_params_test_periods(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_test_periodsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.UnsignedInt,
              ffi.Int)>>('snd_pcm_hw_params_test_periods');
  late final _snd_pcm_hw_params_test_periods =
      _snd_pcm_hw_params_test_periodsPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>,
              int, int)>();

  int snd_pcm_hw_params_set_periods(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    int val,
    int dir,
  ) {
    return _snd_pcm_hw_params_set_periods(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_set_periodsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.UnsignedInt,
              ffi.Int)>>('snd_pcm_hw_params_set_periods');
  late final _snd_pcm_hw_params_set_periods =
      _snd_pcm_hw_params_set_periodsPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>,
              int, int)>();

  int snd_pcm_hw_params_set_periods_min(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<ffi.UnsignedInt> val,
    ffi.Pointer<ffi.Int> dir,
  ) {
    return _snd_pcm_hw_params_set_periods_min(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_set_periods_minPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.Int>)>>('snd_pcm_hw_params_set_periods_min');
  late final _snd_pcm_hw_params_set_periods_min =
      _snd_pcm_hw_params_set_periods_minPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.Int>)>();

  int snd_pcm_hw_params_set_periods_max(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<ffi.UnsignedInt> val,
    ffi.Pointer<ffi.Int> dir,
  ) {
    return _snd_pcm_hw_params_set_periods_max(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_set_periods_maxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.Int>)>>('snd_pcm_hw_params_set_periods_max');
  late final _snd_pcm_hw_params_set_periods_max =
      _snd_pcm_hw_params_set_periods_maxPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.Int>)>();

  int snd_pcm_hw_params_set_periods_minmax(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<ffi.UnsignedInt> min,
    ffi.Pointer<ffi.Int> mindir,
    ffi.Pointer<ffi.UnsignedInt> max,
    ffi.Pointer<ffi.Int> maxdir,
  ) {
    return _snd_pcm_hw_params_set_periods_minmax(
      pcm,
      params,
      min,
      mindir,
      max,
      maxdir,
    );
  }

  late final _snd_pcm_hw_params_set_periods_minmaxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.Int>)>>('snd_pcm_hw_params_set_periods_minmax');
  late final _snd_pcm_hw_params_set_periods_minmax =
      _snd_pcm_hw_params_set_periods_minmaxPtr.asFunction<
          int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.Int>)>();

  int snd_pcm_hw_params_set_periods_near(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<ffi.UnsignedInt> val,
    ffi.Pointer<ffi.Int> dir,
  ) {
    return _snd_pcm_hw_params_set_periods_near(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_set_periods_nearPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.Int>)>>('snd_pcm_hw_params_set_periods_near');
  late final _snd_pcm_hw_params_set_periods_near =
      _snd_pcm_hw_params_set_periods_nearPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.Int>)>();

  int snd_pcm_hw_params_set_periods_first(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<ffi.UnsignedInt> val,
    ffi.Pointer<ffi.Int> dir,
  ) {
    return _snd_pcm_hw_params_set_periods_first(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_set_periods_firstPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.Int>)>>('snd_pcm_hw_params_set_periods_first');
  late final _snd_pcm_hw_params_set_periods_first =
      _snd_pcm_hw_params_set_periods_firstPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.Int>)>();

  int snd_pcm_hw_params_set_periods_last(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<ffi.UnsignedInt> val,
    ffi.Pointer<ffi.Int> dir,
  ) {
    return _snd_pcm_hw_params_set_periods_last(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_set_periods_lastPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.Int>)>>('snd_pcm_hw_params_set_periods_last');
  late final _snd_pcm_hw_params_set_periods_last =
      _snd_pcm_hw_params_set_periods_lastPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.Int>)>();

  int snd_pcm_hw_params_set_periods_integer(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
  ) {
    return _snd_pcm_hw_params_set_periods_integer(
      pcm,
      params,
    );
  }

  late final _snd_pcm_hw_params_set_periods_integerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>)>>(
      'snd_pcm_hw_params_set_periods_integer');
  late final _snd_pcm_hw_params_set_periods_integer =
      _snd_pcm_hw_params_set_periods_integerPtr.asFunction<
          int Function(
              ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>)>();

  int snd_pcm_hw_params_get_buffer_time(
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<ffi.UnsignedInt> val,
    ffi.Pointer<ffi.Int> dir,
  ) {
    return _snd_pcm_hw_params_get_buffer_time(
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_get_buffer_timePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.Int>)>>('snd_pcm_hw_params_get_buffer_time');
  late final _snd_pcm_hw_params_get_buffer_time =
      _snd_pcm_hw_params_get_buffer_timePtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.Int>)>();

  int snd_pcm_hw_params_get_buffer_time_min(
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<ffi.UnsignedInt> val,
    ffi.Pointer<ffi.Int> dir,
  ) {
    return _snd_pcm_hw_params_get_buffer_time_min(
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_get_buffer_time_minPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.Int>)>>('snd_pcm_hw_params_get_buffer_time_min');
  late final _snd_pcm_hw_params_get_buffer_time_min =
      _snd_pcm_hw_params_get_buffer_time_minPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.Int>)>();

  int snd_pcm_hw_params_get_buffer_time_max(
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<ffi.UnsignedInt> val,
    ffi.Pointer<ffi.Int> dir,
  ) {
    return _snd_pcm_hw_params_get_buffer_time_max(
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_get_buffer_time_maxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.Int>)>>('snd_pcm_hw_params_get_buffer_time_max');
  late final _snd_pcm_hw_params_get_buffer_time_max =
      _snd_pcm_hw_params_get_buffer_time_maxPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.Int>)>();

  int snd_pcm_hw_params_test_buffer_time(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    int val,
    int dir,
  ) {
    return _snd_pcm_hw_params_test_buffer_time(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_test_buffer_timePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.UnsignedInt,
              ffi.Int)>>('snd_pcm_hw_params_test_buffer_time');
  late final _snd_pcm_hw_params_test_buffer_time =
      _snd_pcm_hw_params_test_buffer_timePtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>,
              int, int)>();

  int snd_pcm_hw_params_set_buffer_time(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    int val,
    int dir,
  ) {
    return _snd_pcm_hw_params_set_buffer_time(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_set_buffer_timePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.UnsignedInt,
              ffi.Int)>>('snd_pcm_hw_params_set_buffer_time');
  late final _snd_pcm_hw_params_set_buffer_time =
      _snd_pcm_hw_params_set_buffer_timePtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>,
              int, int)>();

  int snd_pcm_hw_params_set_buffer_time_min(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<ffi.UnsignedInt> val,
    ffi.Pointer<ffi.Int> dir,
  ) {
    return _snd_pcm_hw_params_set_buffer_time_min(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_set_buffer_time_minPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.Int>)>>('snd_pcm_hw_params_set_buffer_time_min');
  late final _snd_pcm_hw_params_set_buffer_time_min =
      _snd_pcm_hw_params_set_buffer_time_minPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.Int>)>();

  int snd_pcm_hw_params_set_buffer_time_max(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<ffi.UnsignedInt> val,
    ffi.Pointer<ffi.Int> dir,
  ) {
    return _snd_pcm_hw_params_set_buffer_time_max(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_set_buffer_time_maxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.Int>)>>('snd_pcm_hw_params_set_buffer_time_max');
  late final _snd_pcm_hw_params_set_buffer_time_max =
      _snd_pcm_hw_params_set_buffer_time_maxPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.Int>)>();

  int snd_pcm_hw_params_set_buffer_time_minmax(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<ffi.UnsignedInt> min,
    ffi.Pointer<ffi.Int> mindir,
    ffi.Pointer<ffi.UnsignedInt> max,
    ffi.Pointer<ffi.Int> maxdir,
  ) {
    return _snd_pcm_hw_params_set_buffer_time_minmax(
      pcm,
      params,
      min,
      mindir,
      max,
      maxdir,
    );
  }

  late final _snd_pcm_hw_params_set_buffer_time_minmaxPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<snd_pcm_t>,
                  ffi.Pointer<snd_pcm_hw_params_t>,
                  ffi.Pointer<ffi.UnsignedInt>,
                  ffi.Pointer<ffi.Int>,
                  ffi.Pointer<ffi.UnsignedInt>,
                  ffi.Pointer<ffi.Int>)>>(
      'snd_pcm_hw_params_set_buffer_time_minmax');
  late final _snd_pcm_hw_params_set_buffer_time_minmax =
      _snd_pcm_hw_params_set_buffer_time_minmaxPtr.asFunction<
          int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.Int>)>();

  int snd_pcm_hw_params_set_buffer_time_near(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<ffi.UnsignedInt> val,
    ffi.Pointer<ffi.Int> dir,
  ) {
    return _snd_pcm_hw_params_set_buffer_time_near(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_set_buffer_time_nearPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.Int>)>>('snd_pcm_hw_params_set_buffer_time_near');
  late final _snd_pcm_hw_params_set_buffer_time_near =
      _snd_pcm_hw_params_set_buffer_time_nearPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.Int>)>();

  int snd_pcm_hw_params_set_buffer_time_first(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<ffi.UnsignedInt> val,
    ffi.Pointer<ffi.Int> dir,
  ) {
    return _snd_pcm_hw_params_set_buffer_time_first(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_set_buffer_time_firstPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<snd_pcm_t>,
                  ffi.Pointer<snd_pcm_hw_params_t>,
                  ffi.Pointer<ffi.UnsignedInt>,
                  ffi.Pointer<ffi.Int>)>>(
      'snd_pcm_hw_params_set_buffer_time_first');
  late final _snd_pcm_hw_params_set_buffer_time_first =
      _snd_pcm_hw_params_set_buffer_time_firstPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.Int>)>();

  int snd_pcm_hw_params_set_buffer_time_last(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<ffi.UnsignedInt> val,
    ffi.Pointer<ffi.Int> dir,
  ) {
    return _snd_pcm_hw_params_set_buffer_time_last(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_set_buffer_time_lastPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.Int>)>>('snd_pcm_hw_params_set_buffer_time_last');
  late final _snd_pcm_hw_params_set_buffer_time_last =
      _snd_pcm_hw_params_set_buffer_time_lastPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.Int>)>();

  int snd_pcm_hw_params_get_buffer_size(
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<snd_pcm_uframes_t> val,
  ) {
    return _snd_pcm_hw_params_get_buffer_size(
      params,
      val,
    );
  }

  late final _snd_pcm_hw_params_get_buffer_sizePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_pcm_hw_params_t>,
                  ffi.Pointer<snd_pcm_uframes_t>)>>(
      'snd_pcm_hw_params_get_buffer_size');
  late final _snd_pcm_hw_params_get_buffer_size =
      _snd_pcm_hw_params_get_buffer_sizePtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<snd_pcm_uframes_t>)>();

  int snd_pcm_hw_params_get_buffer_size_min(
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<snd_pcm_uframes_t> val,
  ) {
    return _snd_pcm_hw_params_get_buffer_size_min(
      params,
      val,
    );
  }

  late final _snd_pcm_hw_params_get_buffer_size_minPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_pcm_hw_params_t>,
                  ffi.Pointer<snd_pcm_uframes_t>)>>(
      'snd_pcm_hw_params_get_buffer_size_min');
  late final _snd_pcm_hw_params_get_buffer_size_min =
      _snd_pcm_hw_params_get_buffer_size_minPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<snd_pcm_uframes_t>)>();

  int snd_pcm_hw_params_get_buffer_size_max(
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<snd_pcm_uframes_t> val,
  ) {
    return _snd_pcm_hw_params_get_buffer_size_max(
      params,
      val,
    );
  }

  late final _snd_pcm_hw_params_get_buffer_size_maxPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_pcm_hw_params_t>,
                  ffi.Pointer<snd_pcm_uframes_t>)>>(
      'snd_pcm_hw_params_get_buffer_size_max');
  late final _snd_pcm_hw_params_get_buffer_size_max =
      _snd_pcm_hw_params_get_buffer_size_maxPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<snd_pcm_uframes_t>)>();

  int snd_pcm_hw_params_test_buffer_size(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    int val,
  ) {
    return _snd_pcm_hw_params_test_buffer_size(
      pcm,
      params,
      val,
    );
  }

  late final _snd_pcm_hw_params_test_buffer_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_hw_params_t>,
              snd_pcm_uframes_t)>>('snd_pcm_hw_params_test_buffer_size');
  late final _snd_pcm_hw_params_test_buffer_size =
      _snd_pcm_hw_params_test_buffer_sizePtr.asFunction<
          int Function(
              ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>, int)>();

  int snd_pcm_hw_params_set_buffer_size(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    int val,
  ) {
    return _snd_pcm_hw_params_set_buffer_size(
      pcm,
      params,
      val,
    );
  }

  late final _snd_pcm_hw_params_set_buffer_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_hw_params_t>,
              snd_pcm_uframes_t)>>('snd_pcm_hw_params_set_buffer_size');
  late final _snd_pcm_hw_params_set_buffer_size =
      _snd_pcm_hw_params_set_buffer_sizePtr.asFunction<
          int Function(
              ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>, int)>();

  int snd_pcm_hw_params_set_buffer_size_min(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<snd_pcm_uframes_t> val,
  ) {
    return _snd_pcm_hw_params_set_buffer_size_min(
      pcm,
      params,
      val,
    );
  }

  late final _snd_pcm_hw_params_set_buffer_size_minPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<snd_pcm_t>,
                  ffi.Pointer<snd_pcm_hw_params_t>,
                  ffi.Pointer<snd_pcm_uframes_t>)>>(
      'snd_pcm_hw_params_set_buffer_size_min');
  late final _snd_pcm_hw_params_set_buffer_size_min =
      _snd_pcm_hw_params_set_buffer_size_minPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<snd_pcm_uframes_t>)>();

  int snd_pcm_hw_params_set_buffer_size_max(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<snd_pcm_uframes_t> val,
  ) {
    return _snd_pcm_hw_params_set_buffer_size_max(
      pcm,
      params,
      val,
    );
  }

  late final _snd_pcm_hw_params_set_buffer_size_maxPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<snd_pcm_t>,
                  ffi.Pointer<snd_pcm_hw_params_t>,
                  ffi.Pointer<snd_pcm_uframes_t>)>>(
      'snd_pcm_hw_params_set_buffer_size_max');
  late final _snd_pcm_hw_params_set_buffer_size_max =
      _snd_pcm_hw_params_set_buffer_size_maxPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<snd_pcm_uframes_t>)>();

  int snd_pcm_hw_params_set_buffer_size_minmax(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<snd_pcm_uframes_t> min,
    ffi.Pointer<snd_pcm_uframes_t> max,
  ) {
    return _snd_pcm_hw_params_set_buffer_size_minmax(
      pcm,
      params,
      min,
      max,
    );
  }

  late final _snd_pcm_hw_params_set_buffer_size_minmaxPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<snd_pcm_t>,
                  ffi.Pointer<snd_pcm_hw_params_t>,
                  ffi.Pointer<snd_pcm_uframes_t>,
                  ffi.Pointer<snd_pcm_uframes_t>)>>(
      'snd_pcm_hw_params_set_buffer_size_minmax');
  late final _snd_pcm_hw_params_set_buffer_size_minmax =
      _snd_pcm_hw_params_set_buffer_size_minmaxPtr.asFunction<
          int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<snd_pcm_uframes_t>,
              ffi.Pointer<snd_pcm_uframes_t>)>();

  int snd_pcm_hw_params_set_buffer_size_near(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<snd_pcm_uframes_t> val,
  ) {
    return _snd_pcm_hw_params_set_buffer_size_near(
      pcm,
      params,
      val,
    );
  }

  late final _snd_pcm_hw_params_set_buffer_size_nearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<snd_pcm_t>,
                  ffi.Pointer<snd_pcm_hw_params_t>,
                  ffi.Pointer<snd_pcm_uframes_t>)>>(
      'snd_pcm_hw_params_set_buffer_size_near');
  late final _snd_pcm_hw_params_set_buffer_size_near =
      _snd_pcm_hw_params_set_buffer_size_nearPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<snd_pcm_uframes_t>)>();

  int snd_pcm_hw_params_set_buffer_size_first(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<snd_pcm_uframes_t> val,
  ) {
    return _snd_pcm_hw_params_set_buffer_size_first(
      pcm,
      params,
      val,
    );
  }

  late final _snd_pcm_hw_params_set_buffer_size_firstPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<snd_pcm_t>,
                  ffi.Pointer<snd_pcm_hw_params_t>,
                  ffi.Pointer<snd_pcm_uframes_t>)>>(
      'snd_pcm_hw_params_set_buffer_size_first');
  late final _snd_pcm_hw_params_set_buffer_size_first =
      _snd_pcm_hw_params_set_buffer_size_firstPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<snd_pcm_uframes_t>)>();

  int snd_pcm_hw_params_set_buffer_size_last(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<snd_pcm_uframes_t> val,
  ) {
    return _snd_pcm_hw_params_set_buffer_size_last(
      pcm,
      params,
      val,
    );
  }

  late final _snd_pcm_hw_params_set_buffer_size_lastPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<snd_pcm_t>,
                  ffi.Pointer<snd_pcm_hw_params_t>,
                  ffi.Pointer<snd_pcm_uframes_t>)>>(
      'snd_pcm_hw_params_set_buffer_size_last');
  late final _snd_pcm_hw_params_set_buffer_size_last =
      _snd_pcm_hw_params_set_buffer_size_lastPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<snd_pcm_uframes_t>)>();

  int snd_pcm_hw_params_get_min_align(
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<snd_pcm_uframes_t> val,
  ) {
    return _snd_pcm_hw_params_get_min_align(
      params,
      val,
    );
  }

  late final _snd_pcm_hw_params_get_min_alignPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_pcm_hw_params_t>,
                  ffi.Pointer<snd_pcm_uframes_t>)>>(
      'snd_pcm_hw_params_get_min_align');
  late final _snd_pcm_hw_params_get_min_align =
      _snd_pcm_hw_params_get_min_alignPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<snd_pcm_uframes_t>)>();

  int snd_pcm_sw_params_sizeof() {
    return _snd_pcm_sw_params_sizeof();
  }

  late final _snd_pcm_sw_params_sizeofPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>(
          'snd_pcm_sw_params_sizeof');
  late final _snd_pcm_sw_params_sizeof =
      _snd_pcm_sw_params_sizeofPtr.asFunction<int Function()>();

  int snd_pcm_sw_params_malloc(
    ffi.Pointer<ffi.Pointer<snd_pcm_sw_params_t>> ptr,
  ) {
    return _snd_pcm_sw_params_malloc(
      ptr,
    );
  }

  late final _snd_pcm_sw_params_mallocPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Pointer<snd_pcm_sw_params_t>>)>>(
      'snd_pcm_sw_params_malloc');
  late final _snd_pcm_sw_params_malloc =
      _snd_pcm_sw_params_mallocPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<snd_pcm_sw_params_t>>)>();

  void snd_pcm_sw_params_free(
    ffi.Pointer<snd_pcm_sw_params_t> obj,
  ) {
    return _snd_pcm_sw_params_free(
      obj,
    );
  }

  late final _snd_pcm_sw_params_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<snd_pcm_sw_params_t>)>>('snd_pcm_sw_params_free');
  late final _snd_pcm_sw_params_free = _snd_pcm_sw_params_freePtr
      .asFunction<void Function(ffi.Pointer<snd_pcm_sw_params_t>)>();

  void snd_pcm_sw_params_copy(
    ffi.Pointer<snd_pcm_sw_params_t> dst,
    ffi.Pointer<snd_pcm_sw_params_t> src,
  ) {
    return _snd_pcm_sw_params_copy(
      dst,
      src,
    );
  }

  late final _snd_pcm_sw_params_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_pcm_sw_params_t>,
              ffi.Pointer<snd_pcm_sw_params_t>)>>('snd_pcm_sw_params_copy');
  late final _snd_pcm_sw_params_copy = _snd_pcm_sw_params_copyPtr.asFunction<
      void Function(ffi.Pointer<snd_pcm_sw_params_t>,
          ffi.Pointer<snd_pcm_sw_params_t>)>();

  int snd_pcm_sw_params_get_boundary(
    ffi.Pointer<snd_pcm_sw_params_t> params,
    ffi.Pointer<snd_pcm_uframes_t> val,
  ) {
    return _snd_pcm_sw_params_get_boundary(
      params,
      val,
    );
  }

  late final _snd_pcm_sw_params_get_boundaryPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_pcm_sw_params_t>,
                  ffi.Pointer<snd_pcm_uframes_t>)>>(
      'snd_pcm_sw_params_get_boundary');
  late final _snd_pcm_sw_params_get_boundary =
      _snd_pcm_sw_params_get_boundaryPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_sw_params_t>,
              ffi.Pointer<snd_pcm_uframes_t>)>();

  int snd_pcm_sw_params_set_tstamp_mode(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_sw_params_t> params,
    int val,
  ) {
    return _snd_pcm_sw_params_set_tstamp_mode(
      pcm,
      params,
      val,
    );
  }

  late final _snd_pcm_sw_params_set_tstamp_modePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_sw_params_t>,
              ffi.Int32)>>('snd_pcm_sw_params_set_tstamp_mode');
  late final _snd_pcm_sw_params_set_tstamp_mode =
      _snd_pcm_sw_params_set_tstamp_modePtr.asFunction<
          int Function(
              ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_sw_params_t>, int)>();

  int snd_pcm_sw_params_get_tstamp_mode(
    ffi.Pointer<snd_pcm_sw_params_t> params,
    ffi.Pointer<ffi.Int32> val,
  ) {
    return _snd_pcm_sw_params_get_tstamp_mode(
      params,
      val,
    );
  }

  late final _snd_pcm_sw_params_get_tstamp_modePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_pcm_sw_params_t>,
              ffi.Pointer<ffi.Int32>)>>('snd_pcm_sw_params_get_tstamp_mode');
  late final _snd_pcm_sw_params_get_tstamp_mode =
      _snd_pcm_sw_params_get_tstamp_modePtr.asFunction<
          int Function(
              ffi.Pointer<snd_pcm_sw_params_t>, ffi.Pointer<ffi.Int32>)>();

  int snd_pcm_sw_params_set_tstamp_type(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_sw_params_t> params,
    int val,
  ) {
    return _snd_pcm_sw_params_set_tstamp_type(
      pcm,
      params,
      val,
    );
  }

  late final _snd_pcm_sw_params_set_tstamp_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_sw_params_t>,
              ffi.Int32)>>('snd_pcm_sw_params_set_tstamp_type');
  late final _snd_pcm_sw_params_set_tstamp_type =
      _snd_pcm_sw_params_set_tstamp_typePtr.asFunction<
          int Function(
              ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_sw_params_t>, int)>();

  int snd_pcm_sw_params_get_tstamp_type(
    ffi.Pointer<snd_pcm_sw_params_t> params,
    ffi.Pointer<ffi.Int32> val,
  ) {
    return _snd_pcm_sw_params_get_tstamp_type(
      params,
      val,
    );
  }

  late final _snd_pcm_sw_params_get_tstamp_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_pcm_sw_params_t>,
              ffi.Pointer<ffi.Int32>)>>('snd_pcm_sw_params_get_tstamp_type');
  late final _snd_pcm_sw_params_get_tstamp_type =
      _snd_pcm_sw_params_get_tstamp_typePtr.asFunction<
          int Function(
              ffi.Pointer<snd_pcm_sw_params_t>, ffi.Pointer<ffi.Int32>)>();

  int snd_pcm_sw_params_set_avail_min(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_sw_params_t> params,
    int val,
  ) {
    return _snd_pcm_sw_params_set_avail_min(
      pcm,
      params,
      val,
    );
  }

  late final _snd_pcm_sw_params_set_avail_minPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_sw_params_t>,
              snd_pcm_uframes_t)>>('snd_pcm_sw_params_set_avail_min');
  late final _snd_pcm_sw_params_set_avail_min =
      _snd_pcm_sw_params_set_avail_minPtr.asFunction<
          int Function(
              ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_sw_params_t>, int)>();

  int snd_pcm_sw_params_get_avail_min(
    ffi.Pointer<snd_pcm_sw_params_t> params,
    ffi.Pointer<snd_pcm_uframes_t> val,
  ) {
    return _snd_pcm_sw_params_get_avail_min(
      params,
      val,
    );
  }

  late final _snd_pcm_sw_params_get_avail_minPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_pcm_sw_params_t>,
                  ffi.Pointer<snd_pcm_uframes_t>)>>(
      'snd_pcm_sw_params_get_avail_min');
  late final _snd_pcm_sw_params_get_avail_min =
      _snd_pcm_sw_params_get_avail_minPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_sw_params_t>,
              ffi.Pointer<snd_pcm_uframes_t>)>();

  int snd_pcm_sw_params_set_period_event(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_sw_params_t> params,
    int val,
  ) {
    return _snd_pcm_sw_params_set_period_event(
      pcm,
      params,
      val,
    );
  }

  late final _snd_pcm_sw_params_set_period_eventPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_sw_params_t>,
              ffi.Int)>>('snd_pcm_sw_params_set_period_event');
  late final _snd_pcm_sw_params_set_period_event =
      _snd_pcm_sw_params_set_period_eventPtr.asFunction<
          int Function(
              ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_sw_params_t>, int)>();

  int snd_pcm_sw_params_get_period_event(
    ffi.Pointer<snd_pcm_sw_params_t> params,
    ffi.Pointer<ffi.Int> val,
  ) {
    return _snd_pcm_sw_params_get_period_event(
      params,
      val,
    );
  }

  late final _snd_pcm_sw_params_get_period_eventPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_pcm_sw_params_t>,
              ffi.Pointer<ffi.Int>)>>('snd_pcm_sw_params_get_period_event');
  late final _snd_pcm_sw_params_get_period_event =
      _snd_pcm_sw_params_get_period_eventPtr.asFunction<
          int Function(
              ffi.Pointer<snd_pcm_sw_params_t>, ffi.Pointer<ffi.Int>)>();

  int snd_pcm_sw_params_set_start_threshold(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_sw_params_t> params,
    int val,
  ) {
    return _snd_pcm_sw_params_set_start_threshold(
      pcm,
      params,
      val,
    );
  }

  late final _snd_pcm_sw_params_set_start_thresholdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_sw_params_t>,
              snd_pcm_uframes_t)>>('snd_pcm_sw_params_set_start_threshold');
  late final _snd_pcm_sw_params_set_start_threshold =
      _snd_pcm_sw_params_set_start_thresholdPtr.asFunction<
          int Function(
              ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_sw_params_t>, int)>();

  int snd_pcm_sw_params_get_start_threshold(
    ffi.Pointer<snd_pcm_sw_params_t> paramsm,
    ffi.Pointer<snd_pcm_uframes_t> val,
  ) {
    return _snd_pcm_sw_params_get_start_threshold(
      paramsm,
      val,
    );
  }

  late final _snd_pcm_sw_params_get_start_thresholdPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_pcm_sw_params_t>,
                  ffi.Pointer<snd_pcm_uframes_t>)>>(
      'snd_pcm_sw_params_get_start_threshold');
  late final _snd_pcm_sw_params_get_start_threshold =
      _snd_pcm_sw_params_get_start_thresholdPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_sw_params_t>,
              ffi.Pointer<snd_pcm_uframes_t>)>();

  int snd_pcm_sw_params_set_stop_threshold(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_sw_params_t> params,
    int val,
  ) {
    return _snd_pcm_sw_params_set_stop_threshold(
      pcm,
      params,
      val,
    );
  }

  late final _snd_pcm_sw_params_set_stop_thresholdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_sw_params_t>,
              snd_pcm_uframes_t)>>('snd_pcm_sw_params_set_stop_threshold');
  late final _snd_pcm_sw_params_set_stop_threshold =
      _snd_pcm_sw_params_set_stop_thresholdPtr.asFunction<
          int Function(
              ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_sw_params_t>, int)>();

  int snd_pcm_sw_params_get_stop_threshold(
    ffi.Pointer<snd_pcm_sw_params_t> params,
    ffi.Pointer<snd_pcm_uframes_t> val,
  ) {
    return _snd_pcm_sw_params_get_stop_threshold(
      params,
      val,
    );
  }

  late final _snd_pcm_sw_params_get_stop_thresholdPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_pcm_sw_params_t>,
                  ffi.Pointer<snd_pcm_uframes_t>)>>(
      'snd_pcm_sw_params_get_stop_threshold');
  late final _snd_pcm_sw_params_get_stop_threshold =
      _snd_pcm_sw_params_get_stop_thresholdPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_sw_params_t>,
              ffi.Pointer<snd_pcm_uframes_t>)>();

  int snd_pcm_sw_params_set_silence_threshold(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_sw_params_t> params,
    int val,
  ) {
    return _snd_pcm_sw_params_set_silence_threshold(
      pcm,
      params,
      val,
    );
  }

  late final _snd_pcm_sw_params_set_silence_thresholdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_sw_params_t>,
              snd_pcm_uframes_t)>>('snd_pcm_sw_params_set_silence_threshold');
  late final _snd_pcm_sw_params_set_silence_threshold =
      _snd_pcm_sw_params_set_silence_thresholdPtr.asFunction<
          int Function(
              ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_sw_params_t>, int)>();

  int snd_pcm_sw_params_get_silence_threshold(
    ffi.Pointer<snd_pcm_sw_params_t> params,
    ffi.Pointer<snd_pcm_uframes_t> val,
  ) {
    return _snd_pcm_sw_params_get_silence_threshold(
      params,
      val,
    );
  }

  late final _snd_pcm_sw_params_get_silence_thresholdPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_pcm_sw_params_t>,
                  ffi.Pointer<snd_pcm_uframes_t>)>>(
      'snd_pcm_sw_params_get_silence_threshold');
  late final _snd_pcm_sw_params_get_silence_threshold =
      _snd_pcm_sw_params_get_silence_thresholdPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_sw_params_t>,
              ffi.Pointer<snd_pcm_uframes_t>)>();

  int snd_pcm_sw_params_set_silence_size(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_sw_params_t> params,
    int val,
  ) {
    return _snd_pcm_sw_params_set_silence_size(
      pcm,
      params,
      val,
    );
  }

  late final _snd_pcm_sw_params_set_silence_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_sw_params_t>,
              snd_pcm_uframes_t)>>('snd_pcm_sw_params_set_silence_size');
  late final _snd_pcm_sw_params_set_silence_size =
      _snd_pcm_sw_params_set_silence_sizePtr.asFunction<
          int Function(
              ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_sw_params_t>, int)>();

  int snd_pcm_sw_params_get_silence_size(
    ffi.Pointer<snd_pcm_sw_params_t> params,
    ffi.Pointer<snd_pcm_uframes_t> val,
  ) {
    return _snd_pcm_sw_params_get_silence_size(
      params,
      val,
    );
  }

  late final _snd_pcm_sw_params_get_silence_sizePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_pcm_sw_params_t>,
                  ffi.Pointer<snd_pcm_uframes_t>)>>(
      'snd_pcm_sw_params_get_silence_size');
  late final _snd_pcm_sw_params_get_silence_size =
      _snd_pcm_sw_params_get_silence_sizePtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_sw_params_t>,
              ffi.Pointer<snd_pcm_uframes_t>)>();

  int snd_pcm_access_mask_sizeof() {
    return _snd_pcm_access_mask_sizeof();
  }

  late final _snd_pcm_access_mask_sizeofPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>(
          'snd_pcm_access_mask_sizeof');
  late final _snd_pcm_access_mask_sizeof =
      _snd_pcm_access_mask_sizeofPtr.asFunction<int Function()>();

  int snd_pcm_access_mask_malloc(
    ffi.Pointer<ffi.Pointer<snd_pcm_access_mask_t>> ptr,
  ) {
    return _snd_pcm_access_mask_malloc(
      ptr,
    );
  }

  late final _snd_pcm_access_mask_mallocPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Pointer<snd_pcm_access_mask_t>>)>>(
      'snd_pcm_access_mask_malloc');
  late final _snd_pcm_access_mask_malloc =
      _snd_pcm_access_mask_mallocPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<snd_pcm_access_mask_t>>)>();

  void snd_pcm_access_mask_free(
    ffi.Pointer<snd_pcm_access_mask_t> obj,
  ) {
    return _snd_pcm_access_mask_free(
      obj,
    );
  }

  late final _snd_pcm_access_mask_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<snd_pcm_access_mask_t>)>>('snd_pcm_access_mask_free');
  late final _snd_pcm_access_mask_free = _snd_pcm_access_mask_freePtr
      .asFunction<void Function(ffi.Pointer<snd_pcm_access_mask_t>)>();

  void snd_pcm_access_mask_copy(
    ffi.Pointer<snd_pcm_access_mask_t> dst,
    ffi.Pointer<snd_pcm_access_mask_t> src,
  ) {
    return _snd_pcm_access_mask_copy(
      dst,
      src,
    );
  }

  late final _snd_pcm_access_mask_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_pcm_access_mask_t>,
              ffi.Pointer<snd_pcm_access_mask_t>)>>('snd_pcm_access_mask_copy');
  late final _snd_pcm_access_mask_copy =
      _snd_pcm_access_mask_copyPtr.asFunction<
          void Function(ffi.Pointer<snd_pcm_access_mask_t>,
              ffi.Pointer<snd_pcm_access_mask_t>)>();

  void snd_pcm_access_mask_none(
    ffi.Pointer<snd_pcm_access_mask_t> mask,
  ) {
    return _snd_pcm_access_mask_none(
      mask,
    );
  }

  late final _snd_pcm_access_mask_nonePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<snd_pcm_access_mask_t>)>>('snd_pcm_access_mask_none');
  late final _snd_pcm_access_mask_none = _snd_pcm_access_mask_nonePtr
      .asFunction<void Function(ffi.Pointer<snd_pcm_access_mask_t>)>();

  void snd_pcm_access_mask_any(
    ffi.Pointer<snd_pcm_access_mask_t> mask,
  ) {
    return _snd_pcm_access_mask_any(
      mask,
    );
  }

  late final _snd_pcm_access_mask_anyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<snd_pcm_access_mask_t>)>>('snd_pcm_access_mask_any');
  late final _snd_pcm_access_mask_any = _snd_pcm_access_mask_anyPtr
      .asFunction<void Function(ffi.Pointer<snd_pcm_access_mask_t>)>();

  int snd_pcm_access_mask_test(
    ffi.Pointer<snd_pcm_access_mask_t> mask,
    int val,
  ) {
    return _snd_pcm_access_mask_test(
      mask,
      val,
    );
  }

  late final _snd_pcm_access_mask_testPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_pcm_access_mask_t>,
              ffi.Int32)>>('snd_pcm_access_mask_test');
  late final _snd_pcm_access_mask_test = _snd_pcm_access_mask_testPtr
      .asFunction<int Function(ffi.Pointer<snd_pcm_access_mask_t>, int)>();

  int snd_pcm_access_mask_empty(
    ffi.Pointer<snd_pcm_access_mask_t> mask,
  ) {
    return _snd_pcm_access_mask_empty(
      mask,
    );
  }

  late final _snd_pcm_access_mask_emptyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_pcm_access_mask_t>)>>(
      'snd_pcm_access_mask_empty');
  late final _snd_pcm_access_mask_empty = _snd_pcm_access_mask_emptyPtr
      .asFunction<int Function(ffi.Pointer<snd_pcm_access_mask_t>)>();

  void snd_pcm_access_mask_set(
    ffi.Pointer<snd_pcm_access_mask_t> mask,
    int val,
  ) {
    return _snd_pcm_access_mask_set(
      mask,
      val,
    );
  }

  late final _snd_pcm_access_mask_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_pcm_access_mask_t>,
              ffi.Int32)>>('snd_pcm_access_mask_set');
  late final _snd_pcm_access_mask_set = _snd_pcm_access_mask_setPtr
      .asFunction<void Function(ffi.Pointer<snd_pcm_access_mask_t>, int)>();

  void snd_pcm_access_mask_reset(
    ffi.Pointer<snd_pcm_access_mask_t> mask,
    int val,
  ) {
    return _snd_pcm_access_mask_reset(
      mask,
      val,
    );
  }

  late final _snd_pcm_access_mask_resetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_pcm_access_mask_t>,
              ffi.Int32)>>('snd_pcm_access_mask_reset');
  late final _snd_pcm_access_mask_reset = _snd_pcm_access_mask_resetPtr
      .asFunction<void Function(ffi.Pointer<snd_pcm_access_mask_t>, int)>();

  int snd_pcm_format_mask_sizeof() {
    return _snd_pcm_format_mask_sizeof();
  }

  late final _snd_pcm_format_mask_sizeofPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>(
          'snd_pcm_format_mask_sizeof');
  late final _snd_pcm_format_mask_sizeof =
      _snd_pcm_format_mask_sizeofPtr.asFunction<int Function()>();

  int snd_pcm_format_mask_malloc(
    ffi.Pointer<ffi.Pointer<snd_pcm_format_mask_t>> ptr,
  ) {
    return _snd_pcm_format_mask_malloc(
      ptr,
    );
  }

  late final _snd_pcm_format_mask_mallocPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Pointer<snd_pcm_format_mask_t>>)>>(
      'snd_pcm_format_mask_malloc');
  late final _snd_pcm_format_mask_malloc =
      _snd_pcm_format_mask_mallocPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<snd_pcm_format_mask_t>>)>();

  void snd_pcm_format_mask_free(
    ffi.Pointer<snd_pcm_format_mask_t> obj,
  ) {
    return _snd_pcm_format_mask_free(
      obj,
    );
  }

  late final _snd_pcm_format_mask_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<snd_pcm_format_mask_t>)>>('snd_pcm_format_mask_free');
  late final _snd_pcm_format_mask_free = _snd_pcm_format_mask_freePtr
      .asFunction<void Function(ffi.Pointer<snd_pcm_format_mask_t>)>();

  void snd_pcm_format_mask_copy(
    ffi.Pointer<snd_pcm_format_mask_t> dst,
    ffi.Pointer<snd_pcm_format_mask_t> src,
  ) {
    return _snd_pcm_format_mask_copy(
      dst,
      src,
    );
  }

  late final _snd_pcm_format_mask_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_pcm_format_mask_t>,
              ffi.Pointer<snd_pcm_format_mask_t>)>>('snd_pcm_format_mask_copy');
  late final _snd_pcm_format_mask_copy =
      _snd_pcm_format_mask_copyPtr.asFunction<
          void Function(ffi.Pointer<snd_pcm_format_mask_t>,
              ffi.Pointer<snd_pcm_format_mask_t>)>();

  void snd_pcm_format_mask_none(
    ffi.Pointer<snd_pcm_format_mask_t> mask,
  ) {
    return _snd_pcm_format_mask_none(
      mask,
    );
  }

  late final _snd_pcm_format_mask_nonePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<snd_pcm_format_mask_t>)>>('snd_pcm_format_mask_none');
  late final _snd_pcm_format_mask_none = _snd_pcm_format_mask_nonePtr
      .asFunction<void Function(ffi.Pointer<snd_pcm_format_mask_t>)>();

  void snd_pcm_format_mask_any(
    ffi.Pointer<snd_pcm_format_mask_t> mask,
  ) {
    return _snd_pcm_format_mask_any(
      mask,
    );
  }

  late final _snd_pcm_format_mask_anyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<snd_pcm_format_mask_t>)>>('snd_pcm_format_mask_any');
  late final _snd_pcm_format_mask_any = _snd_pcm_format_mask_anyPtr
      .asFunction<void Function(ffi.Pointer<snd_pcm_format_mask_t>)>();

  int snd_pcm_format_mask_test(
    ffi.Pointer<snd_pcm_format_mask_t> mask,
    int val,
  ) {
    return _snd_pcm_format_mask_test(
      mask,
      val,
    );
  }

  late final _snd_pcm_format_mask_testPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_pcm_format_mask_t>,
              ffi.Int32)>>('snd_pcm_format_mask_test');
  late final _snd_pcm_format_mask_test = _snd_pcm_format_mask_testPtr
      .asFunction<int Function(ffi.Pointer<snd_pcm_format_mask_t>, int)>();

  int snd_pcm_format_mask_empty(
    ffi.Pointer<snd_pcm_format_mask_t> mask,
  ) {
    return _snd_pcm_format_mask_empty(
      mask,
    );
  }

  late final _snd_pcm_format_mask_emptyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_pcm_format_mask_t>)>>(
      'snd_pcm_format_mask_empty');
  late final _snd_pcm_format_mask_empty = _snd_pcm_format_mask_emptyPtr
      .asFunction<int Function(ffi.Pointer<snd_pcm_format_mask_t>)>();

  void snd_pcm_format_mask_set(
    ffi.Pointer<snd_pcm_format_mask_t> mask,
    int val,
  ) {
    return _snd_pcm_format_mask_set(
      mask,
      val,
    );
  }

  late final _snd_pcm_format_mask_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_pcm_format_mask_t>,
              ffi.Int32)>>('snd_pcm_format_mask_set');
  late final _snd_pcm_format_mask_set = _snd_pcm_format_mask_setPtr
      .asFunction<void Function(ffi.Pointer<snd_pcm_format_mask_t>, int)>();

  void snd_pcm_format_mask_reset(
    ffi.Pointer<snd_pcm_format_mask_t> mask,
    int val,
  ) {
    return _snd_pcm_format_mask_reset(
      mask,
      val,
    );
  }

  late final _snd_pcm_format_mask_resetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_pcm_format_mask_t>,
              ffi.Int32)>>('snd_pcm_format_mask_reset');
  late final _snd_pcm_format_mask_reset = _snd_pcm_format_mask_resetPtr
      .asFunction<void Function(ffi.Pointer<snd_pcm_format_mask_t>, int)>();

  int snd_pcm_subformat_mask_sizeof() {
    return _snd_pcm_subformat_mask_sizeof();
  }

  late final _snd_pcm_subformat_mask_sizeofPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>(
          'snd_pcm_subformat_mask_sizeof');
  late final _snd_pcm_subformat_mask_sizeof =
      _snd_pcm_subformat_mask_sizeofPtr.asFunction<int Function()>();

  int snd_pcm_subformat_mask_malloc(
    ffi.Pointer<ffi.Pointer<snd_pcm_subformat_mask_t>> ptr,
  ) {
    return _snd_pcm_subformat_mask_malloc(
      ptr,
    );
  }

  late final _snd_pcm_subformat_mask_mallocPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Pointer<snd_pcm_subformat_mask_t>>)>>(
      'snd_pcm_subformat_mask_malloc');
  late final _snd_pcm_subformat_mask_malloc =
      _snd_pcm_subformat_mask_mallocPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<snd_pcm_subformat_mask_t>>)>();

  void snd_pcm_subformat_mask_free(
    ffi.Pointer<snd_pcm_subformat_mask_t> obj,
  ) {
    return _snd_pcm_subformat_mask_free(
      obj,
    );
  }

  late final _snd_pcm_subformat_mask_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<snd_pcm_subformat_mask_t>)>>(
      'snd_pcm_subformat_mask_free');
  late final _snd_pcm_subformat_mask_free = _snd_pcm_subformat_mask_freePtr
      .asFunction<void Function(ffi.Pointer<snd_pcm_subformat_mask_t>)>();

  void snd_pcm_subformat_mask_copy(
    ffi.Pointer<snd_pcm_subformat_mask_t> dst,
    ffi.Pointer<snd_pcm_subformat_mask_t> src,
  ) {
    return _snd_pcm_subformat_mask_copy(
      dst,
      src,
    );
  }

  late final _snd_pcm_subformat_mask_copyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<snd_pcm_subformat_mask_t>,
                  ffi.Pointer<snd_pcm_subformat_mask_t>)>>(
      'snd_pcm_subformat_mask_copy');
  late final _snd_pcm_subformat_mask_copy =
      _snd_pcm_subformat_mask_copyPtr.asFunction<
          void Function(ffi.Pointer<snd_pcm_subformat_mask_t>,
              ffi.Pointer<snd_pcm_subformat_mask_t>)>();

  void snd_pcm_subformat_mask_none(
    ffi.Pointer<snd_pcm_subformat_mask_t> mask,
  ) {
    return _snd_pcm_subformat_mask_none(
      mask,
    );
  }

  late final _snd_pcm_subformat_mask_nonePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<snd_pcm_subformat_mask_t>)>>(
      'snd_pcm_subformat_mask_none');
  late final _snd_pcm_subformat_mask_none = _snd_pcm_subformat_mask_nonePtr
      .asFunction<void Function(ffi.Pointer<snd_pcm_subformat_mask_t>)>();

  void snd_pcm_subformat_mask_any(
    ffi.Pointer<snd_pcm_subformat_mask_t> mask,
  ) {
    return _snd_pcm_subformat_mask_any(
      mask,
    );
  }

  late final _snd_pcm_subformat_mask_anyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<snd_pcm_subformat_mask_t>)>>(
      'snd_pcm_subformat_mask_any');
  late final _snd_pcm_subformat_mask_any = _snd_pcm_subformat_mask_anyPtr
      .asFunction<void Function(ffi.Pointer<snd_pcm_subformat_mask_t>)>();

  int snd_pcm_subformat_mask_test(
    ffi.Pointer<snd_pcm_subformat_mask_t> mask,
    int val,
  ) {
    return _snd_pcm_subformat_mask_test(
      mask,
      val,
    );
  }

  late final _snd_pcm_subformat_mask_testPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_pcm_subformat_mask_t>,
              ffi.Int32)>>('snd_pcm_subformat_mask_test');
  late final _snd_pcm_subformat_mask_test = _snd_pcm_subformat_mask_testPtr
      .asFunction<int Function(ffi.Pointer<snd_pcm_subformat_mask_t>, int)>();

  int snd_pcm_subformat_mask_empty(
    ffi.Pointer<snd_pcm_subformat_mask_t> mask,
  ) {
    return _snd_pcm_subformat_mask_empty(
      mask,
    );
  }

  late final _snd_pcm_subformat_mask_emptyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_pcm_subformat_mask_t>)>>(
      'snd_pcm_subformat_mask_empty');
  late final _snd_pcm_subformat_mask_empty = _snd_pcm_subformat_mask_emptyPtr
      .asFunction<int Function(ffi.Pointer<snd_pcm_subformat_mask_t>)>();

  void snd_pcm_subformat_mask_set(
    ffi.Pointer<snd_pcm_subformat_mask_t> mask,
    int val,
  ) {
    return _snd_pcm_subformat_mask_set(
      mask,
      val,
    );
  }

  late final _snd_pcm_subformat_mask_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_pcm_subformat_mask_t>,
              ffi.Int32)>>('snd_pcm_subformat_mask_set');
  late final _snd_pcm_subformat_mask_set = _snd_pcm_subformat_mask_setPtr
      .asFunction<void Function(ffi.Pointer<snd_pcm_subformat_mask_t>, int)>();

  void snd_pcm_subformat_mask_reset(
    ffi.Pointer<snd_pcm_subformat_mask_t> mask,
    int val,
  ) {
    return _snd_pcm_subformat_mask_reset(
      mask,
      val,
    );
  }

  late final _snd_pcm_subformat_mask_resetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_pcm_subformat_mask_t>,
              ffi.Int32)>>('snd_pcm_subformat_mask_reset');
  late final _snd_pcm_subformat_mask_reset = _snd_pcm_subformat_mask_resetPtr
      .asFunction<void Function(ffi.Pointer<snd_pcm_subformat_mask_t>, int)>();

  int snd_pcm_status_sizeof() {
    return _snd_pcm_status_sizeof();
  }

  late final _snd_pcm_status_sizeofPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('snd_pcm_status_sizeof');
  late final _snd_pcm_status_sizeof =
      _snd_pcm_status_sizeofPtr.asFunction<int Function()>();

  int snd_pcm_status_malloc(
    ffi.Pointer<ffi.Pointer<snd_pcm_status_t>> ptr,
  ) {
    return _snd_pcm_status_malloc(
      ptr,
    );
  }

  late final _snd_pcm_status_mallocPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Pointer<snd_pcm_status_t>>)>>(
      'snd_pcm_status_malloc');
  late final _snd_pcm_status_malloc = _snd_pcm_status_mallocPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<snd_pcm_status_t>>)>();

  void snd_pcm_status_free(
    ffi.Pointer<snd_pcm_status_t> obj,
  ) {
    return _snd_pcm_status_free(
      obj,
    );
  }

  late final _snd_pcm_status_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<snd_pcm_status_t>)>>(
      'snd_pcm_status_free');
  late final _snd_pcm_status_free = _snd_pcm_status_freePtr
      .asFunction<void Function(ffi.Pointer<snd_pcm_status_t>)>();

  void snd_pcm_status_copy(
    ffi.Pointer<snd_pcm_status_t> dst,
    ffi.Pointer<snd_pcm_status_t> src,
  ) {
    return _snd_pcm_status_copy(
      dst,
      src,
    );
  }

  late final _snd_pcm_status_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_pcm_status_t>,
              ffi.Pointer<snd_pcm_status_t>)>>('snd_pcm_status_copy');
  late final _snd_pcm_status_copy = _snd_pcm_status_copyPtr.asFunction<
      void Function(
          ffi.Pointer<snd_pcm_status_t>, ffi.Pointer<snd_pcm_status_t>)>();

  int snd_pcm_status_get_state(
    ffi.Pointer<snd_pcm_status_t> obj,
  ) {
    return _snd_pcm_status_get_state(
      obj,
    );
  }

  late final _snd_pcm_status_get_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<snd_pcm_status_t>)>>('snd_pcm_status_get_state');
  late final _snd_pcm_status_get_state = _snd_pcm_status_get_statePtr
      .asFunction<int Function(ffi.Pointer<snd_pcm_status_t>)>();

  void snd_pcm_status_get_trigger_tstamp(
    ffi.Pointer<snd_pcm_status_t> obj,
    ffi.Pointer<snd_timestamp_t> ptr,
  ) {
    return _snd_pcm_status_get_trigger_tstamp(
      obj,
      ptr,
    );
  }

  late final _snd_pcm_status_get_trigger_tstampPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<snd_pcm_status_t>,
                  ffi.Pointer<snd_timestamp_t>)>>(
      'snd_pcm_status_get_trigger_tstamp');
  late final _snd_pcm_status_get_trigger_tstamp =
      _snd_pcm_status_get_trigger_tstampPtr.asFunction<
          void Function(
              ffi.Pointer<snd_pcm_status_t>, ffi.Pointer<snd_timestamp_t>)>();

  void snd_pcm_status_get_trigger_htstamp(
    ffi.Pointer<snd_pcm_status_t> obj,
    ffi.Pointer<snd_htimestamp_t> ptr,
  ) {
    return _snd_pcm_status_get_trigger_htstamp(
      obj,
      ptr,
    );
  }

  late final _snd_pcm_status_get_trigger_htstampPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<snd_pcm_status_t>,
                  ffi.Pointer<snd_htimestamp_t>)>>(
      'snd_pcm_status_get_trigger_htstamp');
  late final _snd_pcm_status_get_trigger_htstamp =
      _snd_pcm_status_get_trigger_htstampPtr.asFunction<
          void Function(
              ffi.Pointer<snd_pcm_status_t>, ffi.Pointer<snd_htimestamp_t>)>();

  void snd_pcm_status_get_tstamp(
    ffi.Pointer<snd_pcm_status_t> obj,
    ffi.Pointer<snd_timestamp_t> ptr,
  ) {
    return _snd_pcm_status_get_tstamp(
      obj,
      ptr,
    );
  }

  late final _snd_pcm_status_get_tstampPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_pcm_status_t>,
              ffi.Pointer<snd_timestamp_t>)>>('snd_pcm_status_get_tstamp');
  late final _snd_pcm_status_get_tstamp =
      _snd_pcm_status_get_tstampPtr.asFunction<
          void Function(
              ffi.Pointer<snd_pcm_status_t>, ffi.Pointer<snd_timestamp_t>)>();

  void snd_pcm_status_get_htstamp(
    ffi.Pointer<snd_pcm_status_t> obj,
    ffi.Pointer<snd_htimestamp_t> ptr,
  ) {
    return _snd_pcm_status_get_htstamp(
      obj,
      ptr,
    );
  }

  late final _snd_pcm_status_get_htstampPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_pcm_status_t>,
              ffi.Pointer<snd_htimestamp_t>)>>('snd_pcm_status_get_htstamp');
  late final _snd_pcm_status_get_htstamp =
      _snd_pcm_status_get_htstampPtr.asFunction<
          void Function(
              ffi.Pointer<snd_pcm_status_t>, ffi.Pointer<snd_htimestamp_t>)>();

  void snd_pcm_status_get_audio_htstamp(
    ffi.Pointer<snd_pcm_status_t> obj,
    ffi.Pointer<snd_htimestamp_t> ptr,
  ) {
    return _snd_pcm_status_get_audio_htstamp(
      obj,
      ptr,
    );
  }

  late final _snd_pcm_status_get_audio_htstampPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<snd_pcm_status_t>,
                  ffi.Pointer<snd_htimestamp_t>)>>(
      'snd_pcm_status_get_audio_htstamp');
  late final _snd_pcm_status_get_audio_htstamp =
      _snd_pcm_status_get_audio_htstampPtr.asFunction<
          void Function(
              ffi.Pointer<snd_pcm_status_t>, ffi.Pointer<snd_htimestamp_t>)>();

  void snd_pcm_status_get_driver_htstamp(
    ffi.Pointer<snd_pcm_status_t> obj,
    ffi.Pointer<snd_htimestamp_t> ptr,
  ) {
    return _snd_pcm_status_get_driver_htstamp(
      obj,
      ptr,
    );
  }

  late final _snd_pcm_status_get_driver_htstampPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<snd_pcm_status_t>,
                  ffi.Pointer<snd_htimestamp_t>)>>(
      'snd_pcm_status_get_driver_htstamp');
  late final _snd_pcm_status_get_driver_htstamp =
      _snd_pcm_status_get_driver_htstampPtr.asFunction<
          void Function(
              ffi.Pointer<snd_pcm_status_t>, ffi.Pointer<snd_htimestamp_t>)>();

  void snd_pcm_status_get_audio_htstamp_report(
    ffi.Pointer<snd_pcm_status_t> obj,
    ffi.Pointer<snd_pcm_audio_tstamp_report_t> audio_tstamp_report,
  ) {
    return _snd_pcm_status_get_audio_htstamp_report(
      obj,
      audio_tstamp_report,
    );
  }

  late final _snd_pcm_status_get_audio_htstamp_reportPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<snd_pcm_status_t>,
                  ffi.Pointer<snd_pcm_audio_tstamp_report_t>)>>(
      'snd_pcm_status_get_audio_htstamp_report');
  late final _snd_pcm_status_get_audio_htstamp_report =
      _snd_pcm_status_get_audio_htstamp_reportPtr.asFunction<
          void Function(ffi.Pointer<snd_pcm_status_t>,
              ffi.Pointer<snd_pcm_audio_tstamp_report_t>)>();

  void snd_pcm_status_set_audio_htstamp_config(
    ffi.Pointer<snd_pcm_status_t> obj,
    ffi.Pointer<snd_pcm_audio_tstamp_config_t> audio_tstamp_config,
  ) {
    return _snd_pcm_status_set_audio_htstamp_config(
      obj,
      audio_tstamp_config,
    );
  }

  late final _snd_pcm_status_set_audio_htstamp_configPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<snd_pcm_status_t>,
                  ffi.Pointer<snd_pcm_audio_tstamp_config_t>)>>(
      'snd_pcm_status_set_audio_htstamp_config');
  late final _snd_pcm_status_set_audio_htstamp_config =
      _snd_pcm_status_set_audio_htstamp_configPtr.asFunction<
          void Function(ffi.Pointer<snd_pcm_status_t>,
              ffi.Pointer<snd_pcm_audio_tstamp_config_t>)>();

  int snd_pcm_status_get_delay(
    ffi.Pointer<snd_pcm_status_t> obj,
  ) {
    return _snd_pcm_status_get_delay(
      obj,
    );
  }

  late final _snd_pcm_status_get_delayPtr = _lookup<
      ffi.NativeFunction<
          snd_pcm_sframes_t Function(
              ffi.Pointer<snd_pcm_status_t>)>>('snd_pcm_status_get_delay');
  late final _snd_pcm_status_get_delay = _snd_pcm_status_get_delayPtr
      .asFunction<int Function(ffi.Pointer<snd_pcm_status_t>)>();

  int snd_pcm_status_get_avail(
    ffi.Pointer<snd_pcm_status_t> obj,
  ) {
    return _snd_pcm_status_get_avail(
      obj,
    );
  }

  late final _snd_pcm_status_get_availPtr = _lookup<
      ffi.NativeFunction<
          snd_pcm_uframes_t Function(
              ffi.Pointer<snd_pcm_status_t>)>>('snd_pcm_status_get_avail');
  late final _snd_pcm_status_get_avail = _snd_pcm_status_get_availPtr
      .asFunction<int Function(ffi.Pointer<snd_pcm_status_t>)>();

  int snd_pcm_status_get_avail_max(
    ffi.Pointer<snd_pcm_status_t> obj,
  ) {
    return _snd_pcm_status_get_avail_max(
      obj,
    );
  }

  late final _snd_pcm_status_get_avail_maxPtr = _lookup<
      ffi.NativeFunction<
          snd_pcm_uframes_t Function(
              ffi.Pointer<snd_pcm_status_t>)>>('snd_pcm_status_get_avail_max');
  late final _snd_pcm_status_get_avail_max = _snd_pcm_status_get_avail_maxPtr
      .asFunction<int Function(ffi.Pointer<snd_pcm_status_t>)>();

  int snd_pcm_status_get_overrange(
    ffi.Pointer<snd_pcm_status_t> obj,
  ) {
    return _snd_pcm_status_get_overrange(
      obj,
    );
  }

  late final _snd_pcm_status_get_overrangePtr = _lookup<
      ffi.NativeFunction<
          snd_pcm_uframes_t Function(
              ffi.Pointer<snd_pcm_status_t>)>>('snd_pcm_status_get_overrange');
  late final _snd_pcm_status_get_overrange = _snd_pcm_status_get_overrangePtr
      .asFunction<int Function(ffi.Pointer<snd_pcm_status_t>)>();

  ffi.Pointer<ffi.Char> snd_pcm_type_name(
    int type,
  ) {
    return _snd_pcm_type_name(
      type,
    );
  }

  late final _snd_pcm_type_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'snd_pcm_type_name');
  late final _snd_pcm_type_name =
      _snd_pcm_type_namePtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> snd_pcm_stream_name(
    int stream,
  ) {
    return _snd_pcm_stream_name(
      stream,
    );
  }

  late final _snd_pcm_stream_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'snd_pcm_stream_name');
  late final _snd_pcm_stream_name =
      _snd_pcm_stream_namePtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> snd_pcm_access_name(
    int _access,
  ) {
    return _snd_pcm_access_name(
      _access,
    );
  }

  late final _snd_pcm_access_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'snd_pcm_access_name');
  late final _snd_pcm_access_name =
      _snd_pcm_access_namePtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> snd_pcm_format_name(
    int format,
  ) {
    return _snd_pcm_format_name(
      format,
    );
  }

  late final _snd_pcm_format_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'snd_pcm_format_name');
  late final _snd_pcm_format_name =
      _snd_pcm_format_namePtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> snd_pcm_format_description(
    int format,
  ) {
    return _snd_pcm_format_description(
      format,
    );
  }

  late final _snd_pcm_format_descriptionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'snd_pcm_format_description');
  late final _snd_pcm_format_description = _snd_pcm_format_descriptionPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> snd_pcm_subformat_name(
    int subformat,
  ) {
    return _snd_pcm_subformat_name(
      subformat,
    );
  }

  late final _snd_pcm_subformat_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'snd_pcm_subformat_name');
  late final _snd_pcm_subformat_name = _snd_pcm_subformat_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> snd_pcm_subformat_description(
    int subformat,
  ) {
    return _snd_pcm_subformat_description(
      subformat,
    );
  }

  late final _snd_pcm_subformat_descriptionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'snd_pcm_subformat_description');
  late final _snd_pcm_subformat_description = _snd_pcm_subformat_descriptionPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int snd_pcm_format_value(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _snd_pcm_format_value(
      name,
    );
  }

  late final _snd_pcm_format_valuePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Char>)>>(
          'snd_pcm_format_value');
  late final _snd_pcm_format_value = _snd_pcm_format_valuePtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> snd_pcm_tstamp_mode_name(
    int mode,
  ) {
    return _snd_pcm_tstamp_mode_name(
      mode,
    );
  }

  late final _snd_pcm_tstamp_mode_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'snd_pcm_tstamp_mode_name');
  late final _snd_pcm_tstamp_mode_name = _snd_pcm_tstamp_mode_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> snd_pcm_state_name(
    int state,
  ) {
    return _snd_pcm_state_name(
      state,
    );
  }

  late final _snd_pcm_state_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'snd_pcm_state_name');
  late final _snd_pcm_state_name =
      _snd_pcm_state_namePtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int snd_pcm_dump(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_output_t> out,
  ) {
    return _snd_pcm_dump(
      pcm,
      out,
    );
  }

  late final _snd_pcm_dumpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_output_t>)>>('snd_pcm_dump');
  late final _snd_pcm_dump = _snd_pcm_dumpPtr.asFunction<
      int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_output_t>)>();

  int snd_pcm_dump_hw_setup(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_output_t> out,
  ) {
    return _snd_pcm_dump_hw_setup(
      pcm,
      out,
    );
  }

  late final _snd_pcm_dump_hw_setupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_output_t>)>>('snd_pcm_dump_hw_setup');
  late final _snd_pcm_dump_hw_setup = _snd_pcm_dump_hw_setupPtr.asFunction<
      int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_output_t>)>();

  int snd_pcm_dump_sw_setup(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_output_t> out,
  ) {
    return _snd_pcm_dump_sw_setup(
      pcm,
      out,
    );
  }

  late final _snd_pcm_dump_sw_setupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_output_t>)>>('snd_pcm_dump_sw_setup');
  late final _snd_pcm_dump_sw_setup = _snd_pcm_dump_sw_setupPtr.asFunction<
      int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_output_t>)>();

  int snd_pcm_dump_setup(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_output_t> out,
  ) {
    return _snd_pcm_dump_setup(
      pcm,
      out,
    );
  }

  late final _snd_pcm_dump_setupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_output_t>)>>('snd_pcm_dump_setup');
  late final _snd_pcm_dump_setup = _snd_pcm_dump_setupPtr.asFunction<
      int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_output_t>)>();

  int snd_pcm_hw_params_dump(
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<snd_output_t> out,
  ) {
    return _snd_pcm_hw_params_dump(
      params,
      out,
    );
  }

  late final _snd_pcm_hw_params_dumpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<snd_output_t>)>>('snd_pcm_hw_params_dump');
  late final _snd_pcm_hw_params_dump = _snd_pcm_hw_params_dumpPtr.asFunction<
      int Function(
          ffi.Pointer<snd_pcm_hw_params_t>, ffi.Pointer<snd_output_t>)>();

  int snd_pcm_sw_params_dump(
    ffi.Pointer<snd_pcm_sw_params_t> params,
    ffi.Pointer<snd_output_t> out,
  ) {
    return _snd_pcm_sw_params_dump(
      params,
      out,
    );
  }

  late final _snd_pcm_sw_params_dumpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_pcm_sw_params_t>,
              ffi.Pointer<snd_output_t>)>>('snd_pcm_sw_params_dump');
  late final _snd_pcm_sw_params_dump = _snd_pcm_sw_params_dumpPtr.asFunction<
      int Function(
          ffi.Pointer<snd_pcm_sw_params_t>, ffi.Pointer<snd_output_t>)>();

  int snd_pcm_status_dump(
    ffi.Pointer<snd_pcm_status_t> status,
    ffi.Pointer<snd_output_t> out,
  ) {
    return _snd_pcm_status_dump(
      status,
      out,
    );
  }

  late final _snd_pcm_status_dumpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_pcm_status_t>,
              ffi.Pointer<snd_output_t>)>>('snd_pcm_status_dump');
  late final _snd_pcm_status_dump = _snd_pcm_status_dumpPtr.asFunction<
      int Function(ffi.Pointer<snd_pcm_status_t>, ffi.Pointer<snd_output_t>)>();

  int snd_pcm_mmap_begin(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<ffi.Pointer<snd_pcm_channel_area_t>> areas,
    ffi.Pointer<snd_pcm_uframes_t> offset,
    ffi.Pointer<snd_pcm_uframes_t> frames,
  ) {
    return _snd_pcm_mmap_begin(
      pcm,
      areas,
      offset,
      frames,
    );
  }

  late final _snd_pcm_mmap_beginPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<ffi.Pointer<snd_pcm_channel_area_t>>,
              ffi.Pointer<snd_pcm_uframes_t>,
              ffi.Pointer<snd_pcm_uframes_t>)>>('snd_pcm_mmap_begin');
  late final _snd_pcm_mmap_begin = _snd_pcm_mmap_beginPtr.asFunction<
      int Function(
          ffi.Pointer<snd_pcm_t>,
          ffi.Pointer<ffi.Pointer<snd_pcm_channel_area_t>>,
          ffi.Pointer<snd_pcm_uframes_t>,
          ffi.Pointer<snd_pcm_uframes_t>)>();

  int snd_pcm_mmap_commit(
    ffi.Pointer<snd_pcm_t> pcm,
    int offset,
    int frames,
  ) {
    return _snd_pcm_mmap_commit(
      pcm,
      offset,
      frames,
    );
  }

  late final _snd_pcm_mmap_commitPtr = _lookup<
      ffi.NativeFunction<
          snd_pcm_sframes_t Function(ffi.Pointer<snd_pcm_t>, snd_pcm_uframes_t,
              snd_pcm_uframes_t)>>('snd_pcm_mmap_commit');
  late final _snd_pcm_mmap_commit = _snd_pcm_mmap_commitPtr
      .asFunction<int Function(ffi.Pointer<snd_pcm_t>, int, int)>();

  int snd_pcm_mmap_writei(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<ffi.Void> buffer,
    int size,
  ) {
    return _snd_pcm_mmap_writei(
      pcm,
      buffer,
      size,
    );
  }

  late final _snd_pcm_mmap_writeiPtr = _lookup<
      ffi.NativeFunction<
          snd_pcm_sframes_t Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<ffi.Void>,
              snd_pcm_uframes_t)>>('snd_pcm_mmap_writei');
  late final _snd_pcm_mmap_writei = _snd_pcm_mmap_writeiPtr.asFunction<
      int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<ffi.Void>, int)>();

  int snd_pcm_mmap_readi(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<ffi.Void> buffer,
    int size,
  ) {
    return _snd_pcm_mmap_readi(
      pcm,
      buffer,
      size,
    );
  }

  late final _snd_pcm_mmap_readiPtr = _lookup<
      ffi.NativeFunction<
          snd_pcm_sframes_t Function(ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<ffi.Void>, snd_pcm_uframes_t)>>('snd_pcm_mmap_readi');
  late final _snd_pcm_mmap_readi = _snd_pcm_mmap_readiPtr.asFunction<
      int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<ffi.Void>, int)>();

  int snd_pcm_mmap_writen(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<ffi.Pointer<ffi.Void>> bufs,
    int size,
  ) {
    return _snd_pcm_mmap_writen(
      pcm,
      bufs,
      size,
    );
  }

  late final _snd_pcm_mmap_writenPtr = _lookup<
      ffi.NativeFunction<
          snd_pcm_sframes_t Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              snd_pcm_uframes_t)>>('snd_pcm_mmap_writen');
  late final _snd_pcm_mmap_writen = _snd_pcm_mmap_writenPtr.asFunction<
      int Function(
          ffi.Pointer<snd_pcm_t>, ffi.Pointer<ffi.Pointer<ffi.Void>>, int)>();

  int snd_pcm_mmap_readn(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<ffi.Pointer<ffi.Void>> bufs,
    int size,
  ) {
    return _snd_pcm_mmap_readn(
      pcm,
      bufs,
      size,
    );
  }

  late final _snd_pcm_mmap_readnPtr = _lookup<
      ffi.NativeFunction<
          snd_pcm_sframes_t Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              snd_pcm_uframes_t)>>('snd_pcm_mmap_readn');
  late final _snd_pcm_mmap_readn = _snd_pcm_mmap_readnPtr.asFunction<
      int Function(
          ffi.Pointer<snd_pcm_t>, ffi.Pointer<ffi.Pointer<ffi.Void>>, int)>();

  int snd_pcm_format_signed(
    int format,
  ) {
    return _snd_pcm_format_signed(
      format,
    );
  }

  late final _snd_pcm_format_signedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int32)>>(
          'snd_pcm_format_signed');
  late final _snd_pcm_format_signed =
      _snd_pcm_format_signedPtr.asFunction<int Function(int)>();

  int snd_pcm_format_unsigned(
    int format,
  ) {
    return _snd_pcm_format_unsigned(
      format,
    );
  }

  late final _snd_pcm_format_unsignedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int32)>>(
          'snd_pcm_format_unsigned');
  late final _snd_pcm_format_unsigned =
      _snd_pcm_format_unsignedPtr.asFunction<int Function(int)>();

  int snd_pcm_format_linear(
    int format,
  ) {
    return _snd_pcm_format_linear(
      format,
    );
  }

  late final _snd_pcm_format_linearPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int32)>>(
          'snd_pcm_format_linear');
  late final _snd_pcm_format_linear =
      _snd_pcm_format_linearPtr.asFunction<int Function(int)>();

  int snd_pcm_format_float(
    int format,
  ) {
    return _snd_pcm_format_float(
      format,
    );
  }

  late final _snd_pcm_format_floatPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int32)>>(
          'snd_pcm_format_float');
  late final _snd_pcm_format_float =
      _snd_pcm_format_floatPtr.asFunction<int Function(int)>();

  int snd_pcm_format_little_endian(
    int format,
  ) {
    return _snd_pcm_format_little_endian(
      format,
    );
  }

  late final _snd_pcm_format_little_endianPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int32)>>(
          'snd_pcm_format_little_endian');
  late final _snd_pcm_format_little_endian =
      _snd_pcm_format_little_endianPtr.asFunction<int Function(int)>();

  int snd_pcm_format_big_endian(
    int format,
  ) {
    return _snd_pcm_format_big_endian(
      format,
    );
  }

  late final _snd_pcm_format_big_endianPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int32)>>(
          'snd_pcm_format_big_endian');
  late final _snd_pcm_format_big_endian =
      _snd_pcm_format_big_endianPtr.asFunction<int Function(int)>();

  int snd_pcm_format_cpu_endian(
    int format,
  ) {
    return _snd_pcm_format_cpu_endian(
      format,
    );
  }

  late final _snd_pcm_format_cpu_endianPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int32)>>(
          'snd_pcm_format_cpu_endian');
  late final _snd_pcm_format_cpu_endian =
      _snd_pcm_format_cpu_endianPtr.asFunction<int Function(int)>();

  int snd_pcm_format_width(
    int format,
  ) {
    return _snd_pcm_format_width(
      format,
    );
  }

  late final _snd_pcm_format_widthPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int32)>>(
          'snd_pcm_format_width');
  late final _snd_pcm_format_width =
      _snd_pcm_format_widthPtr.asFunction<int Function(int)>();

  int snd_pcm_format_physical_width(
    int format,
  ) {
    return _snd_pcm_format_physical_width(
      format,
    );
  }

  late final _snd_pcm_format_physical_widthPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int32)>>(
          'snd_pcm_format_physical_width');
  late final _snd_pcm_format_physical_width =
      _snd_pcm_format_physical_widthPtr.asFunction<int Function(int)>();

  int snd_pcm_build_linear_format(
    int width,
    int pwidth,
    int unsignd,
    int big_endian,
  ) {
    return _snd_pcm_build_linear_format(
      width,
      pwidth,
      unsignd,
      big_endian,
    );
  }

  late final _snd_pcm_build_linear_formatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int, ffi.Int, ffi.Int,
              ffi.Int)>>('snd_pcm_build_linear_format');
  late final _snd_pcm_build_linear_format = _snd_pcm_build_linear_formatPtr
      .asFunction<int Function(int, int, int, int)>();

  int snd_pcm_format_size(
    int format,
    int samples,
  ) {
    return _snd_pcm_format_size(
      format,
      samples,
    );
  }

  late final _snd_pcm_format_sizePtr =
      _lookup<ffi.NativeFunction<ssize_t Function(ffi.Int32, ffi.Size)>>(
          'snd_pcm_format_size');
  late final _snd_pcm_format_size =
      _snd_pcm_format_sizePtr.asFunction<int Function(int, int)>();

  int snd_pcm_format_silence(
    int format,
  ) {
    return _snd_pcm_format_silence(
      format,
    );
  }

  late final _snd_pcm_format_silencePtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Int32)>>(
          'snd_pcm_format_silence');
  late final _snd_pcm_format_silence =
      _snd_pcm_format_silencePtr.asFunction<int Function(int)>();

  int snd_pcm_format_silence_16(
    int format,
  ) {
    return _snd_pcm_format_silence_16(
      format,
    );
  }

  late final _snd_pcm_format_silence_16Ptr =
      _lookup<ffi.NativeFunction<ffi.Uint16 Function(ffi.Int32)>>(
          'snd_pcm_format_silence_16');
  late final _snd_pcm_format_silence_16 =
      _snd_pcm_format_silence_16Ptr.asFunction<int Function(int)>();

  int snd_pcm_format_silence_32(
    int format,
  ) {
    return _snd_pcm_format_silence_32(
      format,
    );
  }

  late final _snd_pcm_format_silence_32Ptr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Int32)>>(
          'snd_pcm_format_silence_32');
  late final _snd_pcm_format_silence_32 =
      _snd_pcm_format_silence_32Ptr.asFunction<int Function(int)>();

  int snd_pcm_format_silence_64(
    int format,
  ) {
    return _snd_pcm_format_silence_64(
      format,
    );
  }

  late final _snd_pcm_format_silence_64Ptr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Int32)>>(
          'snd_pcm_format_silence_64');
  late final _snd_pcm_format_silence_64 =
      _snd_pcm_format_silence_64Ptr.asFunction<int Function(int)>();

  int snd_pcm_format_set_silence(
    int format,
    ffi.Pointer<ffi.Void> buf,
    int samples,
  ) {
    return _snd_pcm_format_set_silence(
      format,
      buf,
      samples,
    );
  }

  late final _snd_pcm_format_set_silencePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int32, ffi.Pointer<ffi.Void>,
              ffi.UnsignedInt)>>('snd_pcm_format_set_silence');
  late final _snd_pcm_format_set_silence = _snd_pcm_format_set_silencePtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Void>, int)>();

  int snd_pcm_bytes_to_frames(
    ffi.Pointer<snd_pcm_t> pcm,
    int bytes,
  ) {
    return _snd_pcm_bytes_to_frames(
      pcm,
      bytes,
    );
  }

  late final _snd_pcm_bytes_to_framesPtr = _lookup<
      ffi.NativeFunction<
          snd_pcm_sframes_t Function(
              ffi.Pointer<snd_pcm_t>, ssize_t)>>('snd_pcm_bytes_to_frames');
  late final _snd_pcm_bytes_to_frames = _snd_pcm_bytes_to_framesPtr
      .asFunction<int Function(ffi.Pointer<snd_pcm_t>, int)>();

  int snd_pcm_frames_to_bytes(
    ffi.Pointer<snd_pcm_t> pcm,
    int frames,
  ) {
    return _snd_pcm_frames_to_bytes(
      pcm,
      frames,
    );
  }

  late final _snd_pcm_frames_to_bytesPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Pointer<snd_pcm_t>,
              snd_pcm_sframes_t)>>('snd_pcm_frames_to_bytes');
  late final _snd_pcm_frames_to_bytes = _snd_pcm_frames_to_bytesPtr
      .asFunction<int Function(ffi.Pointer<snd_pcm_t>, int)>();

  int snd_pcm_bytes_to_samples(
    ffi.Pointer<snd_pcm_t> pcm,
    int bytes,
  ) {
    return _snd_pcm_bytes_to_samples(
      pcm,
      bytes,
    );
  }

  late final _snd_pcm_bytes_to_samplesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(
              ffi.Pointer<snd_pcm_t>, ssize_t)>>('snd_pcm_bytes_to_samples');
  late final _snd_pcm_bytes_to_samples = _snd_pcm_bytes_to_samplesPtr
      .asFunction<int Function(ffi.Pointer<snd_pcm_t>, int)>();

  int snd_pcm_samples_to_bytes(
    ffi.Pointer<snd_pcm_t> pcm,
    int samples,
  ) {
    return _snd_pcm_samples_to_bytes(
      pcm,
      samples,
    );
  }

  late final _snd_pcm_samples_to_bytesPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<snd_pcm_t>, ffi.Long)>>('snd_pcm_samples_to_bytes');
  late final _snd_pcm_samples_to_bytes = _snd_pcm_samples_to_bytesPtr
      .asFunction<int Function(ffi.Pointer<snd_pcm_t>, int)>();

  int snd_pcm_area_silence(
    ffi.Pointer<snd_pcm_channel_area_t> dst_channel,
    int dst_offset,
    int samples,
    int format,
  ) {
    return _snd_pcm_area_silence(
      dst_channel,
      dst_offset,
      samples,
      format,
    );
  }

  late final _snd_pcm_area_silencePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_channel_area_t>,
              snd_pcm_uframes_t,
              ffi.UnsignedInt,
              ffi.Int32)>>('snd_pcm_area_silence');
  late final _snd_pcm_area_silence = _snd_pcm_area_silencePtr.asFunction<
      int Function(ffi.Pointer<snd_pcm_channel_area_t>, int, int, int)>();

  int snd_pcm_areas_silence(
    ffi.Pointer<snd_pcm_channel_area_t> dst_channels,
    int dst_offset,
    int channels,
    int frames,
    int format,
  ) {
    return _snd_pcm_areas_silence(
      dst_channels,
      dst_offset,
      channels,
      frames,
      format,
    );
  }

  late final _snd_pcm_areas_silencePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_channel_area_t>,
              snd_pcm_uframes_t,
              ffi.UnsignedInt,
              snd_pcm_uframes_t,
              ffi.Int32)>>('snd_pcm_areas_silence');
  late final _snd_pcm_areas_silence = _snd_pcm_areas_silencePtr.asFunction<
      int Function(ffi.Pointer<snd_pcm_channel_area_t>, int, int, int, int)>();

  int snd_pcm_area_copy(
    ffi.Pointer<snd_pcm_channel_area_t> dst_channel,
    int dst_offset,
    ffi.Pointer<snd_pcm_channel_area_t> src_channel,
    int src_offset,
    int samples,
    int format,
  ) {
    return _snd_pcm_area_copy(
      dst_channel,
      dst_offset,
      src_channel,
      src_offset,
      samples,
      format,
    );
  }

  late final _snd_pcm_area_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_channel_area_t>,
              snd_pcm_uframes_t,
              ffi.Pointer<snd_pcm_channel_area_t>,
              snd_pcm_uframes_t,
              ffi.UnsignedInt,
              ffi.Int32)>>('snd_pcm_area_copy');
  late final _snd_pcm_area_copy = _snd_pcm_area_copyPtr.asFunction<
      int Function(ffi.Pointer<snd_pcm_channel_area_t>, int,
          ffi.Pointer<snd_pcm_channel_area_t>, int, int, int)>();

  int snd_pcm_areas_copy(
    ffi.Pointer<snd_pcm_channel_area_t> dst_channels,
    int dst_offset,
    ffi.Pointer<snd_pcm_channel_area_t> src_channels,
    int src_offset,
    int channels,
    int frames,
    int format,
  ) {
    return _snd_pcm_areas_copy(
      dst_channels,
      dst_offset,
      src_channels,
      src_offset,
      channels,
      frames,
      format,
    );
  }

  late final _snd_pcm_areas_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_channel_area_t>,
              snd_pcm_uframes_t,
              ffi.Pointer<snd_pcm_channel_area_t>,
              snd_pcm_uframes_t,
              ffi.UnsignedInt,
              snd_pcm_uframes_t,
              ffi.Int32)>>('snd_pcm_areas_copy');
  late final _snd_pcm_areas_copy = _snd_pcm_areas_copyPtr.asFunction<
      int Function(ffi.Pointer<snd_pcm_channel_area_t>, int,
          ffi.Pointer<snd_pcm_channel_area_t>, int, int, int, int)>();

  int snd_pcm_areas_copy_wrap(
    ffi.Pointer<snd_pcm_channel_area_t> dst_channels,
    int dst_offset,
    int dst_size,
    ffi.Pointer<snd_pcm_channel_area_t> src_channels,
    int src_offset,
    int src_size,
    int channels,
    int frames,
    int format,
  ) {
    return _snd_pcm_areas_copy_wrap(
      dst_channels,
      dst_offset,
      dst_size,
      src_channels,
      src_offset,
      src_size,
      channels,
      frames,
      format,
    );
  }

  late final _snd_pcm_areas_copy_wrapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_channel_area_t>,
              snd_pcm_uframes_t,
              snd_pcm_uframes_t,
              ffi.Pointer<snd_pcm_channel_area_t>,
              snd_pcm_uframes_t,
              snd_pcm_uframes_t,
              ffi.UnsignedInt,
              snd_pcm_uframes_t,
              ffi.Int32)>>('snd_pcm_areas_copy_wrap');
  late final _snd_pcm_areas_copy_wrap = _snd_pcm_areas_copy_wrapPtr.asFunction<
      int Function(ffi.Pointer<snd_pcm_channel_area_t>, int, int,
          ffi.Pointer<snd_pcm_channel_area_t>, int, int, int, int, int)>();

  ffi.Pointer<snd_pcm_t> snd_pcm_hook_get_pcm(
    ffi.Pointer<snd_pcm_hook_t> hook,
  ) {
    return _snd_pcm_hook_get_pcm(
      hook,
    );
  }

  late final _snd_pcm_hook_get_pcmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<snd_pcm_t> Function(
              ffi.Pointer<snd_pcm_hook_t>)>>('snd_pcm_hook_get_pcm');
  late final _snd_pcm_hook_get_pcm = _snd_pcm_hook_get_pcmPtr.asFunction<
      ffi.Pointer<snd_pcm_t> Function(ffi.Pointer<snd_pcm_hook_t>)>();

  ffi.Pointer<ffi.Void> snd_pcm_hook_get_private(
    ffi.Pointer<snd_pcm_hook_t> hook,
  ) {
    return _snd_pcm_hook_get_private(
      hook,
    );
  }

  late final _snd_pcm_hook_get_privatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<snd_pcm_hook_t>)>>('snd_pcm_hook_get_private');
  late final _snd_pcm_hook_get_private =
      _snd_pcm_hook_get_privatePtr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<snd_pcm_hook_t>)>();

  void snd_pcm_hook_set_private(
    ffi.Pointer<snd_pcm_hook_t> hook,
    ffi.Pointer<ffi.Void> private_data,
  ) {
    return _snd_pcm_hook_set_private(
      hook,
      private_data,
    );
  }

  late final _snd_pcm_hook_set_privatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_pcm_hook_t>,
              ffi.Pointer<ffi.Void>)>>('snd_pcm_hook_set_private');
  late final _snd_pcm_hook_set_private =
      _snd_pcm_hook_set_privatePtr.asFunction<
          void Function(ffi.Pointer<snd_pcm_hook_t>, ffi.Pointer<ffi.Void>)>();

  int snd_pcm_hook_add(
    ffi.Pointer<ffi.Pointer<snd_pcm_hook_t>> hookp,
    ffi.Pointer<snd_pcm_t> pcm,
    int type,
    snd_pcm_hook_func_t func,
    ffi.Pointer<ffi.Void> private_data,
  ) {
    return _snd_pcm_hook_add(
      hookp,
      pcm,
      type,
      func,
      private_data,
    );
  }

  late final _snd_pcm_hook_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<snd_pcm_hook_t>>,
              ffi.Pointer<snd_pcm_t>,
              ffi.Int32,
              snd_pcm_hook_func_t,
              ffi.Pointer<ffi.Void>)>>('snd_pcm_hook_add');
  late final _snd_pcm_hook_add = _snd_pcm_hook_addPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<snd_pcm_hook_t>>,
          ffi.Pointer<snd_pcm_t>,
          int,
          snd_pcm_hook_func_t,
          ffi.Pointer<ffi.Void>)>();

  int snd_pcm_hook_remove(
    ffi.Pointer<snd_pcm_hook_t> hook,
  ) {
    return _snd_pcm_hook_remove(
      hook,
    );
  }

  late final _snd_pcm_hook_removePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_pcm_hook_t>)>>(
      'snd_pcm_hook_remove');
  late final _snd_pcm_hook_remove = _snd_pcm_hook_removePtr
      .asFunction<int Function(ffi.Pointer<snd_pcm_hook_t>)>();

  int snd_pcm_meter_get_bufsize(
    ffi.Pointer<snd_pcm_t> pcm,
  ) {
    return _snd_pcm_meter_get_bufsize(
      pcm,
    );
  }

  late final _snd_pcm_meter_get_bufsizePtr = _lookup<
      ffi.NativeFunction<
          snd_pcm_uframes_t Function(
              ffi.Pointer<snd_pcm_t>)>>('snd_pcm_meter_get_bufsize');
  late final _snd_pcm_meter_get_bufsize = _snd_pcm_meter_get_bufsizePtr
      .asFunction<int Function(ffi.Pointer<snd_pcm_t>)>();

  int snd_pcm_meter_get_channels(
    ffi.Pointer<snd_pcm_t> pcm,
  ) {
    return _snd_pcm_meter_get_channels(
      pcm,
    );
  }

  late final _snd_pcm_meter_get_channelsPtr = _lookup<
          ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<snd_pcm_t>)>>(
      'snd_pcm_meter_get_channels');
  late final _snd_pcm_meter_get_channels = _snd_pcm_meter_get_channelsPtr
      .asFunction<int Function(ffi.Pointer<snd_pcm_t>)>();

  int snd_pcm_meter_get_rate(
    ffi.Pointer<snd_pcm_t> pcm,
  ) {
    return _snd_pcm_meter_get_rate(
      pcm,
    );
  }

  late final _snd_pcm_meter_get_ratePtr = _lookup<
          ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<snd_pcm_t>)>>(
      'snd_pcm_meter_get_rate');
  late final _snd_pcm_meter_get_rate = _snd_pcm_meter_get_ratePtr
      .asFunction<int Function(ffi.Pointer<snd_pcm_t>)>();

  int snd_pcm_meter_get_now(
    ffi.Pointer<snd_pcm_t> pcm,
  ) {
    return _snd_pcm_meter_get_now(
      pcm,
    );
  }

  late final _snd_pcm_meter_get_nowPtr = _lookup<
      ffi.NativeFunction<
          snd_pcm_uframes_t Function(
              ffi.Pointer<snd_pcm_t>)>>('snd_pcm_meter_get_now');
  late final _snd_pcm_meter_get_now = _snd_pcm_meter_get_nowPtr
      .asFunction<int Function(ffi.Pointer<snd_pcm_t>)>();

  int snd_pcm_meter_get_boundary(
    ffi.Pointer<snd_pcm_t> pcm,
  ) {
    return _snd_pcm_meter_get_boundary(
      pcm,
    );
  }

  late final _snd_pcm_meter_get_boundaryPtr = _lookup<
      ffi.NativeFunction<
          snd_pcm_uframes_t Function(
              ffi.Pointer<snd_pcm_t>)>>('snd_pcm_meter_get_boundary');
  late final _snd_pcm_meter_get_boundary = _snd_pcm_meter_get_boundaryPtr
      .asFunction<int Function(ffi.Pointer<snd_pcm_t>)>();

  int snd_pcm_meter_add_scope(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_scope_t> scope,
  ) {
    return _snd_pcm_meter_add_scope(
      pcm,
      scope,
    );
  }

  late final _snd_pcm_meter_add_scopePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_scope_t>)>>('snd_pcm_meter_add_scope');
  late final _snd_pcm_meter_add_scope = _snd_pcm_meter_add_scopePtr.asFunction<
      int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_scope_t>)>();

  ffi.Pointer<snd_pcm_scope_t> snd_pcm_meter_search_scope(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _snd_pcm_meter_search_scope(
      pcm,
      name,
    );
  }

  late final _snd_pcm_meter_search_scopePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<snd_pcm_scope_t> Function(ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<ffi.Char>)>>('snd_pcm_meter_search_scope');
  late final _snd_pcm_meter_search_scope =
      _snd_pcm_meter_search_scopePtr.asFunction<
          ffi.Pointer<snd_pcm_scope_t> Function(
              ffi.Pointer<snd_pcm_t>, ffi.Pointer<ffi.Char>)>();

  int snd_pcm_scope_malloc(
    ffi.Pointer<ffi.Pointer<snd_pcm_scope_t>> ptr,
  ) {
    return _snd_pcm_scope_malloc(
      ptr,
    );
  }

  late final _snd_pcm_scope_mallocPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Pointer<snd_pcm_scope_t>>)>>(
      'snd_pcm_scope_malloc');
  late final _snd_pcm_scope_malloc = _snd_pcm_scope_mallocPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<snd_pcm_scope_t>>)>();

  void snd_pcm_scope_set_ops(
    ffi.Pointer<snd_pcm_scope_t> scope,
    ffi.Pointer<snd_pcm_scope_ops_t> val,
  ) {
    return _snd_pcm_scope_set_ops(
      scope,
      val,
    );
  }

  late final _snd_pcm_scope_set_opsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_pcm_scope_t>,
              ffi.Pointer<snd_pcm_scope_ops_t>)>>('snd_pcm_scope_set_ops');
  late final _snd_pcm_scope_set_ops = _snd_pcm_scope_set_opsPtr.asFunction<
      void Function(
          ffi.Pointer<snd_pcm_scope_t>, ffi.Pointer<snd_pcm_scope_ops_t>)>();

  void snd_pcm_scope_set_name(
    ffi.Pointer<snd_pcm_scope_t> scope,
    ffi.Pointer<ffi.Char> val,
  ) {
    return _snd_pcm_scope_set_name(
      scope,
      val,
    );
  }

  late final _snd_pcm_scope_set_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_pcm_scope_t>,
              ffi.Pointer<ffi.Char>)>>('snd_pcm_scope_set_name');
  late final _snd_pcm_scope_set_name = _snd_pcm_scope_set_namePtr.asFunction<
      void Function(ffi.Pointer<snd_pcm_scope_t>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> snd_pcm_scope_get_name(
    ffi.Pointer<snd_pcm_scope_t> scope,
  ) {
    return _snd_pcm_scope_get_name(
      scope,
    );
  }

  late final _snd_pcm_scope_get_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<snd_pcm_scope_t>)>>('snd_pcm_scope_get_name');
  late final _snd_pcm_scope_get_name = _snd_pcm_scope_get_namePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<snd_pcm_scope_t>)>();

  ffi.Pointer<ffi.Void> snd_pcm_scope_get_callback_private(
    ffi.Pointer<snd_pcm_scope_t> scope,
  ) {
    return _snd_pcm_scope_get_callback_private(
      scope,
    );
  }

  late final _snd_pcm_scope_get_callback_privatePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<snd_pcm_scope_t>)>>(
      'snd_pcm_scope_get_callback_private');
  late final _snd_pcm_scope_get_callback_private =
      _snd_pcm_scope_get_callback_privatePtr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<snd_pcm_scope_t>)>();

  void snd_pcm_scope_set_callback_private(
    ffi.Pointer<snd_pcm_scope_t> scope,
    ffi.Pointer<ffi.Void> val,
  ) {
    return _snd_pcm_scope_set_callback_private(
      scope,
      val,
    );
  }

  late final _snd_pcm_scope_set_callback_privatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_pcm_scope_t>,
              ffi.Pointer<ffi.Void>)>>('snd_pcm_scope_set_callback_private');
  late final _snd_pcm_scope_set_callback_private =
      _snd_pcm_scope_set_callback_privatePtr.asFunction<
          void Function(ffi.Pointer<snd_pcm_scope_t>, ffi.Pointer<ffi.Void>)>();

  int snd_pcm_scope_s16_open(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Pointer<snd_pcm_scope_t>> scopep,
  ) {
    return _snd_pcm_scope_s16_open(
      pcm,
      name,
      scopep,
    );
  }

  late final _snd_pcm_scope_s16_openPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Pointer<snd_pcm_scope_t>>)>>(
      'snd_pcm_scope_s16_open');
  late final _snd_pcm_scope_s16_open = _snd_pcm_scope_s16_openPtr.asFunction<
      int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<snd_pcm_scope_t>>)>();

  ffi.Pointer<ffi.Int16> snd_pcm_scope_s16_get_channel_buffer(
    ffi.Pointer<snd_pcm_scope_t> scope,
    int channel,
  ) {
    return _snd_pcm_scope_s16_get_channel_buffer(
      scope,
      channel,
    );
  }

  late final _snd_pcm_scope_s16_get_channel_bufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int16> Function(ffi.Pointer<snd_pcm_scope_t>,
              ffi.UnsignedInt)>>('snd_pcm_scope_s16_get_channel_buffer');
  late final _snd_pcm_scope_s16_get_channel_buffer =
      _snd_pcm_scope_s16_get_channel_bufferPtr.asFunction<
          ffi.Pointer<ffi.Int16> Function(ffi.Pointer<snd_pcm_scope_t>, int)>();

  int snd_spcm_init(
    ffi.Pointer<snd_pcm_t> pcm,
    int rate,
    int channels,
    int format,
    int subformat,
    int latency,
    int _access,
    int xrun_type,
  ) {
    return _snd_spcm_init(
      pcm,
      rate,
      channels,
      format,
      subformat,
      latency,
      _access,
      xrun_type,
    );
  }

  late final _snd_spcm_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.UnsignedInt,
              ffi.UnsignedInt,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32)>>('snd_spcm_init');
  late final _snd_spcm_init = _snd_spcm_initPtr.asFunction<
      int Function(
          ffi.Pointer<snd_pcm_t>, int, int, int, int, int, int, int)>();

  int snd_spcm_init_duplex(
    ffi.Pointer<snd_pcm_t> playback_pcm,
    ffi.Pointer<snd_pcm_t> capture_pcm,
    int rate,
    int channels,
    int format,
    int subformat,
    int latency,
    int _access,
    int xrun_type,
    int duplex_type,
  ) {
    return _snd_spcm_init_duplex(
      playback_pcm,
      capture_pcm,
      rate,
      channels,
      format,
      subformat,
      latency,
      _access,
      xrun_type,
      duplex_type,
    );
  }

  late final _snd_spcm_init_duplexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_t>,
              ffi.UnsignedInt,
              ffi.UnsignedInt,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32)>>('snd_spcm_init_duplex');
  late final _snd_spcm_init_duplex = _snd_spcm_init_duplexPtr.asFunction<
      int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_t>, int, int,
          int, int, int, int, int, int)>();

  int snd_spcm_init_get_params(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<ffi.UnsignedInt> rate,
    ffi.Pointer<snd_pcm_uframes_t> buffer_size,
    ffi.Pointer<snd_pcm_uframes_t> period_size,
  ) {
    return _snd_spcm_init_get_params(
      pcm,
      rate,
      buffer_size,
      period_size,
    );
  }

  late final _snd_spcm_init_get_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<snd_pcm_uframes_t>,
              ffi.Pointer<snd_pcm_uframes_t>)>>('snd_spcm_init_get_params');
  late final _snd_spcm_init_get_params =
      _snd_spcm_init_get_paramsPtr.asFunction<
          int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<snd_pcm_uframes_t>,
              ffi.Pointer<snd_pcm_uframes_t>)>();

  ffi.Pointer<ffi.Char> snd_pcm_start_mode_name(
    int mode,
  ) {
    return _snd_pcm_start_mode_name(
      mode,
    );
  }

  late final _snd_pcm_start_mode_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'snd_pcm_start_mode_name');
  late final _snd_pcm_start_mode_name = _snd_pcm_start_mode_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> snd_pcm_xrun_mode_name(
    int mode,
  ) {
    return _snd_pcm_xrun_mode_name(
      mode,
    );
  }

  late final _snd_pcm_xrun_mode_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'snd_pcm_xrun_mode_name');
  late final _snd_pcm_xrun_mode_name = _snd_pcm_xrun_mode_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int snd_pcm_sw_params_set_start_mode(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_sw_params_t> params,
    int val,
  ) {
    return _snd_pcm_sw_params_set_start_mode(
      pcm,
      params,
      val,
    );
  }

  late final _snd_pcm_sw_params_set_start_modePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_sw_params_t>,
              ffi.Int32)>>('snd_pcm_sw_params_set_start_mode');
  late final _snd_pcm_sw_params_set_start_mode =
      _snd_pcm_sw_params_set_start_modePtr.asFunction<
          int Function(
              ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_sw_params_t>, int)>();

  int snd_pcm_sw_params_get_start_mode(
    ffi.Pointer<snd_pcm_sw_params_t> params,
  ) {
    return _snd_pcm_sw_params_get_start_mode(
      params,
    );
  }

  late final _snd_pcm_sw_params_get_start_modePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<snd_pcm_sw_params_t>)>>(
      'snd_pcm_sw_params_get_start_mode');
  late final _snd_pcm_sw_params_get_start_mode =
      _snd_pcm_sw_params_get_start_modePtr
          .asFunction<int Function(ffi.Pointer<snd_pcm_sw_params_t>)>();

  int snd_pcm_sw_params_set_xrun_mode(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_sw_params_t> params,
    int val,
  ) {
    return _snd_pcm_sw_params_set_xrun_mode(
      pcm,
      params,
      val,
    );
  }

  late final _snd_pcm_sw_params_set_xrun_modePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_sw_params_t>,
              ffi.Int32)>>('snd_pcm_sw_params_set_xrun_mode');
  late final _snd_pcm_sw_params_set_xrun_mode =
      _snd_pcm_sw_params_set_xrun_modePtr.asFunction<
          int Function(
              ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_sw_params_t>, int)>();

  int snd_pcm_sw_params_get_xrun_mode(
    ffi.Pointer<snd_pcm_sw_params_t> params,
  ) {
    return _snd_pcm_sw_params_get_xrun_mode(
      params,
    );
  }

  late final _snd_pcm_sw_params_get_xrun_modePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<snd_pcm_sw_params_t>)>>(
      'snd_pcm_sw_params_get_xrun_mode');
  late final _snd_pcm_sw_params_get_xrun_mode =
      _snd_pcm_sw_params_get_xrun_modePtr
          .asFunction<int Function(ffi.Pointer<snd_pcm_sw_params_t>)>();

  int snd_pcm_sw_params_set_xfer_align(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_sw_params_t> params,
    int val,
  ) {
    return _snd_pcm_sw_params_set_xfer_align(
      pcm,
      params,
      val,
    );
  }

  late final _snd_pcm_sw_params_set_xfer_alignPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_sw_params_t>,
              snd_pcm_uframes_t)>>('snd_pcm_sw_params_set_xfer_align');
  late final _snd_pcm_sw_params_set_xfer_align =
      _snd_pcm_sw_params_set_xfer_alignPtr.asFunction<
          int Function(
              ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_sw_params_t>, int)>();

  int snd_pcm_sw_params_get_xfer_align(
    ffi.Pointer<snd_pcm_sw_params_t> params,
    ffi.Pointer<snd_pcm_uframes_t> val,
  ) {
    return _snd_pcm_sw_params_get_xfer_align(
      params,
      val,
    );
  }

  late final _snd_pcm_sw_params_get_xfer_alignPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_pcm_sw_params_t>,
                  ffi.Pointer<snd_pcm_uframes_t>)>>(
      'snd_pcm_sw_params_get_xfer_align');
  late final _snd_pcm_sw_params_get_xfer_align =
      _snd_pcm_sw_params_get_xfer_alignPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_sw_params_t>,
              ffi.Pointer<snd_pcm_uframes_t>)>();

  int snd_pcm_sw_params_set_sleep_min(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_sw_params_t> params,
    int val,
  ) {
    return _snd_pcm_sw_params_set_sleep_min(
      pcm,
      params,
      val,
    );
  }

  late final _snd_pcm_sw_params_set_sleep_minPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_sw_params_t>,
              ffi.UnsignedInt)>>('snd_pcm_sw_params_set_sleep_min');
  late final _snd_pcm_sw_params_set_sleep_min =
      _snd_pcm_sw_params_set_sleep_minPtr.asFunction<
          int Function(
              ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_sw_params_t>, int)>();

  int snd_pcm_sw_params_get_sleep_min(
    ffi.Pointer<snd_pcm_sw_params_t> params,
    ffi.Pointer<ffi.UnsignedInt> val,
  ) {
    return _snd_pcm_sw_params_get_sleep_min(
      params,
      val,
    );
  }

  late final _snd_pcm_sw_params_get_sleep_minPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_pcm_sw_params_t>,
                  ffi.Pointer<ffi.UnsignedInt>)>>(
      'snd_pcm_sw_params_get_sleep_min');
  late final _snd_pcm_sw_params_get_sleep_min =
      _snd_pcm_sw_params_get_sleep_minPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_sw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>)>();

  int snd_pcm_hw_params_get_tick_time(
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<ffi.UnsignedInt> val,
    ffi.Pointer<ffi.Int> dir,
  ) {
    return _snd_pcm_hw_params_get_tick_time(
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_get_tick_timePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.Int>)>>('snd_pcm_hw_params_get_tick_time');
  late final _snd_pcm_hw_params_get_tick_time =
      _snd_pcm_hw_params_get_tick_timePtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.Int>)>();

  int snd_pcm_hw_params_get_tick_time_min(
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<ffi.UnsignedInt> val,
    ffi.Pointer<ffi.Int> dir,
  ) {
    return _snd_pcm_hw_params_get_tick_time_min(
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_get_tick_time_minPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.Int>)>>('snd_pcm_hw_params_get_tick_time_min');
  late final _snd_pcm_hw_params_get_tick_time_min =
      _snd_pcm_hw_params_get_tick_time_minPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.Int>)>();

  int snd_pcm_hw_params_get_tick_time_max(
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<ffi.UnsignedInt> val,
    ffi.Pointer<ffi.Int> dir,
  ) {
    return _snd_pcm_hw_params_get_tick_time_max(
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_get_tick_time_maxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.Int>)>>('snd_pcm_hw_params_get_tick_time_max');
  late final _snd_pcm_hw_params_get_tick_time_max =
      _snd_pcm_hw_params_get_tick_time_maxPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.Int>)>();

  int snd_pcm_hw_params_test_tick_time(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    int val,
    int dir,
  ) {
    return _snd_pcm_hw_params_test_tick_time(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_test_tick_timePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.UnsignedInt,
              ffi.Int)>>('snd_pcm_hw_params_test_tick_time');
  late final _snd_pcm_hw_params_test_tick_time =
      _snd_pcm_hw_params_test_tick_timePtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>,
              int, int)>();

  int snd_pcm_hw_params_set_tick_time(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    int val,
    int dir,
  ) {
    return _snd_pcm_hw_params_set_tick_time(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_set_tick_timePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.UnsignedInt,
              ffi.Int)>>('snd_pcm_hw_params_set_tick_time');
  late final _snd_pcm_hw_params_set_tick_time =
      _snd_pcm_hw_params_set_tick_timePtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>,
              int, int)>();

  int snd_pcm_hw_params_set_tick_time_min(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<ffi.UnsignedInt> val,
    ffi.Pointer<ffi.Int> dir,
  ) {
    return _snd_pcm_hw_params_set_tick_time_min(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_set_tick_time_minPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.Int>)>>('snd_pcm_hw_params_set_tick_time_min');
  late final _snd_pcm_hw_params_set_tick_time_min =
      _snd_pcm_hw_params_set_tick_time_minPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.Int>)>();

  int snd_pcm_hw_params_set_tick_time_max(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<ffi.UnsignedInt> val,
    ffi.Pointer<ffi.Int> dir,
  ) {
    return _snd_pcm_hw_params_set_tick_time_max(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_set_tick_time_maxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.Int>)>>('snd_pcm_hw_params_set_tick_time_max');
  late final _snd_pcm_hw_params_set_tick_time_max =
      _snd_pcm_hw_params_set_tick_time_maxPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.Int>)>();

  int snd_pcm_hw_params_set_tick_time_minmax(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<ffi.UnsignedInt> min,
    ffi.Pointer<ffi.Int> mindir,
    ffi.Pointer<ffi.UnsignedInt> max,
    ffi.Pointer<ffi.Int> maxdir,
  ) {
    return _snd_pcm_hw_params_set_tick_time_minmax(
      pcm,
      params,
      min,
      mindir,
      max,
      maxdir,
    );
  }

  late final _snd_pcm_hw_params_set_tick_time_minmaxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.Int>)>>('snd_pcm_hw_params_set_tick_time_minmax');
  late final _snd_pcm_hw_params_set_tick_time_minmax =
      _snd_pcm_hw_params_set_tick_time_minmaxPtr.asFunction<
          int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.Int>)>();

  int snd_pcm_hw_params_set_tick_time_near(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<ffi.UnsignedInt> val,
    ffi.Pointer<ffi.Int> dir,
  ) {
    return _snd_pcm_hw_params_set_tick_time_near(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_set_tick_time_nearPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.Int>)>>('snd_pcm_hw_params_set_tick_time_near');
  late final _snd_pcm_hw_params_set_tick_time_near =
      _snd_pcm_hw_params_set_tick_time_nearPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.Int>)>();

  int snd_pcm_hw_params_set_tick_time_first(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<ffi.UnsignedInt> val,
    ffi.Pointer<ffi.Int> dir,
  ) {
    return _snd_pcm_hw_params_set_tick_time_first(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_set_tick_time_firstPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.Int>)>>('snd_pcm_hw_params_set_tick_time_first');
  late final _snd_pcm_hw_params_set_tick_time_first =
      _snd_pcm_hw_params_set_tick_time_firstPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.Int>)>();

  int snd_pcm_hw_params_set_tick_time_last(
    ffi.Pointer<snd_pcm_t> pcm,
    ffi.Pointer<snd_pcm_hw_params_t> params,
    ffi.Pointer<ffi.UnsignedInt> val,
    ffi.Pointer<ffi.Int> dir,
  ) {
    return _snd_pcm_hw_params_set_tick_time_last(
      pcm,
      params,
      val,
      dir,
    );
  }

  late final _snd_pcm_hw_params_set_tick_time_lastPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_pcm_t>,
              ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.Int>)>>('snd_pcm_hw_params_set_tick_time_last');
  late final _snd_pcm_hw_params_set_tick_time_last =
      _snd_pcm_hw_params_set_tick_time_lastPtr.asFunction<
          int Function(ffi.Pointer<snd_pcm_t>, ffi.Pointer<snd_pcm_hw_params_t>,
              ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.Int>)>();

  int snd_rawmidi_open(
    ffi.Pointer<ffi.Pointer<snd_rawmidi_t>> in_rmidi,
    ffi.Pointer<ffi.Pointer<snd_rawmidi_t>> out_rmidi,
    ffi.Pointer<ffi.Char> name,
    int mode,
  ) {
    return _snd_rawmidi_open(
      in_rmidi,
      out_rmidi,
      name,
      mode,
    );
  }

  late final _snd_rawmidi_openPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<snd_rawmidi_t>>,
              ffi.Pointer<ffi.Pointer<snd_rawmidi_t>>,
              ffi.Pointer<ffi.Char>,
              ffi.Int)>>('snd_rawmidi_open');
  late final _snd_rawmidi_open = _snd_rawmidi_openPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<snd_rawmidi_t>>,
          ffi.Pointer<ffi.Pointer<snd_rawmidi_t>>,
          ffi.Pointer<ffi.Char>,
          int)>();

  int snd_rawmidi_open_lconf(
    ffi.Pointer<ffi.Pointer<snd_rawmidi_t>> in_rmidi,
    ffi.Pointer<ffi.Pointer<snd_rawmidi_t>> out_rmidi,
    ffi.Pointer<ffi.Char> name,
    int mode,
    ffi.Pointer<snd_config_t> lconf,
  ) {
    return _snd_rawmidi_open_lconf(
      in_rmidi,
      out_rmidi,
      name,
      mode,
      lconf,
    );
  }

  late final _snd_rawmidi_open_lconfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<snd_rawmidi_t>>,
              ffi.Pointer<ffi.Pointer<snd_rawmidi_t>>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<snd_config_t>)>>('snd_rawmidi_open_lconf');
  late final _snd_rawmidi_open_lconf = _snd_rawmidi_open_lconfPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<snd_rawmidi_t>>,
          ffi.Pointer<ffi.Pointer<snd_rawmidi_t>>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<snd_config_t>)>();

  int snd_rawmidi_close(
    ffi.Pointer<snd_rawmidi_t> rmidi,
  ) {
    return _snd_rawmidi_close(
      rmidi,
    );
  }

  late final _snd_rawmidi_closePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_rawmidi_t>)>>(
          'snd_rawmidi_close');
  late final _snd_rawmidi_close = _snd_rawmidi_closePtr
      .asFunction<int Function(ffi.Pointer<snd_rawmidi_t>)>();

  int snd_rawmidi_poll_descriptors_count(
    ffi.Pointer<snd_rawmidi_t> rmidi,
  ) {
    return _snd_rawmidi_poll_descriptors_count(
      rmidi,
    );
  }

  late final _snd_rawmidi_poll_descriptors_countPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_rawmidi_t>)>>(
          'snd_rawmidi_poll_descriptors_count');
  late final _snd_rawmidi_poll_descriptors_count =
      _snd_rawmidi_poll_descriptors_countPtr
          .asFunction<int Function(ffi.Pointer<snd_rawmidi_t>)>();

  int snd_rawmidi_poll_descriptors(
    ffi.Pointer<snd_rawmidi_t> rmidi,
    ffi.Pointer<pollfd> pfds,
    int space,
  ) {
    return _snd_rawmidi_poll_descriptors(
      rmidi,
      pfds,
      space,
    );
  }

  late final _snd_rawmidi_poll_descriptorsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_rawmidi_t>, ffi.Pointer<pollfd>,
              ffi.UnsignedInt)>>('snd_rawmidi_poll_descriptors');
  late final _snd_rawmidi_poll_descriptors =
      _snd_rawmidi_poll_descriptorsPtr.asFunction<
          int Function(ffi.Pointer<snd_rawmidi_t>, ffi.Pointer<pollfd>, int)>();

  int snd_rawmidi_poll_descriptors_revents(
    ffi.Pointer<snd_rawmidi_t> rawmidi,
    ffi.Pointer<pollfd> pfds,
    int nfds,
    ffi.Pointer<ffi.UnsignedShort> revent,
  ) {
    return _snd_rawmidi_poll_descriptors_revents(
      rawmidi,
      pfds,
      nfds,
      revent,
    );
  }

  late final _snd_rawmidi_poll_descriptors_reventsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_rawmidi_t>, ffi.Pointer<pollfd>,
                  ffi.UnsignedInt, ffi.Pointer<ffi.UnsignedShort>)>>(
      'snd_rawmidi_poll_descriptors_revents');
  late final _snd_rawmidi_poll_descriptors_revents =
      _snd_rawmidi_poll_descriptors_reventsPtr.asFunction<
          int Function(ffi.Pointer<snd_rawmidi_t>, ffi.Pointer<pollfd>, int,
              ffi.Pointer<ffi.UnsignedShort>)>();

  int snd_rawmidi_nonblock(
    ffi.Pointer<snd_rawmidi_t> rmidi,
    int nonblock,
  ) {
    return _snd_rawmidi_nonblock(
      rmidi,
      nonblock,
    );
  }

  late final _snd_rawmidi_nonblockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_rawmidi_t>, ffi.Int)>>('snd_rawmidi_nonblock');
  late final _snd_rawmidi_nonblock = _snd_rawmidi_nonblockPtr
      .asFunction<int Function(ffi.Pointer<snd_rawmidi_t>, int)>();

  int snd_rawmidi_info_sizeof() {
    return _snd_rawmidi_info_sizeof();
  }

  late final _snd_rawmidi_info_sizeofPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>(
          'snd_rawmidi_info_sizeof');
  late final _snd_rawmidi_info_sizeof =
      _snd_rawmidi_info_sizeofPtr.asFunction<int Function()>();

  int snd_rawmidi_info_malloc(
    ffi.Pointer<ffi.Pointer<snd_rawmidi_info_t>> ptr,
  ) {
    return _snd_rawmidi_info_malloc(
      ptr,
    );
  }

  late final _snd_rawmidi_info_mallocPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Pointer<snd_rawmidi_info_t>>)>>(
      'snd_rawmidi_info_malloc');
  late final _snd_rawmidi_info_malloc = _snd_rawmidi_info_mallocPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<snd_rawmidi_info_t>>)>();

  void snd_rawmidi_info_free(
    ffi.Pointer<snd_rawmidi_info_t> obj,
  ) {
    return _snd_rawmidi_info_free(
      obj,
    );
  }

  late final _snd_rawmidi_info_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<snd_rawmidi_info_t>)>>('snd_rawmidi_info_free');
  late final _snd_rawmidi_info_free = _snd_rawmidi_info_freePtr
      .asFunction<void Function(ffi.Pointer<snd_rawmidi_info_t>)>();

  void snd_rawmidi_info_copy(
    ffi.Pointer<snd_rawmidi_info_t> dst,
    ffi.Pointer<snd_rawmidi_info_t> src,
  ) {
    return _snd_rawmidi_info_copy(
      dst,
      src,
    );
  }

  late final _snd_rawmidi_info_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_rawmidi_info_t>,
              ffi.Pointer<snd_rawmidi_info_t>)>>('snd_rawmidi_info_copy');
  late final _snd_rawmidi_info_copy = _snd_rawmidi_info_copyPtr.asFunction<
      void Function(
          ffi.Pointer<snd_rawmidi_info_t>, ffi.Pointer<snd_rawmidi_info_t>)>();

  int snd_rawmidi_info_get_device(
    ffi.Pointer<snd_rawmidi_info_t> obj,
  ) {
    return _snd_rawmidi_info_get_device(
      obj,
    );
  }

  late final _snd_rawmidi_info_get_devicePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<snd_rawmidi_info_t>)>>('snd_rawmidi_info_get_device');
  late final _snd_rawmidi_info_get_device = _snd_rawmidi_info_get_devicePtr
      .asFunction<int Function(ffi.Pointer<snd_rawmidi_info_t>)>();

  int snd_rawmidi_info_get_subdevice(
    ffi.Pointer<snd_rawmidi_info_t> obj,
  ) {
    return _snd_rawmidi_info_get_subdevice(
      obj,
    );
  }

  late final _snd_rawmidi_info_get_subdevicePtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<snd_rawmidi_info_t>)>>(
      'snd_rawmidi_info_get_subdevice');
  late final _snd_rawmidi_info_get_subdevice =
      _snd_rawmidi_info_get_subdevicePtr
          .asFunction<int Function(ffi.Pointer<snd_rawmidi_info_t>)>();

  int snd_rawmidi_info_get_stream(
    ffi.Pointer<snd_rawmidi_info_t> obj,
  ) {
    return _snd_rawmidi_info_get_stream(
      obj,
    );
  }

  late final _snd_rawmidi_info_get_streamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<snd_rawmidi_info_t>)>>('snd_rawmidi_info_get_stream');
  late final _snd_rawmidi_info_get_stream = _snd_rawmidi_info_get_streamPtr
      .asFunction<int Function(ffi.Pointer<snd_rawmidi_info_t>)>();

  int snd_rawmidi_info_get_card(
    ffi.Pointer<snd_rawmidi_info_t> obj,
  ) {
    return _snd_rawmidi_info_get_card(
      obj,
    );
  }

  late final _snd_rawmidi_info_get_cardPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_rawmidi_info_t>)>>('snd_rawmidi_info_get_card');
  late final _snd_rawmidi_info_get_card = _snd_rawmidi_info_get_cardPtr
      .asFunction<int Function(ffi.Pointer<snd_rawmidi_info_t>)>();

  int snd_rawmidi_info_get_flags(
    ffi.Pointer<snd_rawmidi_info_t> obj,
  ) {
    return _snd_rawmidi_info_get_flags(
      obj,
    );
  }

  late final _snd_rawmidi_info_get_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<snd_rawmidi_info_t>)>>('snd_rawmidi_info_get_flags');
  late final _snd_rawmidi_info_get_flags = _snd_rawmidi_info_get_flagsPtr
      .asFunction<int Function(ffi.Pointer<snd_rawmidi_info_t>)>();

  ffi.Pointer<ffi.Char> snd_rawmidi_info_get_id(
    ffi.Pointer<snd_rawmidi_info_t> obj,
  ) {
    return _snd_rawmidi_info_get_id(
      obj,
    );
  }

  late final _snd_rawmidi_info_get_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<snd_rawmidi_info_t>)>>('snd_rawmidi_info_get_id');
  late final _snd_rawmidi_info_get_id = _snd_rawmidi_info_get_idPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<snd_rawmidi_info_t>)>();

  ffi.Pointer<ffi.Char> snd_rawmidi_info_get_name(
    ffi.Pointer<snd_rawmidi_info_t> obj,
  ) {
    return _snd_rawmidi_info_get_name(
      obj,
    );
  }

  late final _snd_rawmidi_info_get_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<snd_rawmidi_info_t>)>>('snd_rawmidi_info_get_name');
  late final _snd_rawmidi_info_get_name =
      _snd_rawmidi_info_get_namePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<snd_rawmidi_info_t>)>();

  ffi.Pointer<ffi.Char> snd_rawmidi_info_get_subdevice_name(
    ffi.Pointer<snd_rawmidi_info_t> obj,
  ) {
    return _snd_rawmidi_info_get_subdevice_name(
      obj,
    );
  }

  late final _snd_rawmidi_info_get_subdevice_namePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<snd_rawmidi_info_t>)>>(
      'snd_rawmidi_info_get_subdevice_name');
  late final _snd_rawmidi_info_get_subdevice_name =
      _snd_rawmidi_info_get_subdevice_namePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<snd_rawmidi_info_t>)>();

  int snd_rawmidi_info_get_subdevices_count(
    ffi.Pointer<snd_rawmidi_info_t> obj,
  ) {
    return _snd_rawmidi_info_get_subdevices_count(
      obj,
    );
  }

  late final _snd_rawmidi_info_get_subdevices_countPtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<snd_rawmidi_info_t>)>>(
      'snd_rawmidi_info_get_subdevices_count');
  late final _snd_rawmidi_info_get_subdevices_count =
      _snd_rawmidi_info_get_subdevices_countPtr
          .asFunction<int Function(ffi.Pointer<snd_rawmidi_info_t>)>();

  int snd_rawmidi_info_get_subdevices_avail(
    ffi.Pointer<snd_rawmidi_info_t> obj,
  ) {
    return _snd_rawmidi_info_get_subdevices_avail(
      obj,
    );
  }

  late final _snd_rawmidi_info_get_subdevices_availPtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<snd_rawmidi_info_t>)>>(
      'snd_rawmidi_info_get_subdevices_avail');
  late final _snd_rawmidi_info_get_subdevices_avail =
      _snd_rawmidi_info_get_subdevices_availPtr
          .asFunction<int Function(ffi.Pointer<snd_rawmidi_info_t>)>();

  void snd_rawmidi_info_set_device(
    ffi.Pointer<snd_rawmidi_info_t> obj,
    int val,
  ) {
    return _snd_rawmidi_info_set_device(
      obj,
      val,
    );
  }

  late final _snd_rawmidi_info_set_devicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_rawmidi_info_t>,
              ffi.UnsignedInt)>>('snd_rawmidi_info_set_device');
  late final _snd_rawmidi_info_set_device = _snd_rawmidi_info_set_devicePtr
      .asFunction<void Function(ffi.Pointer<snd_rawmidi_info_t>, int)>();

  void snd_rawmidi_info_set_subdevice(
    ffi.Pointer<snd_rawmidi_info_t> obj,
    int val,
  ) {
    return _snd_rawmidi_info_set_subdevice(
      obj,
      val,
    );
  }

  late final _snd_rawmidi_info_set_subdevicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_rawmidi_info_t>,
              ffi.UnsignedInt)>>('snd_rawmidi_info_set_subdevice');
  late final _snd_rawmidi_info_set_subdevice =
      _snd_rawmidi_info_set_subdevicePtr
          .asFunction<void Function(ffi.Pointer<snd_rawmidi_info_t>, int)>();

  void snd_rawmidi_info_set_stream(
    ffi.Pointer<snd_rawmidi_info_t> obj,
    int val,
  ) {
    return _snd_rawmidi_info_set_stream(
      obj,
      val,
    );
  }

  late final _snd_rawmidi_info_set_streamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_rawmidi_info_t>,
              ffi.Int32)>>('snd_rawmidi_info_set_stream');
  late final _snd_rawmidi_info_set_stream = _snd_rawmidi_info_set_streamPtr
      .asFunction<void Function(ffi.Pointer<snd_rawmidi_info_t>, int)>();

  int snd_rawmidi_info(
    ffi.Pointer<snd_rawmidi_t> rmidi,
    ffi.Pointer<snd_rawmidi_info_t> info,
  ) {
    return _snd_rawmidi_info(
      rmidi,
      info,
    );
  }

  late final _snd_rawmidi_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_rawmidi_t>,
              ffi.Pointer<snd_rawmidi_info_t>)>>('snd_rawmidi_info');
  late final _snd_rawmidi_info = _snd_rawmidi_infoPtr.asFunction<
      int Function(
          ffi.Pointer<snd_rawmidi_t>, ffi.Pointer<snd_rawmidi_info_t>)>();

  int snd_rawmidi_params_sizeof() {
    return _snd_rawmidi_params_sizeof();
  }

  late final _snd_rawmidi_params_sizeofPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>(
          'snd_rawmidi_params_sizeof');
  late final _snd_rawmidi_params_sizeof =
      _snd_rawmidi_params_sizeofPtr.asFunction<int Function()>();

  int snd_rawmidi_params_malloc(
    ffi.Pointer<ffi.Pointer<snd_rawmidi_params_t>> ptr,
  ) {
    return _snd_rawmidi_params_malloc(
      ptr,
    );
  }

  late final _snd_rawmidi_params_mallocPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Pointer<snd_rawmidi_params_t>>)>>(
      'snd_rawmidi_params_malloc');
  late final _snd_rawmidi_params_malloc =
      _snd_rawmidi_params_mallocPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<snd_rawmidi_params_t>>)>();

  void snd_rawmidi_params_free(
    ffi.Pointer<snd_rawmidi_params_t> obj,
  ) {
    return _snd_rawmidi_params_free(
      obj,
    );
  }

  late final _snd_rawmidi_params_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<snd_rawmidi_params_t>)>>('snd_rawmidi_params_free');
  late final _snd_rawmidi_params_free = _snd_rawmidi_params_freePtr
      .asFunction<void Function(ffi.Pointer<snd_rawmidi_params_t>)>();

  void snd_rawmidi_params_copy(
    ffi.Pointer<snd_rawmidi_params_t> dst,
    ffi.Pointer<snd_rawmidi_params_t> src,
  ) {
    return _snd_rawmidi_params_copy(
      dst,
      src,
    );
  }

  late final _snd_rawmidi_params_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_rawmidi_params_t>,
              ffi.Pointer<snd_rawmidi_params_t>)>>('snd_rawmidi_params_copy');
  late final _snd_rawmidi_params_copy = _snd_rawmidi_params_copyPtr.asFunction<
      void Function(ffi.Pointer<snd_rawmidi_params_t>,
          ffi.Pointer<snd_rawmidi_params_t>)>();

  int snd_rawmidi_params_set_buffer_size(
    ffi.Pointer<snd_rawmidi_t> rmidi,
    ffi.Pointer<snd_rawmidi_params_t> params,
    int val,
  ) {
    return _snd_rawmidi_params_set_buffer_size(
      rmidi,
      params,
      val,
    );
  }

  late final _snd_rawmidi_params_set_buffer_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_rawmidi_t>,
              ffi.Pointer<snd_rawmidi_params_t>,
              ffi.Size)>>('snd_rawmidi_params_set_buffer_size');
  late final _snd_rawmidi_params_set_buffer_size =
      _snd_rawmidi_params_set_buffer_sizePtr.asFunction<
          int Function(ffi.Pointer<snd_rawmidi_t>,
              ffi.Pointer<snd_rawmidi_params_t>, int)>();

  int snd_rawmidi_params_get_buffer_size(
    ffi.Pointer<snd_rawmidi_params_t> params,
  ) {
    return _snd_rawmidi_params_get_buffer_size(
      params,
    );
  }

  late final _snd_rawmidi_params_get_buffer_sizePtr = _lookup<
          ffi.NativeFunction<
              ffi.Size Function(ffi.Pointer<snd_rawmidi_params_t>)>>(
      'snd_rawmidi_params_get_buffer_size');
  late final _snd_rawmidi_params_get_buffer_size =
      _snd_rawmidi_params_get_buffer_sizePtr
          .asFunction<int Function(ffi.Pointer<snd_rawmidi_params_t>)>();

  int snd_rawmidi_params_set_avail_min(
    ffi.Pointer<snd_rawmidi_t> rmidi,
    ffi.Pointer<snd_rawmidi_params_t> params,
    int val,
  ) {
    return _snd_rawmidi_params_set_avail_min(
      rmidi,
      params,
      val,
    );
  }

  late final _snd_rawmidi_params_set_avail_minPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_rawmidi_t>,
              ffi.Pointer<snd_rawmidi_params_t>,
              ffi.Size)>>('snd_rawmidi_params_set_avail_min');
  late final _snd_rawmidi_params_set_avail_min =
      _snd_rawmidi_params_set_avail_minPtr.asFunction<
          int Function(ffi.Pointer<snd_rawmidi_t>,
              ffi.Pointer<snd_rawmidi_params_t>, int)>();

  int snd_rawmidi_params_get_avail_min(
    ffi.Pointer<snd_rawmidi_params_t> params,
  ) {
    return _snd_rawmidi_params_get_avail_min(
      params,
    );
  }

  late final _snd_rawmidi_params_get_avail_minPtr = _lookup<
          ffi.NativeFunction<
              ffi.Size Function(ffi.Pointer<snd_rawmidi_params_t>)>>(
      'snd_rawmidi_params_get_avail_min');
  late final _snd_rawmidi_params_get_avail_min =
      _snd_rawmidi_params_get_avail_minPtr
          .asFunction<int Function(ffi.Pointer<snd_rawmidi_params_t>)>();

  int snd_rawmidi_params_set_no_active_sensing(
    ffi.Pointer<snd_rawmidi_t> rmidi,
    ffi.Pointer<snd_rawmidi_params_t> params,
    int val,
  ) {
    return _snd_rawmidi_params_set_no_active_sensing(
      rmidi,
      params,
      val,
    );
  }

  late final _snd_rawmidi_params_set_no_active_sensingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_rawmidi_t>,
              ffi.Pointer<snd_rawmidi_params_t>,
              ffi.Int)>>('snd_rawmidi_params_set_no_active_sensing');
  late final _snd_rawmidi_params_set_no_active_sensing =
      _snd_rawmidi_params_set_no_active_sensingPtr.asFunction<
          int Function(ffi.Pointer<snd_rawmidi_t>,
              ffi.Pointer<snd_rawmidi_params_t>, int)>();

  int snd_rawmidi_params_get_no_active_sensing(
    ffi.Pointer<snd_rawmidi_params_t> params,
  ) {
    return _snd_rawmidi_params_get_no_active_sensing(
      params,
    );
  }

  late final _snd_rawmidi_params_get_no_active_sensingPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_rawmidi_params_t>)>>(
      'snd_rawmidi_params_get_no_active_sensing');
  late final _snd_rawmidi_params_get_no_active_sensing =
      _snd_rawmidi_params_get_no_active_sensingPtr
          .asFunction<int Function(ffi.Pointer<snd_rawmidi_params_t>)>();

  int snd_rawmidi_params_set_read_mode(
    ffi.Pointer<snd_rawmidi_t> rawmidi,
    ffi.Pointer<snd_rawmidi_params_t> params,
    int val,
  ) {
    return _snd_rawmidi_params_set_read_mode(
      rawmidi,
      params,
      val,
    );
  }

  late final _snd_rawmidi_params_set_read_modePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_rawmidi_t>,
              ffi.Pointer<snd_rawmidi_params_t>,
              ffi.Int32)>>('snd_rawmidi_params_set_read_mode');
  late final _snd_rawmidi_params_set_read_mode =
      _snd_rawmidi_params_set_read_modePtr.asFunction<
          int Function(ffi.Pointer<snd_rawmidi_t>,
              ffi.Pointer<snd_rawmidi_params_t>, int)>();

  int snd_rawmidi_params_get_read_mode(
    ffi.Pointer<snd_rawmidi_params_t> params,
  ) {
    return _snd_rawmidi_params_get_read_mode(
      params,
    );
  }

  late final _snd_rawmidi_params_get_read_modePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<snd_rawmidi_params_t>)>>(
      'snd_rawmidi_params_get_read_mode');
  late final _snd_rawmidi_params_get_read_mode =
      _snd_rawmidi_params_get_read_modePtr
          .asFunction<int Function(ffi.Pointer<snd_rawmidi_params_t>)>();

  int snd_rawmidi_params_set_clock_type(
    ffi.Pointer<snd_rawmidi_t> rawmidi,
    ffi.Pointer<snd_rawmidi_params_t> params,
    int val,
  ) {
    return _snd_rawmidi_params_set_clock_type(
      rawmidi,
      params,
      val,
    );
  }

  late final _snd_rawmidi_params_set_clock_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_rawmidi_t>,
              ffi.Pointer<snd_rawmidi_params_t>,
              ffi.Int32)>>('snd_rawmidi_params_set_clock_type');
  late final _snd_rawmidi_params_set_clock_type =
      _snd_rawmidi_params_set_clock_typePtr.asFunction<
          int Function(ffi.Pointer<snd_rawmidi_t>,
              ffi.Pointer<snd_rawmidi_params_t>, int)>();

  int snd_rawmidi_params_get_clock_type(
    ffi.Pointer<snd_rawmidi_params_t> params,
  ) {
    return _snd_rawmidi_params_get_clock_type(
      params,
    );
  }

  late final _snd_rawmidi_params_get_clock_typePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<snd_rawmidi_params_t>)>>(
      'snd_rawmidi_params_get_clock_type');
  late final _snd_rawmidi_params_get_clock_type =
      _snd_rawmidi_params_get_clock_typePtr
          .asFunction<int Function(ffi.Pointer<snd_rawmidi_params_t>)>();

  int snd_rawmidi_params(
    ffi.Pointer<snd_rawmidi_t> rmidi,
    ffi.Pointer<snd_rawmidi_params_t> params,
  ) {
    return _snd_rawmidi_params(
      rmidi,
      params,
    );
  }

  late final _snd_rawmidi_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_rawmidi_t>,
              ffi.Pointer<snd_rawmidi_params_t>)>>('snd_rawmidi_params');
  late final _snd_rawmidi_params = _snd_rawmidi_paramsPtr.asFunction<
      int Function(
          ffi.Pointer<snd_rawmidi_t>, ffi.Pointer<snd_rawmidi_params_t>)>();

  int snd_rawmidi_params_current(
    ffi.Pointer<snd_rawmidi_t> rmidi,
    ffi.Pointer<snd_rawmidi_params_t> params,
  ) {
    return _snd_rawmidi_params_current(
      rmidi,
      params,
    );
  }

  late final _snd_rawmidi_params_currentPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_rawmidi_t>,
                  ffi.Pointer<snd_rawmidi_params_t>)>>(
      'snd_rawmidi_params_current');
  late final _snd_rawmidi_params_current =
      _snd_rawmidi_params_currentPtr.asFunction<
          int Function(
              ffi.Pointer<snd_rawmidi_t>, ffi.Pointer<snd_rawmidi_params_t>)>();

  int snd_rawmidi_status_sizeof() {
    return _snd_rawmidi_status_sizeof();
  }

  late final _snd_rawmidi_status_sizeofPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>(
          'snd_rawmidi_status_sizeof');
  late final _snd_rawmidi_status_sizeof =
      _snd_rawmidi_status_sizeofPtr.asFunction<int Function()>();

  int snd_rawmidi_status_malloc(
    ffi.Pointer<ffi.Pointer<snd_rawmidi_status_t>> ptr,
  ) {
    return _snd_rawmidi_status_malloc(
      ptr,
    );
  }

  late final _snd_rawmidi_status_mallocPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Pointer<snd_rawmidi_status_t>>)>>(
      'snd_rawmidi_status_malloc');
  late final _snd_rawmidi_status_malloc =
      _snd_rawmidi_status_mallocPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<snd_rawmidi_status_t>>)>();

  void snd_rawmidi_status_free(
    ffi.Pointer<snd_rawmidi_status_t> obj,
  ) {
    return _snd_rawmidi_status_free(
      obj,
    );
  }

  late final _snd_rawmidi_status_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<snd_rawmidi_status_t>)>>('snd_rawmidi_status_free');
  late final _snd_rawmidi_status_free = _snd_rawmidi_status_freePtr
      .asFunction<void Function(ffi.Pointer<snd_rawmidi_status_t>)>();

  void snd_rawmidi_status_copy(
    ffi.Pointer<snd_rawmidi_status_t> dst,
    ffi.Pointer<snd_rawmidi_status_t> src,
  ) {
    return _snd_rawmidi_status_copy(
      dst,
      src,
    );
  }

  late final _snd_rawmidi_status_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_rawmidi_status_t>,
              ffi.Pointer<snd_rawmidi_status_t>)>>('snd_rawmidi_status_copy');
  late final _snd_rawmidi_status_copy = _snd_rawmidi_status_copyPtr.asFunction<
      void Function(ffi.Pointer<snd_rawmidi_status_t>,
          ffi.Pointer<snd_rawmidi_status_t>)>();

  void snd_rawmidi_status_get_tstamp(
    ffi.Pointer<snd_rawmidi_status_t> obj,
    ffi.Pointer<snd_htimestamp_t> ptr,
  ) {
    return _snd_rawmidi_status_get_tstamp(
      obj,
      ptr,
    );
  }

  late final _snd_rawmidi_status_get_tstampPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_rawmidi_status_t>,
              ffi.Pointer<snd_htimestamp_t>)>>('snd_rawmidi_status_get_tstamp');
  late final _snd_rawmidi_status_get_tstamp =
      _snd_rawmidi_status_get_tstampPtr.asFunction<
          void Function(ffi.Pointer<snd_rawmidi_status_t>,
              ffi.Pointer<snd_htimestamp_t>)>();

  int snd_rawmidi_status_get_avail(
    ffi.Pointer<snd_rawmidi_status_t> obj,
  ) {
    return _snd_rawmidi_status_get_avail(
      obj,
    );
  }

  late final _snd_rawmidi_status_get_availPtr = _lookup<
          ffi.NativeFunction<
              ffi.Size Function(ffi.Pointer<snd_rawmidi_status_t>)>>(
      'snd_rawmidi_status_get_avail');
  late final _snd_rawmidi_status_get_avail = _snd_rawmidi_status_get_availPtr
      .asFunction<int Function(ffi.Pointer<snd_rawmidi_status_t>)>();

  int snd_rawmidi_status_get_xruns(
    ffi.Pointer<snd_rawmidi_status_t> obj,
  ) {
    return _snd_rawmidi_status_get_xruns(
      obj,
    );
  }

  late final _snd_rawmidi_status_get_xrunsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Size Function(ffi.Pointer<snd_rawmidi_status_t>)>>(
      'snd_rawmidi_status_get_xruns');
  late final _snd_rawmidi_status_get_xruns = _snd_rawmidi_status_get_xrunsPtr
      .asFunction<int Function(ffi.Pointer<snd_rawmidi_status_t>)>();

  int snd_rawmidi_status(
    ffi.Pointer<snd_rawmidi_t> rmidi,
    ffi.Pointer<snd_rawmidi_status_t> status,
  ) {
    return _snd_rawmidi_status(
      rmidi,
      status,
    );
  }

  late final _snd_rawmidi_statusPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_rawmidi_t>,
              ffi.Pointer<snd_rawmidi_status_t>)>>('snd_rawmidi_status');
  late final _snd_rawmidi_status = _snd_rawmidi_statusPtr.asFunction<
      int Function(
          ffi.Pointer<snd_rawmidi_t>, ffi.Pointer<snd_rawmidi_status_t>)>();

  int snd_rawmidi_drain(
    ffi.Pointer<snd_rawmidi_t> rmidi,
  ) {
    return _snd_rawmidi_drain(
      rmidi,
    );
  }

  late final _snd_rawmidi_drainPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_rawmidi_t>)>>(
          'snd_rawmidi_drain');
  late final _snd_rawmidi_drain = _snd_rawmidi_drainPtr
      .asFunction<int Function(ffi.Pointer<snd_rawmidi_t>)>();

  int snd_rawmidi_drop(
    ffi.Pointer<snd_rawmidi_t> rmidi,
  ) {
    return _snd_rawmidi_drop(
      rmidi,
    );
  }

  late final _snd_rawmidi_dropPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_rawmidi_t>)>>(
          'snd_rawmidi_drop');
  late final _snd_rawmidi_drop = _snd_rawmidi_dropPtr
      .asFunction<int Function(ffi.Pointer<snd_rawmidi_t>)>();

  int snd_rawmidi_write(
    ffi.Pointer<snd_rawmidi_t> rmidi,
    ffi.Pointer<ffi.Void> buffer,
    int size,
  ) {
    return _snd_rawmidi_write(
      rmidi,
      buffer,
      size,
    );
  }

  late final _snd_rawmidi_writePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Pointer<snd_rawmidi_t>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('snd_rawmidi_write');
  late final _snd_rawmidi_write = _snd_rawmidi_writePtr.asFunction<
      int Function(ffi.Pointer<snd_rawmidi_t>, ffi.Pointer<ffi.Void>, int)>();

  int snd_rawmidi_read(
    ffi.Pointer<snd_rawmidi_t> rmidi,
    ffi.Pointer<ffi.Void> buffer,
    int size,
  ) {
    return _snd_rawmidi_read(
      rmidi,
      buffer,
      size,
    );
  }

  late final _snd_rawmidi_readPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Pointer<snd_rawmidi_t>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('snd_rawmidi_read');
  late final _snd_rawmidi_read = _snd_rawmidi_readPtr.asFunction<
      int Function(ffi.Pointer<snd_rawmidi_t>, ffi.Pointer<ffi.Void>, int)>();

  int snd_rawmidi_tread(
    ffi.Pointer<snd_rawmidi_t> rmidi,
    ffi.Pointer<timespec> tstamp,
    ffi.Pointer<ffi.Void> buffer,
    int size,
  ) {
    return _snd_rawmidi_tread(
      rmidi,
      tstamp,
      buffer,
      size,
    );
  }

  late final _snd_rawmidi_treadPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Pointer<snd_rawmidi_t>, ffi.Pointer<timespec>,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('snd_rawmidi_tread');
  late final _snd_rawmidi_tread = _snd_rawmidi_treadPtr.asFunction<
      int Function(ffi.Pointer<snd_rawmidi_t>, ffi.Pointer<timespec>,
          ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> snd_rawmidi_name(
    ffi.Pointer<snd_rawmidi_t> rmidi,
  ) {
    return _snd_rawmidi_name(
      rmidi,
    );
  }

  late final _snd_rawmidi_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<snd_rawmidi_t>)>>('snd_rawmidi_name');
  late final _snd_rawmidi_name = _snd_rawmidi_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<snd_rawmidi_t>)>();

  int snd_rawmidi_type(
    ffi.Pointer<snd_rawmidi_t> rmidi,
  ) {
    return _snd_rawmidi_type(
      rmidi,
    );
  }

  late final _snd_rawmidi_typePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<snd_rawmidi_t>)>>(
      'snd_rawmidi_type');
  late final _snd_rawmidi_type = _snd_rawmidi_typePtr
      .asFunction<int Function(ffi.Pointer<snd_rawmidi_t>)>();

  int snd_rawmidi_stream(
    ffi.Pointer<snd_rawmidi_t> rawmidi,
  ) {
    return _snd_rawmidi_stream(
      rawmidi,
    );
  }

  late final _snd_rawmidi_streamPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<snd_rawmidi_t>)>>(
      'snd_rawmidi_stream');
  late final _snd_rawmidi_stream = _snd_rawmidi_streamPtr
      .asFunction<int Function(ffi.Pointer<snd_rawmidi_t>)>();

  int snd_timer_query_open(
    ffi.Pointer<ffi.Pointer<snd_timer_query_t>> handle,
    ffi.Pointer<ffi.Char> name,
    int mode,
  ) {
    return _snd_timer_query_open(
      handle,
      name,
      mode,
    );
  }

  late final _snd_timer_query_openPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<snd_timer_query_t>>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('snd_timer_query_open');
  late final _snd_timer_query_open = _snd_timer_query_openPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<snd_timer_query_t>>,
          ffi.Pointer<ffi.Char>, int)>();

  int snd_timer_query_open_lconf(
    ffi.Pointer<ffi.Pointer<snd_timer_query_t>> handle,
    ffi.Pointer<ffi.Char> name,
    int mode,
    ffi.Pointer<snd_config_t> lconf,
  ) {
    return _snd_timer_query_open_lconf(
      handle,
      name,
      mode,
      lconf,
    );
  }

  late final _snd_timer_query_open_lconfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<snd_timer_query_t>>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<snd_config_t>)>>('snd_timer_query_open_lconf');
  late final _snd_timer_query_open_lconf =
      _snd_timer_query_open_lconfPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<snd_timer_query_t>>,
              ffi.Pointer<ffi.Char>, int, ffi.Pointer<snd_config_t>)>();

  int snd_timer_query_close(
    ffi.Pointer<snd_timer_query_t> handle,
  ) {
    return _snd_timer_query_close(
      handle,
    );
  }

  late final _snd_timer_query_closePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_timer_query_t>)>>(
      'snd_timer_query_close');
  late final _snd_timer_query_close = _snd_timer_query_closePtr
      .asFunction<int Function(ffi.Pointer<snd_timer_query_t>)>();

  int snd_timer_query_next_device(
    ffi.Pointer<snd_timer_query_t> handle,
    ffi.Pointer<snd_timer_id_t> tid,
  ) {
    return _snd_timer_query_next_device(
      handle,
      tid,
    );
  }

  late final _snd_timer_query_next_devicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_timer_query_t>,
              ffi.Pointer<snd_timer_id_t>)>>('snd_timer_query_next_device');
  late final _snd_timer_query_next_device =
      _snd_timer_query_next_devicePtr.asFunction<
          int Function(
              ffi.Pointer<snd_timer_query_t>, ffi.Pointer<snd_timer_id_t>)>();

  int snd_timer_query_info(
    ffi.Pointer<snd_timer_query_t> handle,
    ffi.Pointer<snd_timer_ginfo_t> info,
  ) {
    return _snd_timer_query_info(
      handle,
      info,
    );
  }

  late final _snd_timer_query_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_timer_query_t>,
              ffi.Pointer<snd_timer_ginfo_t>)>>('snd_timer_query_info');
  late final _snd_timer_query_info = _snd_timer_query_infoPtr.asFunction<
      int Function(
          ffi.Pointer<snd_timer_query_t>, ffi.Pointer<snd_timer_ginfo_t>)>();

  int snd_timer_query_params(
    ffi.Pointer<snd_timer_query_t> handle,
    ffi.Pointer<snd_timer_gparams_t> params,
  ) {
    return _snd_timer_query_params(
      handle,
      params,
    );
  }

  late final _snd_timer_query_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_timer_query_t>,
              ffi.Pointer<snd_timer_gparams_t>)>>('snd_timer_query_params');
  late final _snd_timer_query_params = _snd_timer_query_paramsPtr.asFunction<
      int Function(
          ffi.Pointer<snd_timer_query_t>, ffi.Pointer<snd_timer_gparams_t>)>();

  int snd_timer_query_status(
    ffi.Pointer<snd_timer_query_t> handle,
    ffi.Pointer<snd_timer_gstatus_t> status,
  ) {
    return _snd_timer_query_status(
      handle,
      status,
    );
  }

  late final _snd_timer_query_statusPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_timer_query_t>,
              ffi.Pointer<snd_timer_gstatus_t>)>>('snd_timer_query_status');
  late final _snd_timer_query_status = _snd_timer_query_statusPtr.asFunction<
      int Function(
          ffi.Pointer<snd_timer_query_t>, ffi.Pointer<snd_timer_gstatus_t>)>();

  int snd_timer_open(
    ffi.Pointer<ffi.Pointer<snd_timer_t>> handle,
    ffi.Pointer<ffi.Char> name,
    int mode,
  ) {
    return _snd_timer_open(
      handle,
      name,
      mode,
    );
  }

  late final _snd_timer_openPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<snd_timer_t>>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('snd_timer_open');
  late final _snd_timer_open = _snd_timer_openPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<snd_timer_t>>, ffi.Pointer<ffi.Char>, int)>();

  int snd_timer_open_lconf(
    ffi.Pointer<ffi.Pointer<snd_timer_t>> handle,
    ffi.Pointer<ffi.Char> name,
    int mode,
    ffi.Pointer<snd_config_t> lconf,
  ) {
    return _snd_timer_open_lconf(
      handle,
      name,
      mode,
      lconf,
    );
  }

  late final _snd_timer_open_lconfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<snd_timer_t>>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<snd_config_t>)>>('snd_timer_open_lconf');
  late final _snd_timer_open_lconf = _snd_timer_open_lconfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<snd_timer_t>>, ffi.Pointer<ffi.Char>,
          int, ffi.Pointer<snd_config_t>)>();

  int snd_timer_close(
    ffi.Pointer<snd_timer_t> handle,
  ) {
    return _snd_timer_close(
      handle,
    );
  }

  late final _snd_timer_closePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_timer_t>)>>(
          'snd_timer_close');
  late final _snd_timer_close =
      _snd_timer_closePtr.asFunction<int Function(ffi.Pointer<snd_timer_t>)>();

  int snd_async_add_timer_handler(
    ffi.Pointer<ffi.Pointer<snd_async_handler_t>> handler,
    ffi.Pointer<snd_timer_t> timer,
    snd_async_callback_t callback,
    ffi.Pointer<ffi.Void> private_data,
  ) {
    return _snd_async_add_timer_handler(
      handler,
      timer,
      callback,
      private_data,
    );
  }

  late final _snd_async_add_timer_handlerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<snd_async_handler_t>>,
              ffi.Pointer<snd_timer_t>,
              snd_async_callback_t,
              ffi.Pointer<ffi.Void>)>>('snd_async_add_timer_handler');
  late final _snd_async_add_timer_handler =
      _snd_async_add_timer_handlerPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Pointer<snd_async_handler_t>>,
              ffi.Pointer<snd_timer_t>,
              snd_async_callback_t,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<snd_timer_t> snd_async_handler_get_timer(
    ffi.Pointer<snd_async_handler_t> handler,
  ) {
    return _snd_async_handler_get_timer(
      handler,
    );
  }

  late final _snd_async_handler_get_timerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<snd_timer_t> Function(
                  ffi.Pointer<snd_async_handler_t>)>>(
      'snd_async_handler_get_timer');
  late final _snd_async_handler_get_timer =
      _snd_async_handler_get_timerPtr.asFunction<
          ffi.Pointer<snd_timer_t> Function(
              ffi.Pointer<snd_async_handler_t>)>();

  int snd_timer_poll_descriptors_count(
    ffi.Pointer<snd_timer_t> handle,
  ) {
    return _snd_timer_poll_descriptors_count(
      handle,
    );
  }

  late final _snd_timer_poll_descriptors_countPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_timer_t>)>>(
          'snd_timer_poll_descriptors_count');
  late final _snd_timer_poll_descriptors_count =
      _snd_timer_poll_descriptors_countPtr
          .asFunction<int Function(ffi.Pointer<snd_timer_t>)>();

  int snd_timer_poll_descriptors(
    ffi.Pointer<snd_timer_t> handle,
    ffi.Pointer<pollfd> pfds,
    int space,
  ) {
    return _snd_timer_poll_descriptors(
      handle,
      pfds,
      space,
    );
  }

  late final _snd_timer_poll_descriptorsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_timer_t>, ffi.Pointer<pollfd>,
              ffi.UnsignedInt)>>('snd_timer_poll_descriptors');
  late final _snd_timer_poll_descriptors =
      _snd_timer_poll_descriptorsPtr.asFunction<
          int Function(ffi.Pointer<snd_timer_t>, ffi.Pointer<pollfd>, int)>();

  int snd_timer_poll_descriptors_revents(
    ffi.Pointer<snd_timer_t> timer,
    ffi.Pointer<pollfd> pfds,
    int nfds,
    ffi.Pointer<ffi.UnsignedShort> revents,
  ) {
    return _snd_timer_poll_descriptors_revents(
      timer,
      pfds,
      nfds,
      revents,
    );
  }

  late final _snd_timer_poll_descriptors_reventsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_timer_t>, ffi.Pointer<pollfd>,
                  ffi.UnsignedInt, ffi.Pointer<ffi.UnsignedShort>)>>(
      'snd_timer_poll_descriptors_revents');
  late final _snd_timer_poll_descriptors_revents =
      _snd_timer_poll_descriptors_reventsPtr.asFunction<
          int Function(ffi.Pointer<snd_timer_t>, ffi.Pointer<pollfd>, int,
              ffi.Pointer<ffi.UnsignedShort>)>();

  int snd_timer_info(
    ffi.Pointer<snd_timer_t> handle,
    ffi.Pointer<snd_timer_info_t> timer,
  ) {
    return _snd_timer_info(
      handle,
      timer,
    );
  }

  late final _snd_timer_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_timer_t>,
              ffi.Pointer<snd_timer_info_t>)>>('snd_timer_info');
  late final _snd_timer_info = _snd_timer_infoPtr.asFunction<
      int Function(ffi.Pointer<snd_timer_t>, ffi.Pointer<snd_timer_info_t>)>();

  int snd_timer_params(
    ffi.Pointer<snd_timer_t> handle,
    ffi.Pointer<snd_timer_params_t> params,
  ) {
    return _snd_timer_params(
      handle,
      params,
    );
  }

  late final _snd_timer_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_timer_t>,
              ffi.Pointer<snd_timer_params_t>)>>('snd_timer_params');
  late final _snd_timer_params = _snd_timer_paramsPtr.asFunction<
      int Function(
          ffi.Pointer<snd_timer_t>, ffi.Pointer<snd_timer_params_t>)>();

  int snd_timer_status(
    ffi.Pointer<snd_timer_t> handle,
    ffi.Pointer<snd_timer_status_t> status,
  ) {
    return _snd_timer_status(
      handle,
      status,
    );
  }

  late final _snd_timer_statusPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_timer_t>,
              ffi.Pointer<snd_timer_status_t>)>>('snd_timer_status');
  late final _snd_timer_status = _snd_timer_statusPtr.asFunction<
      int Function(
          ffi.Pointer<snd_timer_t>, ffi.Pointer<snd_timer_status_t>)>();

  int snd_timer_start(
    ffi.Pointer<snd_timer_t> handle,
  ) {
    return _snd_timer_start(
      handle,
    );
  }

  late final _snd_timer_startPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_timer_t>)>>(
          'snd_timer_start');
  late final _snd_timer_start =
      _snd_timer_startPtr.asFunction<int Function(ffi.Pointer<snd_timer_t>)>();

  int snd_timer_stop(
    ffi.Pointer<snd_timer_t> handle,
  ) {
    return _snd_timer_stop(
      handle,
    );
  }

  late final _snd_timer_stopPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_timer_t>)>>(
          'snd_timer_stop');
  late final _snd_timer_stop =
      _snd_timer_stopPtr.asFunction<int Function(ffi.Pointer<snd_timer_t>)>();

  int snd_timer_continue(
    ffi.Pointer<snd_timer_t> handle,
  ) {
    return _snd_timer_continue(
      handle,
    );
  }

  late final _snd_timer_continuePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_timer_t>)>>(
          'snd_timer_continue');
  late final _snd_timer_continue = _snd_timer_continuePtr
      .asFunction<int Function(ffi.Pointer<snd_timer_t>)>();

  int snd_timer_read(
    ffi.Pointer<snd_timer_t> handle,
    ffi.Pointer<ffi.Void> buffer,
    int size,
  ) {
    return _snd_timer_read(
      handle,
      buffer,
      size,
    );
  }

  late final _snd_timer_readPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Pointer<snd_timer_t>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('snd_timer_read');
  late final _snd_timer_read = _snd_timer_readPtr.asFunction<
      int Function(ffi.Pointer<snd_timer_t>, ffi.Pointer<ffi.Void>, int)>();

  int snd_timer_id_sizeof() {
    return _snd_timer_id_sizeof();
  }

  late final _snd_timer_id_sizeofPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('snd_timer_id_sizeof');
  late final _snd_timer_id_sizeof =
      _snd_timer_id_sizeofPtr.asFunction<int Function()>();

  int snd_timer_id_malloc(
    ffi.Pointer<ffi.Pointer<snd_timer_id_t>> ptr,
  ) {
    return _snd_timer_id_malloc(
      ptr,
    );
  }

  late final _snd_timer_id_mallocPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Pointer<snd_timer_id_t>>)>>(
      'snd_timer_id_malloc');
  late final _snd_timer_id_malloc = _snd_timer_id_mallocPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<snd_timer_id_t>>)>();

  void snd_timer_id_free(
    ffi.Pointer<snd_timer_id_t> obj,
  ) {
    return _snd_timer_id_free(
      obj,
    );
  }

  late final _snd_timer_id_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<snd_timer_id_t>)>>(
      'snd_timer_id_free');
  late final _snd_timer_id_free = _snd_timer_id_freePtr
      .asFunction<void Function(ffi.Pointer<snd_timer_id_t>)>();

  void snd_timer_id_copy(
    ffi.Pointer<snd_timer_id_t> dst,
    ffi.Pointer<snd_timer_id_t> src,
  ) {
    return _snd_timer_id_copy(
      dst,
      src,
    );
  }

  late final _snd_timer_id_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_timer_id_t>,
              ffi.Pointer<snd_timer_id_t>)>>('snd_timer_id_copy');
  late final _snd_timer_id_copy = _snd_timer_id_copyPtr.asFunction<
      void Function(
          ffi.Pointer<snd_timer_id_t>, ffi.Pointer<snd_timer_id_t>)>();

  void snd_timer_id_set_class(
    ffi.Pointer<snd_timer_id_t> id,
    int dev_class,
  ) {
    return _snd_timer_id_set_class(
      id,
      dev_class,
    );
  }

  late final _snd_timer_id_set_classPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<snd_timer_id_t>, ffi.Int)>>('snd_timer_id_set_class');
  late final _snd_timer_id_set_class = _snd_timer_id_set_classPtr
      .asFunction<void Function(ffi.Pointer<snd_timer_id_t>, int)>();

  int snd_timer_id_get_class(
    ffi.Pointer<snd_timer_id_t> id,
  ) {
    return _snd_timer_id_get_class(
      id,
    );
  }

  late final _snd_timer_id_get_classPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_timer_id_t>)>>(
      'snd_timer_id_get_class');
  late final _snd_timer_id_get_class = _snd_timer_id_get_classPtr
      .asFunction<int Function(ffi.Pointer<snd_timer_id_t>)>();

  void snd_timer_id_set_sclass(
    ffi.Pointer<snd_timer_id_t> id,
    int dev_sclass,
  ) {
    return _snd_timer_id_set_sclass(
      id,
      dev_sclass,
    );
  }

  late final _snd_timer_id_set_sclassPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_timer_id_t>,
              ffi.Int)>>('snd_timer_id_set_sclass');
  late final _snd_timer_id_set_sclass = _snd_timer_id_set_sclassPtr
      .asFunction<void Function(ffi.Pointer<snd_timer_id_t>, int)>();

  int snd_timer_id_get_sclass(
    ffi.Pointer<snd_timer_id_t> id,
  ) {
    return _snd_timer_id_get_sclass(
      id,
    );
  }

  late final _snd_timer_id_get_sclassPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_timer_id_t>)>>(
      'snd_timer_id_get_sclass');
  late final _snd_timer_id_get_sclass = _snd_timer_id_get_sclassPtr
      .asFunction<int Function(ffi.Pointer<snd_timer_id_t>)>();

  void snd_timer_id_set_card(
    ffi.Pointer<snd_timer_id_t> id,
    int card,
  ) {
    return _snd_timer_id_set_card(
      id,
      card,
    );
  }

  late final _snd_timer_id_set_cardPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<snd_timer_id_t>, ffi.Int)>>('snd_timer_id_set_card');
  late final _snd_timer_id_set_card = _snd_timer_id_set_cardPtr
      .asFunction<void Function(ffi.Pointer<snd_timer_id_t>, int)>();

  int snd_timer_id_get_card(
    ffi.Pointer<snd_timer_id_t> id,
  ) {
    return _snd_timer_id_get_card(
      id,
    );
  }

  late final _snd_timer_id_get_cardPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_timer_id_t>)>>(
      'snd_timer_id_get_card');
  late final _snd_timer_id_get_card = _snd_timer_id_get_cardPtr
      .asFunction<int Function(ffi.Pointer<snd_timer_id_t>)>();

  void snd_timer_id_set_device(
    ffi.Pointer<snd_timer_id_t> id,
    int device,
  ) {
    return _snd_timer_id_set_device(
      id,
      device,
    );
  }

  late final _snd_timer_id_set_devicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_timer_id_t>,
              ffi.Int)>>('snd_timer_id_set_device');
  late final _snd_timer_id_set_device = _snd_timer_id_set_devicePtr
      .asFunction<void Function(ffi.Pointer<snd_timer_id_t>, int)>();

  int snd_timer_id_get_device(
    ffi.Pointer<snd_timer_id_t> id,
  ) {
    return _snd_timer_id_get_device(
      id,
    );
  }

  late final _snd_timer_id_get_devicePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_timer_id_t>)>>(
      'snd_timer_id_get_device');
  late final _snd_timer_id_get_device = _snd_timer_id_get_devicePtr
      .asFunction<int Function(ffi.Pointer<snd_timer_id_t>)>();

  void snd_timer_id_set_subdevice(
    ffi.Pointer<snd_timer_id_t> id,
    int subdevice,
  ) {
    return _snd_timer_id_set_subdevice(
      id,
      subdevice,
    );
  }

  late final _snd_timer_id_set_subdevicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_timer_id_t>,
              ffi.Int)>>('snd_timer_id_set_subdevice');
  late final _snd_timer_id_set_subdevice = _snd_timer_id_set_subdevicePtr
      .asFunction<void Function(ffi.Pointer<snd_timer_id_t>, int)>();

  int snd_timer_id_get_subdevice(
    ffi.Pointer<snd_timer_id_t> id,
  ) {
    return _snd_timer_id_get_subdevice(
      id,
    );
  }

  late final _snd_timer_id_get_subdevicePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_timer_id_t>)>>(
      'snd_timer_id_get_subdevice');
  late final _snd_timer_id_get_subdevice = _snd_timer_id_get_subdevicePtr
      .asFunction<int Function(ffi.Pointer<snd_timer_id_t>)>();

  int snd_timer_ginfo_sizeof() {
    return _snd_timer_ginfo_sizeof();
  }

  late final _snd_timer_ginfo_sizeofPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>(
          'snd_timer_ginfo_sizeof');
  late final _snd_timer_ginfo_sizeof =
      _snd_timer_ginfo_sizeofPtr.asFunction<int Function()>();

  int snd_timer_ginfo_malloc(
    ffi.Pointer<ffi.Pointer<snd_timer_ginfo_t>> ptr,
  ) {
    return _snd_timer_ginfo_malloc(
      ptr,
    );
  }

  late final _snd_timer_ginfo_mallocPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Pointer<snd_timer_ginfo_t>>)>>(
      'snd_timer_ginfo_malloc');
  late final _snd_timer_ginfo_malloc = _snd_timer_ginfo_mallocPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<snd_timer_ginfo_t>>)>();

  void snd_timer_ginfo_free(
    ffi.Pointer<snd_timer_ginfo_t> obj,
  ) {
    return _snd_timer_ginfo_free(
      obj,
    );
  }

  late final _snd_timer_ginfo_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<snd_timer_ginfo_t>)>>('snd_timer_ginfo_free');
  late final _snd_timer_ginfo_free = _snd_timer_ginfo_freePtr
      .asFunction<void Function(ffi.Pointer<snd_timer_ginfo_t>)>();

  void snd_timer_ginfo_copy(
    ffi.Pointer<snd_timer_ginfo_t> dst,
    ffi.Pointer<snd_timer_ginfo_t> src,
  ) {
    return _snd_timer_ginfo_copy(
      dst,
      src,
    );
  }

  late final _snd_timer_ginfo_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_timer_ginfo_t>,
              ffi.Pointer<snd_timer_ginfo_t>)>>('snd_timer_ginfo_copy');
  late final _snd_timer_ginfo_copy = _snd_timer_ginfo_copyPtr.asFunction<
      void Function(
          ffi.Pointer<snd_timer_ginfo_t>, ffi.Pointer<snd_timer_ginfo_t>)>();

  int snd_timer_ginfo_set_tid(
    ffi.Pointer<snd_timer_ginfo_t> obj,
    ffi.Pointer<snd_timer_id_t> tid,
  ) {
    return _snd_timer_ginfo_set_tid(
      obj,
      tid,
    );
  }

  late final _snd_timer_ginfo_set_tidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_timer_ginfo_t>,
              ffi.Pointer<snd_timer_id_t>)>>('snd_timer_ginfo_set_tid');
  late final _snd_timer_ginfo_set_tid = _snd_timer_ginfo_set_tidPtr.asFunction<
      int Function(
          ffi.Pointer<snd_timer_ginfo_t>, ffi.Pointer<snd_timer_id_t>)>();

  ffi.Pointer<snd_timer_id_t> snd_timer_ginfo_get_tid(
    ffi.Pointer<snd_timer_ginfo_t> obj,
  ) {
    return _snd_timer_ginfo_get_tid(
      obj,
    );
  }

  late final _snd_timer_ginfo_get_tidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<snd_timer_id_t> Function(
              ffi.Pointer<snd_timer_ginfo_t>)>>('snd_timer_ginfo_get_tid');
  late final _snd_timer_ginfo_get_tid = _snd_timer_ginfo_get_tidPtr.asFunction<
      ffi.Pointer<snd_timer_id_t> Function(ffi.Pointer<snd_timer_ginfo_t>)>();

  int snd_timer_ginfo_get_flags(
    ffi.Pointer<snd_timer_ginfo_t> obj,
  ) {
    return _snd_timer_ginfo_get_flags(
      obj,
    );
  }

  late final _snd_timer_ginfo_get_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<snd_timer_ginfo_t>)>>('snd_timer_ginfo_get_flags');
  late final _snd_timer_ginfo_get_flags = _snd_timer_ginfo_get_flagsPtr
      .asFunction<int Function(ffi.Pointer<snd_timer_ginfo_t>)>();

  int snd_timer_ginfo_get_card(
    ffi.Pointer<snd_timer_ginfo_t> obj,
  ) {
    return _snd_timer_ginfo_get_card(
      obj,
    );
  }

  late final _snd_timer_ginfo_get_cardPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_timer_ginfo_t>)>>(
      'snd_timer_ginfo_get_card');
  late final _snd_timer_ginfo_get_card = _snd_timer_ginfo_get_cardPtr
      .asFunction<int Function(ffi.Pointer<snd_timer_ginfo_t>)>();

  ffi.Pointer<ffi.Char> snd_timer_ginfo_get_id(
    ffi.Pointer<snd_timer_ginfo_t> obj,
  ) {
    return _snd_timer_ginfo_get_id(
      obj,
    );
  }

  late final _snd_timer_ginfo_get_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<snd_timer_ginfo_t>)>>('snd_timer_ginfo_get_id');
  late final _snd_timer_ginfo_get_id = _snd_timer_ginfo_get_idPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<snd_timer_ginfo_t>)>();

  ffi.Pointer<ffi.Char> snd_timer_ginfo_get_name(
    ffi.Pointer<snd_timer_ginfo_t> obj,
  ) {
    return _snd_timer_ginfo_get_name(
      obj,
    );
  }

  late final _snd_timer_ginfo_get_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<snd_timer_ginfo_t>)>>('snd_timer_ginfo_get_name');
  late final _snd_timer_ginfo_get_name =
      _snd_timer_ginfo_get_namePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<snd_timer_ginfo_t>)>();

  int snd_timer_ginfo_get_resolution(
    ffi.Pointer<snd_timer_ginfo_t> obj,
  ) {
    return _snd_timer_ginfo_get_resolution(
      obj,
    );
  }

  late final _snd_timer_ginfo_get_resolutionPtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedLong Function(ffi.Pointer<snd_timer_ginfo_t>)>>(
      'snd_timer_ginfo_get_resolution');
  late final _snd_timer_ginfo_get_resolution =
      _snd_timer_ginfo_get_resolutionPtr
          .asFunction<int Function(ffi.Pointer<snd_timer_ginfo_t>)>();

  int snd_timer_ginfo_get_resolution_min(
    ffi.Pointer<snd_timer_ginfo_t> obj,
  ) {
    return _snd_timer_ginfo_get_resolution_min(
      obj,
    );
  }

  late final _snd_timer_ginfo_get_resolution_minPtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedLong Function(ffi.Pointer<snd_timer_ginfo_t>)>>(
      'snd_timer_ginfo_get_resolution_min');
  late final _snd_timer_ginfo_get_resolution_min =
      _snd_timer_ginfo_get_resolution_minPtr
          .asFunction<int Function(ffi.Pointer<snd_timer_ginfo_t>)>();

  int snd_timer_ginfo_get_resolution_max(
    ffi.Pointer<snd_timer_ginfo_t> obj,
  ) {
    return _snd_timer_ginfo_get_resolution_max(
      obj,
    );
  }

  late final _snd_timer_ginfo_get_resolution_maxPtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedLong Function(ffi.Pointer<snd_timer_ginfo_t>)>>(
      'snd_timer_ginfo_get_resolution_max');
  late final _snd_timer_ginfo_get_resolution_max =
      _snd_timer_ginfo_get_resolution_maxPtr
          .asFunction<int Function(ffi.Pointer<snd_timer_ginfo_t>)>();

  int snd_timer_ginfo_get_clients(
    ffi.Pointer<snd_timer_ginfo_t> obj,
  ) {
    return _snd_timer_ginfo_get_clients(
      obj,
    );
  }

  late final _snd_timer_ginfo_get_clientsPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<snd_timer_ginfo_t>)>>('snd_timer_ginfo_get_clients');
  late final _snd_timer_ginfo_get_clients = _snd_timer_ginfo_get_clientsPtr
      .asFunction<int Function(ffi.Pointer<snd_timer_ginfo_t>)>();

  int snd_timer_info_sizeof() {
    return _snd_timer_info_sizeof();
  }

  late final _snd_timer_info_sizeofPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('snd_timer_info_sizeof');
  late final _snd_timer_info_sizeof =
      _snd_timer_info_sizeofPtr.asFunction<int Function()>();

  int snd_timer_info_malloc(
    ffi.Pointer<ffi.Pointer<snd_timer_info_t>> ptr,
  ) {
    return _snd_timer_info_malloc(
      ptr,
    );
  }

  late final _snd_timer_info_mallocPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Pointer<snd_timer_info_t>>)>>(
      'snd_timer_info_malloc');
  late final _snd_timer_info_malloc = _snd_timer_info_mallocPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<snd_timer_info_t>>)>();

  void snd_timer_info_free(
    ffi.Pointer<snd_timer_info_t> obj,
  ) {
    return _snd_timer_info_free(
      obj,
    );
  }

  late final _snd_timer_info_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<snd_timer_info_t>)>>(
      'snd_timer_info_free');
  late final _snd_timer_info_free = _snd_timer_info_freePtr
      .asFunction<void Function(ffi.Pointer<snd_timer_info_t>)>();

  void snd_timer_info_copy(
    ffi.Pointer<snd_timer_info_t> dst,
    ffi.Pointer<snd_timer_info_t> src,
  ) {
    return _snd_timer_info_copy(
      dst,
      src,
    );
  }

  late final _snd_timer_info_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_timer_info_t>,
              ffi.Pointer<snd_timer_info_t>)>>('snd_timer_info_copy');
  late final _snd_timer_info_copy = _snd_timer_info_copyPtr.asFunction<
      void Function(
          ffi.Pointer<snd_timer_info_t>, ffi.Pointer<snd_timer_info_t>)>();

  int snd_timer_info_is_slave(
    ffi.Pointer<snd_timer_info_t> info,
  ) {
    return _snd_timer_info_is_slave(
      info,
    );
  }

  late final _snd_timer_info_is_slavePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_timer_info_t>)>>(
      'snd_timer_info_is_slave');
  late final _snd_timer_info_is_slave = _snd_timer_info_is_slavePtr
      .asFunction<int Function(ffi.Pointer<snd_timer_info_t>)>();

  int snd_timer_info_get_card(
    ffi.Pointer<snd_timer_info_t> info,
  ) {
    return _snd_timer_info_get_card(
      info,
    );
  }

  late final _snd_timer_info_get_cardPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_timer_info_t>)>>(
      'snd_timer_info_get_card');
  late final _snd_timer_info_get_card = _snd_timer_info_get_cardPtr
      .asFunction<int Function(ffi.Pointer<snd_timer_info_t>)>();

  ffi.Pointer<ffi.Char> snd_timer_info_get_id(
    ffi.Pointer<snd_timer_info_t> info,
  ) {
    return _snd_timer_info_get_id(
      info,
    );
  }

  late final _snd_timer_info_get_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<snd_timer_info_t>)>>('snd_timer_info_get_id');
  late final _snd_timer_info_get_id = _snd_timer_info_get_idPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<snd_timer_info_t>)>();

  ffi.Pointer<ffi.Char> snd_timer_info_get_name(
    ffi.Pointer<snd_timer_info_t> info,
  ) {
    return _snd_timer_info_get_name(
      info,
    );
  }

  late final _snd_timer_info_get_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<snd_timer_info_t>)>>('snd_timer_info_get_name');
  late final _snd_timer_info_get_name = _snd_timer_info_get_namePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<snd_timer_info_t>)>();

  int snd_timer_info_get_resolution(
    ffi.Pointer<snd_timer_info_t> info,
  ) {
    return _snd_timer_info_get_resolution(
      info,
    );
  }

  late final _snd_timer_info_get_resolutionPtr = _lookup<
          ffi.NativeFunction<ffi.Long Function(ffi.Pointer<snd_timer_info_t>)>>(
      'snd_timer_info_get_resolution');
  late final _snd_timer_info_get_resolution = _snd_timer_info_get_resolutionPtr
      .asFunction<int Function(ffi.Pointer<snd_timer_info_t>)>();

  int snd_timer_params_sizeof() {
    return _snd_timer_params_sizeof();
  }

  late final _snd_timer_params_sizeofPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>(
          'snd_timer_params_sizeof');
  late final _snd_timer_params_sizeof =
      _snd_timer_params_sizeofPtr.asFunction<int Function()>();

  int snd_timer_params_malloc(
    ffi.Pointer<ffi.Pointer<snd_timer_params_t>> ptr,
  ) {
    return _snd_timer_params_malloc(
      ptr,
    );
  }

  late final _snd_timer_params_mallocPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Pointer<snd_timer_params_t>>)>>(
      'snd_timer_params_malloc');
  late final _snd_timer_params_malloc = _snd_timer_params_mallocPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<snd_timer_params_t>>)>();

  void snd_timer_params_free(
    ffi.Pointer<snd_timer_params_t> obj,
  ) {
    return _snd_timer_params_free(
      obj,
    );
  }

  late final _snd_timer_params_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<snd_timer_params_t>)>>('snd_timer_params_free');
  late final _snd_timer_params_free = _snd_timer_params_freePtr
      .asFunction<void Function(ffi.Pointer<snd_timer_params_t>)>();

  void snd_timer_params_copy(
    ffi.Pointer<snd_timer_params_t> dst,
    ffi.Pointer<snd_timer_params_t> src,
  ) {
    return _snd_timer_params_copy(
      dst,
      src,
    );
  }

  late final _snd_timer_params_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_timer_params_t>,
              ffi.Pointer<snd_timer_params_t>)>>('snd_timer_params_copy');
  late final _snd_timer_params_copy = _snd_timer_params_copyPtr.asFunction<
      void Function(
          ffi.Pointer<snd_timer_params_t>, ffi.Pointer<snd_timer_params_t>)>();

  int snd_timer_params_set_auto_start(
    ffi.Pointer<snd_timer_params_t> params,
    int auto_start,
  ) {
    return _snd_timer_params_set_auto_start(
      params,
      auto_start,
    );
  }

  late final _snd_timer_params_set_auto_startPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_timer_params_t>,
              ffi.Int)>>('snd_timer_params_set_auto_start');
  late final _snd_timer_params_set_auto_start =
      _snd_timer_params_set_auto_startPtr
          .asFunction<int Function(ffi.Pointer<snd_timer_params_t>, int)>();

  int snd_timer_params_get_auto_start(
    ffi.Pointer<snd_timer_params_t> params,
  ) {
    return _snd_timer_params_get_auto_start(
      params,
    );
  }

  late final _snd_timer_params_get_auto_startPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_timer_params_t>)>>(
      'snd_timer_params_get_auto_start');
  late final _snd_timer_params_get_auto_start =
      _snd_timer_params_get_auto_startPtr
          .asFunction<int Function(ffi.Pointer<snd_timer_params_t>)>();

  int snd_timer_params_set_exclusive(
    ffi.Pointer<snd_timer_params_t> params,
    int exclusive,
  ) {
    return _snd_timer_params_set_exclusive(
      params,
      exclusive,
    );
  }

  late final _snd_timer_params_set_exclusivePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_timer_params_t>,
              ffi.Int)>>('snd_timer_params_set_exclusive');
  late final _snd_timer_params_set_exclusive =
      _snd_timer_params_set_exclusivePtr
          .asFunction<int Function(ffi.Pointer<snd_timer_params_t>, int)>();

  int snd_timer_params_get_exclusive(
    ffi.Pointer<snd_timer_params_t> params,
  ) {
    return _snd_timer_params_get_exclusive(
      params,
    );
  }

  late final _snd_timer_params_get_exclusivePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_timer_params_t>)>>(
      'snd_timer_params_get_exclusive');
  late final _snd_timer_params_get_exclusive =
      _snd_timer_params_get_exclusivePtr
          .asFunction<int Function(ffi.Pointer<snd_timer_params_t>)>();

  int snd_timer_params_set_early_event(
    ffi.Pointer<snd_timer_params_t> params,
    int early_event,
  ) {
    return _snd_timer_params_set_early_event(
      params,
      early_event,
    );
  }

  late final _snd_timer_params_set_early_eventPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_timer_params_t>,
              ffi.Int)>>('snd_timer_params_set_early_event');
  late final _snd_timer_params_set_early_event =
      _snd_timer_params_set_early_eventPtr
          .asFunction<int Function(ffi.Pointer<snd_timer_params_t>, int)>();

  int snd_timer_params_get_early_event(
    ffi.Pointer<snd_timer_params_t> params,
  ) {
    return _snd_timer_params_get_early_event(
      params,
    );
  }

  late final _snd_timer_params_get_early_eventPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_timer_params_t>)>>(
      'snd_timer_params_get_early_event');
  late final _snd_timer_params_get_early_event =
      _snd_timer_params_get_early_eventPtr
          .asFunction<int Function(ffi.Pointer<snd_timer_params_t>)>();

  void snd_timer_params_set_ticks(
    ffi.Pointer<snd_timer_params_t> params,
    int ticks,
  ) {
    return _snd_timer_params_set_ticks(
      params,
      ticks,
    );
  }

  late final _snd_timer_params_set_ticksPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_timer_params_t>,
              ffi.Long)>>('snd_timer_params_set_ticks');
  late final _snd_timer_params_set_ticks = _snd_timer_params_set_ticksPtr
      .asFunction<void Function(ffi.Pointer<snd_timer_params_t>, int)>();

  int snd_timer_params_get_ticks(
    ffi.Pointer<snd_timer_params_t> params,
  ) {
    return _snd_timer_params_get_ticks(
      params,
    );
  }

  late final _snd_timer_params_get_ticksPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(
              ffi.Pointer<snd_timer_params_t>)>>('snd_timer_params_get_ticks');
  late final _snd_timer_params_get_ticks = _snd_timer_params_get_ticksPtr
      .asFunction<int Function(ffi.Pointer<snd_timer_params_t>)>();

  void snd_timer_params_set_queue_size(
    ffi.Pointer<snd_timer_params_t> params,
    int queue_size,
  ) {
    return _snd_timer_params_set_queue_size(
      params,
      queue_size,
    );
  }

  late final _snd_timer_params_set_queue_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_timer_params_t>,
              ffi.Long)>>('snd_timer_params_set_queue_size');
  late final _snd_timer_params_set_queue_size =
      _snd_timer_params_set_queue_sizePtr
          .asFunction<void Function(ffi.Pointer<snd_timer_params_t>, int)>();

  int snd_timer_params_get_queue_size(
    ffi.Pointer<snd_timer_params_t> params,
  ) {
    return _snd_timer_params_get_queue_size(
      params,
    );
  }

  late final _snd_timer_params_get_queue_sizePtr = _lookup<
          ffi.NativeFunction<
              ffi.Long Function(ffi.Pointer<snd_timer_params_t>)>>(
      'snd_timer_params_get_queue_size');
  late final _snd_timer_params_get_queue_size =
      _snd_timer_params_get_queue_sizePtr
          .asFunction<int Function(ffi.Pointer<snd_timer_params_t>)>();

  void snd_timer_params_set_filter(
    ffi.Pointer<snd_timer_params_t> params,
    int filter,
  ) {
    return _snd_timer_params_set_filter(
      params,
      filter,
    );
  }

  late final _snd_timer_params_set_filterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_timer_params_t>,
              ffi.UnsignedInt)>>('snd_timer_params_set_filter');
  late final _snd_timer_params_set_filter = _snd_timer_params_set_filterPtr
      .asFunction<void Function(ffi.Pointer<snd_timer_params_t>, int)>();

  int snd_timer_params_get_filter(
    ffi.Pointer<snd_timer_params_t> params,
  ) {
    return _snd_timer_params_get_filter(
      params,
    );
  }

  late final _snd_timer_params_get_filterPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<snd_timer_params_t>)>>('snd_timer_params_get_filter');
  late final _snd_timer_params_get_filter = _snd_timer_params_get_filterPtr
      .asFunction<int Function(ffi.Pointer<snd_timer_params_t>)>();

  int snd_timer_status_sizeof() {
    return _snd_timer_status_sizeof();
  }

  late final _snd_timer_status_sizeofPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>(
          'snd_timer_status_sizeof');
  late final _snd_timer_status_sizeof =
      _snd_timer_status_sizeofPtr.asFunction<int Function()>();

  int snd_timer_status_malloc(
    ffi.Pointer<ffi.Pointer<snd_timer_status_t>> ptr,
  ) {
    return _snd_timer_status_malloc(
      ptr,
    );
  }

  late final _snd_timer_status_mallocPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Pointer<snd_timer_status_t>>)>>(
      'snd_timer_status_malloc');
  late final _snd_timer_status_malloc = _snd_timer_status_mallocPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<snd_timer_status_t>>)>();

  void snd_timer_status_free(
    ffi.Pointer<snd_timer_status_t> obj,
  ) {
    return _snd_timer_status_free(
      obj,
    );
  }

  late final _snd_timer_status_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<snd_timer_status_t>)>>('snd_timer_status_free');
  late final _snd_timer_status_free = _snd_timer_status_freePtr
      .asFunction<void Function(ffi.Pointer<snd_timer_status_t>)>();

  void snd_timer_status_copy(
    ffi.Pointer<snd_timer_status_t> dst,
    ffi.Pointer<snd_timer_status_t> src,
  ) {
    return _snd_timer_status_copy(
      dst,
      src,
    );
  }

  late final _snd_timer_status_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_timer_status_t>,
              ffi.Pointer<snd_timer_status_t>)>>('snd_timer_status_copy');
  late final _snd_timer_status_copy = _snd_timer_status_copyPtr.asFunction<
      void Function(
          ffi.Pointer<snd_timer_status_t>, ffi.Pointer<snd_timer_status_t>)>();

  snd_htimestamp_t snd_timer_status_get_timestamp(
    ffi.Pointer<snd_timer_status_t> status,
  ) {
    return _snd_timer_status_get_timestamp(
      status,
    );
  }

  late final _snd_timer_status_get_timestampPtr = _lookup<
          ffi.NativeFunction<
              snd_htimestamp_t Function(ffi.Pointer<snd_timer_status_t>)>>(
      'snd_timer_status_get_timestamp');
  late final _snd_timer_status_get_timestamp =
      _snd_timer_status_get_timestampPtr.asFunction<
          snd_htimestamp_t Function(ffi.Pointer<snd_timer_status_t>)>();

  int snd_timer_status_get_resolution(
    ffi.Pointer<snd_timer_status_t> status,
  ) {
    return _snd_timer_status_get_resolution(
      status,
    );
  }

  late final _snd_timer_status_get_resolutionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Long Function(ffi.Pointer<snd_timer_status_t>)>>(
      'snd_timer_status_get_resolution');
  late final _snd_timer_status_get_resolution =
      _snd_timer_status_get_resolutionPtr
          .asFunction<int Function(ffi.Pointer<snd_timer_status_t>)>();

  int snd_timer_status_get_lost(
    ffi.Pointer<snd_timer_status_t> status,
  ) {
    return _snd_timer_status_get_lost(
      status,
    );
  }

  late final _snd_timer_status_get_lostPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(
              ffi.Pointer<snd_timer_status_t>)>>('snd_timer_status_get_lost');
  late final _snd_timer_status_get_lost = _snd_timer_status_get_lostPtr
      .asFunction<int Function(ffi.Pointer<snd_timer_status_t>)>();

  int snd_timer_status_get_overrun(
    ffi.Pointer<snd_timer_status_t> status,
  ) {
    return _snd_timer_status_get_overrun(
      status,
    );
  }

  late final _snd_timer_status_get_overrunPtr = _lookup<
          ffi.NativeFunction<
              ffi.Long Function(ffi.Pointer<snd_timer_status_t>)>>(
      'snd_timer_status_get_overrun');
  late final _snd_timer_status_get_overrun = _snd_timer_status_get_overrunPtr
      .asFunction<int Function(ffi.Pointer<snd_timer_status_t>)>();

  int snd_timer_status_get_queue(
    ffi.Pointer<snd_timer_status_t> status,
  ) {
    return _snd_timer_status_get_queue(
      status,
    );
  }

  late final _snd_timer_status_get_queuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(
              ffi.Pointer<snd_timer_status_t>)>>('snd_timer_status_get_queue');
  late final _snd_timer_status_get_queue = _snd_timer_status_get_queuePtr
      .asFunction<int Function(ffi.Pointer<snd_timer_status_t>)>();

  int snd_timer_info_get_ticks(
    ffi.Pointer<snd_timer_info_t> info,
  ) {
    return _snd_timer_info_get_ticks(
      info,
    );
  }

  late final _snd_timer_info_get_ticksPtr = _lookup<
          ffi.NativeFunction<ffi.Long Function(ffi.Pointer<snd_timer_info_t>)>>(
      'snd_timer_info_get_ticks');
  late final _snd_timer_info_get_ticks = _snd_timer_info_get_ticksPtr
      .asFunction<int Function(ffi.Pointer<snd_timer_info_t>)>();

  int snd_hwdep_open(
    ffi.Pointer<ffi.Pointer<snd_hwdep_t>> hwdep,
    ffi.Pointer<ffi.Char> name,
    int mode,
  ) {
    return _snd_hwdep_open(
      hwdep,
      name,
      mode,
    );
  }

  late final _snd_hwdep_openPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<snd_hwdep_t>>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('snd_hwdep_open');
  late final _snd_hwdep_open = _snd_hwdep_openPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<snd_hwdep_t>>, ffi.Pointer<ffi.Char>, int)>();

  int snd_hwdep_close(
    ffi.Pointer<snd_hwdep_t> hwdep,
  ) {
    return _snd_hwdep_close(
      hwdep,
    );
  }

  late final _snd_hwdep_closePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_hwdep_t>)>>(
          'snd_hwdep_close');
  late final _snd_hwdep_close =
      _snd_hwdep_closePtr.asFunction<int Function(ffi.Pointer<snd_hwdep_t>)>();

  int snd_hwdep_poll_descriptors(
    ffi.Pointer<snd_hwdep_t> hwdep,
    ffi.Pointer<pollfd> pfds,
    int space,
  ) {
    return _snd_hwdep_poll_descriptors(
      hwdep,
      pfds,
      space,
    );
  }

  late final _snd_hwdep_poll_descriptorsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_hwdep_t>, ffi.Pointer<pollfd>,
              ffi.UnsignedInt)>>('snd_hwdep_poll_descriptors');
  late final _snd_hwdep_poll_descriptors =
      _snd_hwdep_poll_descriptorsPtr.asFunction<
          int Function(ffi.Pointer<snd_hwdep_t>, ffi.Pointer<pollfd>, int)>();

  int snd_hwdep_poll_descriptors_count(
    ffi.Pointer<snd_hwdep_t> hwdep,
  ) {
    return _snd_hwdep_poll_descriptors_count(
      hwdep,
    );
  }

  late final _snd_hwdep_poll_descriptors_countPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_hwdep_t>)>>(
          'snd_hwdep_poll_descriptors_count');
  late final _snd_hwdep_poll_descriptors_count =
      _snd_hwdep_poll_descriptors_countPtr
          .asFunction<int Function(ffi.Pointer<snd_hwdep_t>)>();

  int snd_hwdep_poll_descriptors_revents(
    ffi.Pointer<snd_hwdep_t> hwdep,
    ffi.Pointer<pollfd> pfds,
    int nfds,
    ffi.Pointer<ffi.UnsignedShort> revents,
  ) {
    return _snd_hwdep_poll_descriptors_revents(
      hwdep,
      pfds,
      nfds,
      revents,
    );
  }

  late final _snd_hwdep_poll_descriptors_reventsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_hwdep_t>, ffi.Pointer<pollfd>,
                  ffi.UnsignedInt, ffi.Pointer<ffi.UnsignedShort>)>>(
      'snd_hwdep_poll_descriptors_revents');
  late final _snd_hwdep_poll_descriptors_revents =
      _snd_hwdep_poll_descriptors_reventsPtr.asFunction<
          int Function(ffi.Pointer<snd_hwdep_t>, ffi.Pointer<pollfd>, int,
              ffi.Pointer<ffi.UnsignedShort>)>();

  int snd_hwdep_nonblock(
    ffi.Pointer<snd_hwdep_t> hwdep,
    int nonblock,
  ) {
    return _snd_hwdep_nonblock(
      hwdep,
      nonblock,
    );
  }

  late final _snd_hwdep_nonblockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_hwdep_t>, ffi.Int)>>('snd_hwdep_nonblock');
  late final _snd_hwdep_nonblock = _snd_hwdep_nonblockPtr
      .asFunction<int Function(ffi.Pointer<snd_hwdep_t>, int)>();

  int snd_hwdep_info(
    ffi.Pointer<snd_hwdep_t> hwdep,
    ffi.Pointer<snd_hwdep_info_t> info,
  ) {
    return _snd_hwdep_info(
      hwdep,
      info,
    );
  }

  late final _snd_hwdep_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_hwdep_t>,
              ffi.Pointer<snd_hwdep_info_t>)>>('snd_hwdep_info');
  late final _snd_hwdep_info = _snd_hwdep_infoPtr.asFunction<
      int Function(ffi.Pointer<snd_hwdep_t>, ffi.Pointer<snd_hwdep_info_t>)>();

  int snd_hwdep_dsp_status(
    ffi.Pointer<snd_hwdep_t> hwdep,
    ffi.Pointer<snd_hwdep_dsp_status_t> status,
  ) {
    return _snd_hwdep_dsp_status(
      hwdep,
      status,
    );
  }

  late final _snd_hwdep_dsp_statusPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_hwdep_t>,
              ffi.Pointer<snd_hwdep_dsp_status_t>)>>('snd_hwdep_dsp_status');
  late final _snd_hwdep_dsp_status = _snd_hwdep_dsp_statusPtr.asFunction<
      int Function(
          ffi.Pointer<snd_hwdep_t>, ffi.Pointer<snd_hwdep_dsp_status_t>)>();

  int snd_hwdep_dsp_load(
    ffi.Pointer<snd_hwdep_t> hwdep,
    ffi.Pointer<snd_hwdep_dsp_image_t> block,
  ) {
    return _snd_hwdep_dsp_load(
      hwdep,
      block,
    );
  }

  late final _snd_hwdep_dsp_loadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_hwdep_t>,
              ffi.Pointer<snd_hwdep_dsp_image_t>)>>('snd_hwdep_dsp_load');
  late final _snd_hwdep_dsp_load = _snd_hwdep_dsp_loadPtr.asFunction<
      int Function(
          ffi.Pointer<snd_hwdep_t>, ffi.Pointer<snd_hwdep_dsp_image_t>)>();

  int snd_hwdep_ioctl(
    ffi.Pointer<snd_hwdep_t> hwdep,
    int request,
    ffi.Pointer<ffi.Void> arg,
  ) {
    return _snd_hwdep_ioctl(
      hwdep,
      request,
      arg,
    );
  }

  late final _snd_hwdep_ioctlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_hwdep_t>, ffi.UnsignedInt,
              ffi.Pointer<ffi.Void>)>>('snd_hwdep_ioctl');
  late final _snd_hwdep_ioctl = _snd_hwdep_ioctlPtr.asFunction<
      int Function(ffi.Pointer<snd_hwdep_t>, int, ffi.Pointer<ffi.Void>)>();

  int snd_hwdep_write(
    ffi.Pointer<snd_hwdep_t> hwdep,
    ffi.Pointer<ffi.Void> buffer,
    int size,
  ) {
    return _snd_hwdep_write(
      hwdep,
      buffer,
      size,
    );
  }

  late final _snd_hwdep_writePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Pointer<snd_hwdep_t>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('snd_hwdep_write');
  late final _snd_hwdep_write = _snd_hwdep_writePtr.asFunction<
      int Function(ffi.Pointer<snd_hwdep_t>, ffi.Pointer<ffi.Void>, int)>();

  int snd_hwdep_read(
    ffi.Pointer<snd_hwdep_t> hwdep,
    ffi.Pointer<ffi.Void> buffer,
    int size,
  ) {
    return _snd_hwdep_read(
      hwdep,
      buffer,
      size,
    );
  }

  late final _snd_hwdep_readPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Pointer<snd_hwdep_t>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('snd_hwdep_read');
  late final _snd_hwdep_read = _snd_hwdep_readPtr.asFunction<
      int Function(ffi.Pointer<snd_hwdep_t>, ffi.Pointer<ffi.Void>, int)>();

  int snd_hwdep_info_sizeof() {
    return _snd_hwdep_info_sizeof();
  }

  late final _snd_hwdep_info_sizeofPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('snd_hwdep_info_sizeof');
  late final _snd_hwdep_info_sizeof =
      _snd_hwdep_info_sizeofPtr.asFunction<int Function()>();

  int snd_hwdep_info_malloc(
    ffi.Pointer<ffi.Pointer<snd_hwdep_info_t>> ptr,
  ) {
    return _snd_hwdep_info_malloc(
      ptr,
    );
  }

  late final _snd_hwdep_info_mallocPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Pointer<snd_hwdep_info_t>>)>>(
      'snd_hwdep_info_malloc');
  late final _snd_hwdep_info_malloc = _snd_hwdep_info_mallocPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<snd_hwdep_info_t>>)>();

  void snd_hwdep_info_free(
    ffi.Pointer<snd_hwdep_info_t> obj,
  ) {
    return _snd_hwdep_info_free(
      obj,
    );
  }

  late final _snd_hwdep_info_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<snd_hwdep_info_t>)>>(
      'snd_hwdep_info_free');
  late final _snd_hwdep_info_free = _snd_hwdep_info_freePtr
      .asFunction<void Function(ffi.Pointer<snd_hwdep_info_t>)>();

  void snd_hwdep_info_copy(
    ffi.Pointer<snd_hwdep_info_t> dst,
    ffi.Pointer<snd_hwdep_info_t> src,
  ) {
    return _snd_hwdep_info_copy(
      dst,
      src,
    );
  }

  late final _snd_hwdep_info_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_hwdep_info_t>,
              ffi.Pointer<snd_hwdep_info_t>)>>('snd_hwdep_info_copy');
  late final _snd_hwdep_info_copy = _snd_hwdep_info_copyPtr.asFunction<
      void Function(
          ffi.Pointer<snd_hwdep_info_t>, ffi.Pointer<snd_hwdep_info_t>)>();

  int snd_hwdep_info_get_device(
    ffi.Pointer<snd_hwdep_info_t> obj,
  ) {
    return _snd_hwdep_info_get_device(
      obj,
    );
  }

  late final _snd_hwdep_info_get_devicePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<snd_hwdep_info_t>)>>('snd_hwdep_info_get_device');
  late final _snd_hwdep_info_get_device = _snd_hwdep_info_get_devicePtr
      .asFunction<int Function(ffi.Pointer<snd_hwdep_info_t>)>();

  int snd_hwdep_info_get_card(
    ffi.Pointer<snd_hwdep_info_t> obj,
  ) {
    return _snd_hwdep_info_get_card(
      obj,
    );
  }

  late final _snd_hwdep_info_get_cardPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_hwdep_info_t>)>>(
      'snd_hwdep_info_get_card');
  late final _snd_hwdep_info_get_card = _snd_hwdep_info_get_cardPtr
      .asFunction<int Function(ffi.Pointer<snd_hwdep_info_t>)>();

  ffi.Pointer<ffi.Char> snd_hwdep_info_get_id(
    ffi.Pointer<snd_hwdep_info_t> obj,
  ) {
    return _snd_hwdep_info_get_id(
      obj,
    );
  }

  late final _snd_hwdep_info_get_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<snd_hwdep_info_t>)>>('snd_hwdep_info_get_id');
  late final _snd_hwdep_info_get_id = _snd_hwdep_info_get_idPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<snd_hwdep_info_t>)>();

  ffi.Pointer<ffi.Char> snd_hwdep_info_get_name(
    ffi.Pointer<snd_hwdep_info_t> obj,
  ) {
    return _snd_hwdep_info_get_name(
      obj,
    );
  }

  late final _snd_hwdep_info_get_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<snd_hwdep_info_t>)>>('snd_hwdep_info_get_name');
  late final _snd_hwdep_info_get_name = _snd_hwdep_info_get_namePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<snd_hwdep_info_t>)>();

  int snd_hwdep_info_get_iface(
    ffi.Pointer<snd_hwdep_info_t> obj,
  ) {
    return _snd_hwdep_info_get_iface(
      obj,
    );
  }

  late final _snd_hwdep_info_get_ifacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<snd_hwdep_info_t>)>>('snd_hwdep_info_get_iface');
  late final _snd_hwdep_info_get_iface = _snd_hwdep_info_get_ifacePtr
      .asFunction<int Function(ffi.Pointer<snd_hwdep_info_t>)>();

  void snd_hwdep_info_set_device(
    ffi.Pointer<snd_hwdep_info_t> obj,
    int val,
  ) {
    return _snd_hwdep_info_set_device(
      obj,
      val,
    );
  }

  late final _snd_hwdep_info_set_devicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_hwdep_info_t>,
              ffi.UnsignedInt)>>('snd_hwdep_info_set_device');
  late final _snd_hwdep_info_set_device = _snd_hwdep_info_set_devicePtr
      .asFunction<void Function(ffi.Pointer<snd_hwdep_info_t>, int)>();

  int snd_hwdep_dsp_status_sizeof() {
    return _snd_hwdep_dsp_status_sizeof();
  }

  late final _snd_hwdep_dsp_status_sizeofPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>(
          'snd_hwdep_dsp_status_sizeof');
  late final _snd_hwdep_dsp_status_sizeof =
      _snd_hwdep_dsp_status_sizeofPtr.asFunction<int Function()>();

  int snd_hwdep_dsp_status_malloc(
    ffi.Pointer<ffi.Pointer<snd_hwdep_dsp_status_t>> ptr,
  ) {
    return _snd_hwdep_dsp_status_malloc(
      ptr,
    );
  }

  late final _snd_hwdep_dsp_status_mallocPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Pointer<snd_hwdep_dsp_status_t>>)>>(
      'snd_hwdep_dsp_status_malloc');
  late final _snd_hwdep_dsp_status_malloc =
      _snd_hwdep_dsp_status_mallocPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<snd_hwdep_dsp_status_t>>)>();

  void snd_hwdep_dsp_status_free(
    ffi.Pointer<snd_hwdep_dsp_status_t> obj,
  ) {
    return _snd_hwdep_dsp_status_free(
      obj,
    );
  }

  late final _snd_hwdep_dsp_status_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<snd_hwdep_dsp_status_t>)>>(
      'snd_hwdep_dsp_status_free');
  late final _snd_hwdep_dsp_status_free = _snd_hwdep_dsp_status_freePtr
      .asFunction<void Function(ffi.Pointer<snd_hwdep_dsp_status_t>)>();

  void snd_hwdep_dsp_status_copy(
    ffi.Pointer<snd_hwdep_dsp_status_t> dst,
    ffi.Pointer<snd_hwdep_dsp_status_t> src,
  ) {
    return _snd_hwdep_dsp_status_copy(
      dst,
      src,
    );
  }

  late final _snd_hwdep_dsp_status_copyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<snd_hwdep_dsp_status_t>,
                  ffi.Pointer<snd_hwdep_dsp_status_t>)>>(
      'snd_hwdep_dsp_status_copy');
  late final _snd_hwdep_dsp_status_copy =
      _snd_hwdep_dsp_status_copyPtr.asFunction<
          void Function(ffi.Pointer<snd_hwdep_dsp_status_t>,
              ffi.Pointer<snd_hwdep_dsp_status_t>)>();

  int snd_hwdep_dsp_status_get_version(
    ffi.Pointer<snd_hwdep_dsp_status_t> obj,
  ) {
    return _snd_hwdep_dsp_status_get_version(
      obj,
    );
  }

  late final _snd_hwdep_dsp_status_get_versionPtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<snd_hwdep_dsp_status_t>)>>(
      'snd_hwdep_dsp_status_get_version');
  late final _snd_hwdep_dsp_status_get_version =
      _snd_hwdep_dsp_status_get_versionPtr
          .asFunction<int Function(ffi.Pointer<snd_hwdep_dsp_status_t>)>();

  ffi.Pointer<ffi.Char> snd_hwdep_dsp_status_get_id(
    ffi.Pointer<snd_hwdep_dsp_status_t> obj,
  ) {
    return _snd_hwdep_dsp_status_get_id(
      obj,
    );
  }

  late final _snd_hwdep_dsp_status_get_idPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<snd_hwdep_dsp_status_t>)>>(
      'snd_hwdep_dsp_status_get_id');
  late final _snd_hwdep_dsp_status_get_id =
      _snd_hwdep_dsp_status_get_idPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<snd_hwdep_dsp_status_t>)>();

  int snd_hwdep_dsp_status_get_num_dsps(
    ffi.Pointer<snd_hwdep_dsp_status_t> obj,
  ) {
    return _snd_hwdep_dsp_status_get_num_dsps(
      obj,
    );
  }

  late final _snd_hwdep_dsp_status_get_num_dspsPtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<snd_hwdep_dsp_status_t>)>>(
      'snd_hwdep_dsp_status_get_num_dsps');
  late final _snd_hwdep_dsp_status_get_num_dsps =
      _snd_hwdep_dsp_status_get_num_dspsPtr
          .asFunction<int Function(ffi.Pointer<snd_hwdep_dsp_status_t>)>();

  int snd_hwdep_dsp_status_get_dsp_loaded(
    ffi.Pointer<snd_hwdep_dsp_status_t> obj,
  ) {
    return _snd_hwdep_dsp_status_get_dsp_loaded(
      obj,
    );
  }

  late final _snd_hwdep_dsp_status_get_dsp_loadedPtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<snd_hwdep_dsp_status_t>)>>(
      'snd_hwdep_dsp_status_get_dsp_loaded');
  late final _snd_hwdep_dsp_status_get_dsp_loaded =
      _snd_hwdep_dsp_status_get_dsp_loadedPtr
          .asFunction<int Function(ffi.Pointer<snd_hwdep_dsp_status_t>)>();

  int snd_hwdep_dsp_status_get_chip_ready(
    ffi.Pointer<snd_hwdep_dsp_status_t> obj,
  ) {
    return _snd_hwdep_dsp_status_get_chip_ready(
      obj,
    );
  }

  late final _snd_hwdep_dsp_status_get_chip_readyPtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<snd_hwdep_dsp_status_t>)>>(
      'snd_hwdep_dsp_status_get_chip_ready');
  late final _snd_hwdep_dsp_status_get_chip_ready =
      _snd_hwdep_dsp_status_get_chip_readyPtr
          .asFunction<int Function(ffi.Pointer<snd_hwdep_dsp_status_t>)>();

  int snd_hwdep_dsp_image_sizeof() {
    return _snd_hwdep_dsp_image_sizeof();
  }

  late final _snd_hwdep_dsp_image_sizeofPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>(
          'snd_hwdep_dsp_image_sizeof');
  late final _snd_hwdep_dsp_image_sizeof =
      _snd_hwdep_dsp_image_sizeofPtr.asFunction<int Function()>();

  int snd_hwdep_dsp_image_malloc(
    ffi.Pointer<ffi.Pointer<snd_hwdep_dsp_image_t>> ptr,
  ) {
    return _snd_hwdep_dsp_image_malloc(
      ptr,
    );
  }

  late final _snd_hwdep_dsp_image_mallocPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Pointer<snd_hwdep_dsp_image_t>>)>>(
      'snd_hwdep_dsp_image_malloc');
  late final _snd_hwdep_dsp_image_malloc =
      _snd_hwdep_dsp_image_mallocPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<snd_hwdep_dsp_image_t>>)>();

  void snd_hwdep_dsp_image_free(
    ffi.Pointer<snd_hwdep_dsp_image_t> obj,
  ) {
    return _snd_hwdep_dsp_image_free(
      obj,
    );
  }

  late final _snd_hwdep_dsp_image_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<snd_hwdep_dsp_image_t>)>>('snd_hwdep_dsp_image_free');
  late final _snd_hwdep_dsp_image_free = _snd_hwdep_dsp_image_freePtr
      .asFunction<void Function(ffi.Pointer<snd_hwdep_dsp_image_t>)>();

  void snd_hwdep_dsp_image_copy(
    ffi.Pointer<snd_hwdep_dsp_image_t> dst,
    ffi.Pointer<snd_hwdep_dsp_image_t> src,
  ) {
    return _snd_hwdep_dsp_image_copy(
      dst,
      src,
    );
  }

  late final _snd_hwdep_dsp_image_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_hwdep_dsp_image_t>,
              ffi.Pointer<snd_hwdep_dsp_image_t>)>>('snd_hwdep_dsp_image_copy');
  late final _snd_hwdep_dsp_image_copy =
      _snd_hwdep_dsp_image_copyPtr.asFunction<
          void Function(ffi.Pointer<snd_hwdep_dsp_image_t>,
              ffi.Pointer<snd_hwdep_dsp_image_t>)>();

  int snd_hwdep_dsp_image_get_index(
    ffi.Pointer<snd_hwdep_dsp_image_t> obj,
  ) {
    return _snd_hwdep_dsp_image_get_index(
      obj,
    );
  }

  late final _snd_hwdep_dsp_image_get_indexPtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<snd_hwdep_dsp_image_t>)>>(
      'snd_hwdep_dsp_image_get_index');
  late final _snd_hwdep_dsp_image_get_index = _snd_hwdep_dsp_image_get_indexPtr
      .asFunction<int Function(ffi.Pointer<snd_hwdep_dsp_image_t>)>();

  ffi.Pointer<ffi.Char> snd_hwdep_dsp_image_get_name(
    ffi.Pointer<snd_hwdep_dsp_image_t> obj,
  ) {
    return _snd_hwdep_dsp_image_get_name(
      obj,
    );
  }

  late final _snd_hwdep_dsp_image_get_namePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<snd_hwdep_dsp_image_t>)>>(
      'snd_hwdep_dsp_image_get_name');
  late final _snd_hwdep_dsp_image_get_name =
      _snd_hwdep_dsp_image_get_namePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<snd_hwdep_dsp_image_t>)>();

  ffi.Pointer<ffi.Void> snd_hwdep_dsp_image_get_image(
    ffi.Pointer<snd_hwdep_dsp_image_t> obj,
  ) {
    return _snd_hwdep_dsp_image_get_image(
      obj,
    );
  }

  late final _snd_hwdep_dsp_image_get_imagePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<snd_hwdep_dsp_image_t>)>>(
      'snd_hwdep_dsp_image_get_image');
  late final _snd_hwdep_dsp_image_get_image =
      _snd_hwdep_dsp_image_get_imagePtr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<snd_hwdep_dsp_image_t>)>();

  int snd_hwdep_dsp_image_get_length(
    ffi.Pointer<snd_hwdep_dsp_image_t> obj,
  ) {
    return _snd_hwdep_dsp_image_get_length(
      obj,
    );
  }

  late final _snd_hwdep_dsp_image_get_lengthPtr = _lookup<
          ffi.NativeFunction<
              ffi.Size Function(ffi.Pointer<snd_hwdep_dsp_image_t>)>>(
      'snd_hwdep_dsp_image_get_length');
  late final _snd_hwdep_dsp_image_get_length =
      _snd_hwdep_dsp_image_get_lengthPtr
          .asFunction<int Function(ffi.Pointer<snd_hwdep_dsp_image_t>)>();

  void snd_hwdep_dsp_image_set_index(
    ffi.Pointer<snd_hwdep_dsp_image_t> obj,
    int _index,
  ) {
    return _snd_hwdep_dsp_image_set_index(
      obj,
      _index,
    );
  }

  late final _snd_hwdep_dsp_image_set_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_hwdep_dsp_image_t>,
              ffi.UnsignedInt)>>('snd_hwdep_dsp_image_set_index');
  late final _snd_hwdep_dsp_image_set_index = _snd_hwdep_dsp_image_set_indexPtr
      .asFunction<void Function(ffi.Pointer<snd_hwdep_dsp_image_t>, int)>();

  void snd_hwdep_dsp_image_set_name(
    ffi.Pointer<snd_hwdep_dsp_image_t> obj,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _snd_hwdep_dsp_image_set_name(
      obj,
      name,
    );
  }

  late final _snd_hwdep_dsp_image_set_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_hwdep_dsp_image_t>,
              ffi.Pointer<ffi.Char>)>>('snd_hwdep_dsp_image_set_name');
  late final _snd_hwdep_dsp_image_set_name =
      _snd_hwdep_dsp_image_set_namePtr.asFunction<
          void Function(
              ffi.Pointer<snd_hwdep_dsp_image_t>, ffi.Pointer<ffi.Char>)>();

  void snd_hwdep_dsp_image_set_image(
    ffi.Pointer<snd_hwdep_dsp_image_t> obj,
    ffi.Pointer<ffi.Void> buffer,
  ) {
    return _snd_hwdep_dsp_image_set_image(
      obj,
      buffer,
    );
  }

  late final _snd_hwdep_dsp_image_set_imagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_hwdep_dsp_image_t>,
              ffi.Pointer<ffi.Void>)>>('snd_hwdep_dsp_image_set_image');
  late final _snd_hwdep_dsp_image_set_image =
      _snd_hwdep_dsp_image_set_imagePtr.asFunction<
          void Function(
              ffi.Pointer<snd_hwdep_dsp_image_t>, ffi.Pointer<ffi.Void>)>();

  void snd_hwdep_dsp_image_set_length(
    ffi.Pointer<snd_hwdep_dsp_image_t> obj,
    int length,
  ) {
    return _snd_hwdep_dsp_image_set_length(
      obj,
      length,
    );
  }

  late final _snd_hwdep_dsp_image_set_lengthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_hwdep_dsp_image_t>,
              ffi.Size)>>('snd_hwdep_dsp_image_set_length');
  late final _snd_hwdep_dsp_image_set_length =
      _snd_hwdep_dsp_image_set_lengthPtr
          .asFunction<void Function(ffi.Pointer<snd_hwdep_dsp_image_t>, int)>();

  int snd_card_load(
    int card,
  ) {
    return _snd_card_load(
      card,
    );
  }

  late final _snd_card_loadPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('snd_card_load');
  late final _snd_card_load = _snd_card_loadPtr.asFunction<int Function(int)>();

  int snd_card_next(
    ffi.Pointer<ffi.Int> card,
  ) {
    return _snd_card_next(
      card,
    );
  }

  late final _snd_card_nextPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Int>)>>(
          'snd_card_next');
  late final _snd_card_next =
      _snd_card_nextPtr.asFunction<int Function(ffi.Pointer<ffi.Int>)>();

  int snd_card_get_index(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _snd_card_get_index(
      name,
    );
  }

  late final _snd_card_get_indexPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'snd_card_get_index');
  late final _snd_card_get_index =
      _snd_card_get_indexPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int snd_card_get_name(
    int card,
    ffi.Pointer<ffi.Pointer<ffi.Char>> name,
  ) {
    return _snd_card_get_name(
      card,
      name,
    );
  }

  late final _snd_card_get_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('snd_card_get_name');
  late final _snd_card_get_name = _snd_card_get_namePtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int snd_card_get_longname(
    int card,
    ffi.Pointer<ffi.Pointer<ffi.Char>> name,
  ) {
    return _snd_card_get_longname(
      card,
      name,
    );
  }

  late final _snd_card_get_longnamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('snd_card_get_longname');
  late final _snd_card_get_longname = _snd_card_get_longnamePtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int snd_device_name_hint(
    int card,
    ffi.Pointer<ffi.Char> iface,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Void>>> hints,
  ) {
    return _snd_device_name_hint(
      card,
      iface,
      hints,
    );
  }

  late final _snd_device_name_hintPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Void>>>)>>(
      'snd_device_name_hint');
  late final _snd_device_name_hint = _snd_device_name_hintPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Void>>>)>();

  int snd_device_name_free_hint(
    ffi.Pointer<ffi.Pointer<ffi.Void>> hints,
  ) {
    return _snd_device_name_free_hint(
      hints,
    );
  }

  late final _snd_device_name_free_hintPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>)>>(
      'snd_device_name_free_hint');
  late final _snd_device_name_free_hint = _snd_device_name_free_hintPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  ffi.Pointer<ffi.Char> snd_device_name_get_hint(
    ffi.Pointer<ffi.Void> hint,
    ffi.Pointer<ffi.Char> id,
  ) {
    return _snd_device_name_get_hint(
      hint,
      id,
    );
  }

  late final _snd_device_name_get_hintPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('snd_device_name_get_hint');
  late final _snd_device_name_get_hint =
      _snd_device_name_get_hintPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  int snd_ctl_open(
    ffi.Pointer<ffi.Pointer<snd_ctl_t>> ctl,
    ffi.Pointer<ffi.Char> name,
    int mode,
  ) {
    return _snd_ctl_open(
      ctl,
      name,
      mode,
    );
  }

  late final _snd_ctl_openPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<snd_ctl_t>>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('snd_ctl_open');
  late final _snd_ctl_open = _snd_ctl_openPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<snd_ctl_t>>, ffi.Pointer<ffi.Char>, int)>();

  int snd_ctl_open_lconf(
    ffi.Pointer<ffi.Pointer<snd_ctl_t>> ctl,
    ffi.Pointer<ffi.Char> name,
    int mode,
    ffi.Pointer<snd_config_t> lconf,
  ) {
    return _snd_ctl_open_lconf(
      ctl,
      name,
      mode,
      lconf,
    );
  }

  late final _snd_ctl_open_lconfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<snd_ctl_t>>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<snd_config_t>)>>('snd_ctl_open_lconf');
  late final _snd_ctl_open_lconf = _snd_ctl_open_lconfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<snd_ctl_t>>, ffi.Pointer<ffi.Char>,
          int, ffi.Pointer<snd_config_t>)>();

  int snd_ctl_open_fallback(
    ffi.Pointer<ffi.Pointer<snd_ctl_t>> ctl,
    ffi.Pointer<snd_config_t> root,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> orig_name,
    int mode,
  ) {
    return _snd_ctl_open_fallback(
      ctl,
      root,
      name,
      orig_name,
      mode,
    );
  }

  late final _snd_ctl_open_fallbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<snd_ctl_t>>,
              ffi.Pointer<snd_config_t>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int)>>('snd_ctl_open_fallback');
  late final _snd_ctl_open_fallback = _snd_ctl_open_fallbackPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<snd_ctl_t>>,
          ffi.Pointer<snd_config_t>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          int)>();

  int snd_ctl_close(
    ffi.Pointer<snd_ctl_t> ctl,
  ) {
    return _snd_ctl_close(
      ctl,
    );
  }

  late final _snd_ctl_closePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_ctl_t>)>>(
          'snd_ctl_close');
  late final _snd_ctl_close =
      _snd_ctl_closePtr.asFunction<int Function(ffi.Pointer<snd_ctl_t>)>();

  int snd_ctl_nonblock(
    ffi.Pointer<snd_ctl_t> ctl,
    int nonblock,
  ) {
    return _snd_ctl_nonblock(
      ctl,
      nonblock,
    );
  }

  late final _snd_ctl_nonblockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_ctl_t>, ffi.Int)>>('snd_ctl_nonblock');
  late final _snd_ctl_nonblock = _snd_ctl_nonblockPtr
      .asFunction<int Function(ffi.Pointer<snd_ctl_t>, int)>();

  int snd_async_add_ctl_handler(
    ffi.Pointer<ffi.Pointer<snd_async_handler_t>> handler,
    ffi.Pointer<snd_ctl_t> ctl,
    snd_async_callback_t callback,
    ffi.Pointer<ffi.Void> private_data,
  ) {
    return _snd_async_add_ctl_handler(
      handler,
      ctl,
      callback,
      private_data,
    );
  }

  late final _snd_async_add_ctl_handlerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<snd_async_handler_t>>,
              ffi.Pointer<snd_ctl_t>,
              snd_async_callback_t,
              ffi.Pointer<ffi.Void>)>>('snd_async_add_ctl_handler');
  late final _snd_async_add_ctl_handler =
      _snd_async_add_ctl_handlerPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Pointer<snd_async_handler_t>>,
              ffi.Pointer<snd_ctl_t>,
              snd_async_callback_t,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<snd_ctl_t> snd_async_handler_get_ctl(
    ffi.Pointer<snd_async_handler_t> handler,
  ) {
    return _snd_async_handler_get_ctl(
      handler,
    );
  }

  late final _snd_async_handler_get_ctlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<snd_ctl_t> Function(
              ffi.Pointer<snd_async_handler_t>)>>('snd_async_handler_get_ctl');
  late final _snd_async_handler_get_ctl =
      _snd_async_handler_get_ctlPtr.asFunction<
          ffi.Pointer<snd_ctl_t> Function(ffi.Pointer<snd_async_handler_t>)>();

  int snd_ctl_poll_descriptors_count(
    ffi.Pointer<snd_ctl_t> ctl,
  ) {
    return _snd_ctl_poll_descriptors_count(
      ctl,
    );
  }

  late final _snd_ctl_poll_descriptors_countPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_ctl_t>)>>(
          'snd_ctl_poll_descriptors_count');
  late final _snd_ctl_poll_descriptors_count =
      _snd_ctl_poll_descriptors_countPtr
          .asFunction<int Function(ffi.Pointer<snd_ctl_t>)>();

  int snd_ctl_poll_descriptors(
    ffi.Pointer<snd_ctl_t> ctl,
    ffi.Pointer<pollfd> pfds,
    int space,
  ) {
    return _snd_ctl_poll_descriptors(
      ctl,
      pfds,
      space,
    );
  }

  late final _snd_ctl_poll_descriptorsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_ctl_t>, ffi.Pointer<pollfd>,
              ffi.UnsignedInt)>>('snd_ctl_poll_descriptors');
  late final _snd_ctl_poll_descriptors =
      _snd_ctl_poll_descriptorsPtr.asFunction<
          int Function(ffi.Pointer<snd_ctl_t>, ffi.Pointer<pollfd>, int)>();

  int snd_ctl_poll_descriptors_revents(
    ffi.Pointer<snd_ctl_t> ctl,
    ffi.Pointer<pollfd> pfds,
    int nfds,
    ffi.Pointer<ffi.UnsignedShort> revents,
  ) {
    return _snd_ctl_poll_descriptors_revents(
      ctl,
      pfds,
      nfds,
      revents,
    );
  }

  late final _snd_ctl_poll_descriptors_reventsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_ctl_t>, ffi.Pointer<pollfd>,
                  ffi.UnsignedInt, ffi.Pointer<ffi.UnsignedShort>)>>(
      'snd_ctl_poll_descriptors_revents');
  late final _snd_ctl_poll_descriptors_revents =
      _snd_ctl_poll_descriptors_reventsPtr.asFunction<
          int Function(ffi.Pointer<snd_ctl_t>, ffi.Pointer<pollfd>, int,
              ffi.Pointer<ffi.UnsignedShort>)>();

  int snd_ctl_subscribe_events(
    ffi.Pointer<snd_ctl_t> ctl,
    int subscribe,
  ) {
    return _snd_ctl_subscribe_events(
      ctl,
      subscribe,
    );
  }

  late final _snd_ctl_subscribe_eventsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_ctl_t>, ffi.Int)>>('snd_ctl_subscribe_events');
  late final _snd_ctl_subscribe_events = _snd_ctl_subscribe_eventsPtr
      .asFunction<int Function(ffi.Pointer<snd_ctl_t>, int)>();

  int snd_ctl_card_info(
    ffi.Pointer<snd_ctl_t> ctl,
    ffi.Pointer<snd_ctl_card_info_t> info,
  ) {
    return _snd_ctl_card_info(
      ctl,
      info,
    );
  }

  late final _snd_ctl_card_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_ctl_t>,
              ffi.Pointer<snd_ctl_card_info_t>)>>('snd_ctl_card_info');
  late final _snd_ctl_card_info = _snd_ctl_card_infoPtr.asFunction<
      int Function(ffi.Pointer<snd_ctl_t>, ffi.Pointer<snd_ctl_card_info_t>)>();

  int snd_ctl_elem_list(
    ffi.Pointer<snd_ctl_t> ctl,
    ffi.Pointer<snd_ctl_elem_list_t> list,
  ) {
    return _snd_ctl_elem_list(
      ctl,
      list,
    );
  }

  late final _snd_ctl_elem_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_ctl_t>,
              ffi.Pointer<snd_ctl_elem_list_t>)>>('snd_ctl_elem_list');
  late final _snd_ctl_elem_list = _snd_ctl_elem_listPtr.asFunction<
      int Function(ffi.Pointer<snd_ctl_t>, ffi.Pointer<snd_ctl_elem_list_t>)>();

  int snd_ctl_elem_info(
    ffi.Pointer<snd_ctl_t> ctl,
    ffi.Pointer<snd_ctl_elem_info_t> info,
  ) {
    return _snd_ctl_elem_info(
      ctl,
      info,
    );
  }

  late final _snd_ctl_elem_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_ctl_t>,
              ffi.Pointer<snd_ctl_elem_info_t>)>>('snd_ctl_elem_info');
  late final _snd_ctl_elem_info = _snd_ctl_elem_infoPtr.asFunction<
      int Function(ffi.Pointer<snd_ctl_t>, ffi.Pointer<snd_ctl_elem_info_t>)>();

  int snd_ctl_elem_read(
    ffi.Pointer<snd_ctl_t> ctl,
    ffi.Pointer<snd_ctl_elem_value_t> data,
  ) {
    return _snd_ctl_elem_read(
      ctl,
      data,
    );
  }

  late final _snd_ctl_elem_readPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_ctl_t>,
              ffi.Pointer<snd_ctl_elem_value_t>)>>('snd_ctl_elem_read');
  late final _snd_ctl_elem_read = _snd_ctl_elem_readPtr.asFunction<
      int Function(
          ffi.Pointer<snd_ctl_t>, ffi.Pointer<snd_ctl_elem_value_t>)>();

  int snd_ctl_elem_write(
    ffi.Pointer<snd_ctl_t> ctl,
    ffi.Pointer<snd_ctl_elem_value_t> data,
  ) {
    return _snd_ctl_elem_write(
      ctl,
      data,
    );
  }

  late final _snd_ctl_elem_writePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_ctl_t>,
              ffi.Pointer<snd_ctl_elem_value_t>)>>('snd_ctl_elem_write');
  late final _snd_ctl_elem_write = _snd_ctl_elem_writePtr.asFunction<
      int Function(
          ffi.Pointer<snd_ctl_t>, ffi.Pointer<snd_ctl_elem_value_t>)>();

  int snd_ctl_elem_lock(
    ffi.Pointer<snd_ctl_t> ctl,
    ffi.Pointer<snd_ctl_elem_id_t> id,
  ) {
    return _snd_ctl_elem_lock(
      ctl,
      id,
    );
  }

  late final _snd_ctl_elem_lockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_ctl_t>,
              ffi.Pointer<snd_ctl_elem_id_t>)>>('snd_ctl_elem_lock');
  late final _snd_ctl_elem_lock = _snd_ctl_elem_lockPtr.asFunction<
      int Function(ffi.Pointer<snd_ctl_t>, ffi.Pointer<snd_ctl_elem_id_t>)>();

  int snd_ctl_elem_unlock(
    ffi.Pointer<snd_ctl_t> ctl,
    ffi.Pointer<snd_ctl_elem_id_t> id,
  ) {
    return _snd_ctl_elem_unlock(
      ctl,
      id,
    );
  }

  late final _snd_ctl_elem_unlockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_ctl_t>,
              ffi.Pointer<snd_ctl_elem_id_t>)>>('snd_ctl_elem_unlock');
  late final _snd_ctl_elem_unlock = _snd_ctl_elem_unlockPtr.asFunction<
      int Function(ffi.Pointer<snd_ctl_t>, ffi.Pointer<snd_ctl_elem_id_t>)>();

  int snd_ctl_elem_tlv_read(
    ffi.Pointer<snd_ctl_t> ctl,
    ffi.Pointer<snd_ctl_elem_id_t> id,
    ffi.Pointer<ffi.UnsignedInt> tlv,
    int tlv_size,
  ) {
    return _snd_ctl_elem_tlv_read(
      ctl,
      id,
      tlv,
      tlv_size,
    );
  }

  late final _snd_ctl_elem_tlv_readPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_ctl_t>,
              ffi.Pointer<snd_ctl_elem_id_t>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.UnsignedInt)>>('snd_ctl_elem_tlv_read');
  late final _snd_ctl_elem_tlv_read = _snd_ctl_elem_tlv_readPtr.asFunction<
      int Function(ffi.Pointer<snd_ctl_t>, ffi.Pointer<snd_ctl_elem_id_t>,
          ffi.Pointer<ffi.UnsignedInt>, int)>();

  int snd_ctl_elem_tlv_write(
    ffi.Pointer<snd_ctl_t> ctl,
    ffi.Pointer<snd_ctl_elem_id_t> id,
    ffi.Pointer<ffi.UnsignedInt> tlv,
  ) {
    return _snd_ctl_elem_tlv_write(
      ctl,
      id,
      tlv,
    );
  }

  late final _snd_ctl_elem_tlv_writePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_ctl_t>,
              ffi.Pointer<snd_ctl_elem_id_t>,
              ffi.Pointer<ffi.UnsignedInt>)>>('snd_ctl_elem_tlv_write');
  late final _snd_ctl_elem_tlv_write = _snd_ctl_elem_tlv_writePtr.asFunction<
      int Function(ffi.Pointer<snd_ctl_t>, ffi.Pointer<snd_ctl_elem_id_t>,
          ffi.Pointer<ffi.UnsignedInt>)>();

  int snd_ctl_elem_tlv_command(
    ffi.Pointer<snd_ctl_t> ctl,
    ffi.Pointer<snd_ctl_elem_id_t> id,
    ffi.Pointer<ffi.UnsignedInt> tlv,
  ) {
    return _snd_ctl_elem_tlv_command(
      ctl,
      id,
      tlv,
    );
  }

  late final _snd_ctl_elem_tlv_commandPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_ctl_t>,
              ffi.Pointer<snd_ctl_elem_id_t>,
              ffi.Pointer<ffi.UnsignedInt>)>>('snd_ctl_elem_tlv_command');
  late final _snd_ctl_elem_tlv_command =
      _snd_ctl_elem_tlv_commandPtr.asFunction<
          int Function(ffi.Pointer<snd_ctl_t>, ffi.Pointer<snd_ctl_elem_id_t>,
              ffi.Pointer<ffi.UnsignedInt>)>();

  int snd_ctl_hwdep_next_device(
    ffi.Pointer<snd_ctl_t> ctl,
    ffi.Pointer<ffi.Int> device,
  ) {
    return _snd_ctl_hwdep_next_device(
      ctl,
      device,
    );
  }

  late final _snd_ctl_hwdep_next_devicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_ctl_t>,
              ffi.Pointer<ffi.Int>)>>('snd_ctl_hwdep_next_device');
  late final _snd_ctl_hwdep_next_device = _snd_ctl_hwdep_next_devicePtr
      .asFunction<int Function(ffi.Pointer<snd_ctl_t>, ffi.Pointer<ffi.Int>)>();

  int snd_ctl_hwdep_info(
    ffi.Pointer<snd_ctl_t> ctl,
    ffi.Pointer<snd_hwdep_info_t> info,
  ) {
    return _snd_ctl_hwdep_info(
      ctl,
      info,
    );
  }

  late final _snd_ctl_hwdep_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_ctl_t>,
              ffi.Pointer<snd_hwdep_info_t>)>>('snd_ctl_hwdep_info');
  late final _snd_ctl_hwdep_info = _snd_ctl_hwdep_infoPtr.asFunction<
      int Function(ffi.Pointer<snd_ctl_t>, ffi.Pointer<snd_hwdep_info_t>)>();

  int snd_ctl_pcm_next_device(
    ffi.Pointer<snd_ctl_t> ctl,
    ffi.Pointer<ffi.Int> device,
  ) {
    return _snd_ctl_pcm_next_device(
      ctl,
      device,
    );
  }

  late final _snd_ctl_pcm_next_devicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_ctl_t>,
              ffi.Pointer<ffi.Int>)>>('snd_ctl_pcm_next_device');
  late final _snd_ctl_pcm_next_device = _snd_ctl_pcm_next_devicePtr
      .asFunction<int Function(ffi.Pointer<snd_ctl_t>, ffi.Pointer<ffi.Int>)>();

  int snd_ctl_pcm_info(
    ffi.Pointer<snd_ctl_t> ctl,
    ffi.Pointer<snd_pcm_info_t> info,
  ) {
    return _snd_ctl_pcm_info(
      ctl,
      info,
    );
  }

  late final _snd_ctl_pcm_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_ctl_t>,
              ffi.Pointer<snd_pcm_info_t>)>>('snd_ctl_pcm_info');
  late final _snd_ctl_pcm_info = _snd_ctl_pcm_infoPtr.asFunction<
      int Function(ffi.Pointer<snd_ctl_t>, ffi.Pointer<snd_pcm_info_t>)>();

  int snd_ctl_pcm_prefer_subdevice(
    ffi.Pointer<snd_ctl_t> ctl,
    int subdev,
  ) {
    return _snd_ctl_pcm_prefer_subdevice(
      ctl,
      subdev,
    );
  }

  late final _snd_ctl_pcm_prefer_subdevicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_ctl_t>,
              ffi.Int)>>('snd_ctl_pcm_prefer_subdevice');
  late final _snd_ctl_pcm_prefer_subdevice = _snd_ctl_pcm_prefer_subdevicePtr
      .asFunction<int Function(ffi.Pointer<snd_ctl_t>, int)>();

  int snd_ctl_rawmidi_next_device(
    ffi.Pointer<snd_ctl_t> ctl,
    ffi.Pointer<ffi.Int> device,
  ) {
    return _snd_ctl_rawmidi_next_device(
      ctl,
      device,
    );
  }

  late final _snd_ctl_rawmidi_next_devicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_ctl_t>,
              ffi.Pointer<ffi.Int>)>>('snd_ctl_rawmidi_next_device');
  late final _snd_ctl_rawmidi_next_device = _snd_ctl_rawmidi_next_devicePtr
      .asFunction<int Function(ffi.Pointer<snd_ctl_t>, ffi.Pointer<ffi.Int>)>();

  int snd_ctl_rawmidi_info(
    ffi.Pointer<snd_ctl_t> ctl,
    ffi.Pointer<snd_rawmidi_info_t> info,
  ) {
    return _snd_ctl_rawmidi_info(
      ctl,
      info,
    );
  }

  late final _snd_ctl_rawmidi_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_ctl_t>,
              ffi.Pointer<snd_rawmidi_info_t>)>>('snd_ctl_rawmidi_info');
  late final _snd_ctl_rawmidi_info = _snd_ctl_rawmidi_infoPtr.asFunction<
      int Function(ffi.Pointer<snd_ctl_t>, ffi.Pointer<snd_rawmidi_info_t>)>();

  int snd_ctl_rawmidi_prefer_subdevice(
    ffi.Pointer<snd_ctl_t> ctl,
    int subdev,
  ) {
    return _snd_ctl_rawmidi_prefer_subdevice(
      ctl,
      subdev,
    );
  }

  late final _snd_ctl_rawmidi_prefer_subdevicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_ctl_t>,
              ffi.Int)>>('snd_ctl_rawmidi_prefer_subdevice');
  late final _snd_ctl_rawmidi_prefer_subdevice =
      _snd_ctl_rawmidi_prefer_subdevicePtr
          .asFunction<int Function(ffi.Pointer<snd_ctl_t>, int)>();

  int snd_ctl_set_power_state(
    ffi.Pointer<snd_ctl_t> ctl,
    int state,
  ) {
    return _snd_ctl_set_power_state(
      ctl,
      state,
    );
  }

  late final _snd_ctl_set_power_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_ctl_t>,
              ffi.UnsignedInt)>>('snd_ctl_set_power_state');
  late final _snd_ctl_set_power_state = _snd_ctl_set_power_statePtr
      .asFunction<int Function(ffi.Pointer<snd_ctl_t>, int)>();

  int snd_ctl_get_power_state(
    ffi.Pointer<snd_ctl_t> ctl,
    ffi.Pointer<ffi.UnsignedInt> state,
  ) {
    return _snd_ctl_get_power_state(
      ctl,
      state,
    );
  }

  late final _snd_ctl_get_power_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_ctl_t>,
              ffi.Pointer<ffi.UnsignedInt>)>>('snd_ctl_get_power_state');
  late final _snd_ctl_get_power_state = _snd_ctl_get_power_statePtr.asFunction<
      int Function(ffi.Pointer<snd_ctl_t>, ffi.Pointer<ffi.UnsignedInt>)>();

  int snd_ctl_read(
    ffi.Pointer<snd_ctl_t> ctl,
    ffi.Pointer<snd_ctl_event_t> event,
  ) {
    return _snd_ctl_read(
      ctl,
      event,
    );
  }

  late final _snd_ctl_readPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_ctl_t>,
              ffi.Pointer<snd_ctl_event_t>)>>('snd_ctl_read');
  late final _snd_ctl_read = _snd_ctl_readPtr.asFunction<
      int Function(ffi.Pointer<snd_ctl_t>, ffi.Pointer<snd_ctl_event_t>)>();

  int snd_ctl_wait(
    ffi.Pointer<snd_ctl_t> ctl,
    int timeout,
  ) {
    return _snd_ctl_wait(
      ctl,
      timeout,
    );
  }

  late final _snd_ctl_waitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_ctl_t>, ffi.Int)>>('snd_ctl_wait');
  late final _snd_ctl_wait =
      _snd_ctl_waitPtr.asFunction<int Function(ffi.Pointer<snd_ctl_t>, int)>();

  ffi.Pointer<ffi.Char> snd_ctl_name(
    ffi.Pointer<snd_ctl_t> ctl,
  ) {
    return _snd_ctl_name(
      ctl,
    );
  }

  late final _snd_ctl_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<snd_ctl_t>)>>('snd_ctl_name');
  late final _snd_ctl_name = _snd_ctl_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<snd_ctl_t>)>();

  int snd_ctl_type(
    ffi.Pointer<snd_ctl_t> ctl,
  ) {
    return _snd_ctl_type(
      ctl,
    );
  }

  late final _snd_ctl_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<snd_ctl_t>)>>(
          'snd_ctl_type');
  late final _snd_ctl_type =
      _snd_ctl_typePtr.asFunction<int Function(ffi.Pointer<snd_ctl_t>)>();

  ffi.Pointer<ffi.Char> snd_ctl_elem_type_name(
    int type,
  ) {
    return _snd_ctl_elem_type_name(
      type,
    );
  }

  late final _snd_ctl_elem_type_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'snd_ctl_elem_type_name');
  late final _snd_ctl_elem_type_name = _snd_ctl_elem_type_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> snd_ctl_elem_iface_name(
    int iface,
  ) {
    return _snd_ctl_elem_iface_name(
      iface,
    );
  }

  late final _snd_ctl_elem_iface_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'snd_ctl_elem_iface_name');
  late final _snd_ctl_elem_iface_name = _snd_ctl_elem_iface_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> snd_ctl_event_type_name(
    int type,
  ) {
    return _snd_ctl_event_type_name(
      type,
    );
  }

  late final _snd_ctl_event_type_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'snd_ctl_event_type_name');
  late final _snd_ctl_event_type_name = _snd_ctl_event_type_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int snd_ctl_event_elem_get_mask(
    ffi.Pointer<snd_ctl_event_t> obj,
  ) {
    return _snd_ctl_event_elem_get_mask(
      obj,
    );
  }

  late final _snd_ctl_event_elem_get_maskPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<snd_ctl_event_t>)>>('snd_ctl_event_elem_get_mask');
  late final _snd_ctl_event_elem_get_mask = _snd_ctl_event_elem_get_maskPtr
      .asFunction<int Function(ffi.Pointer<snd_ctl_event_t>)>();

  int snd_ctl_event_elem_get_numid(
    ffi.Pointer<snd_ctl_event_t> obj,
  ) {
    return _snd_ctl_event_elem_get_numid(
      obj,
    );
  }

  late final _snd_ctl_event_elem_get_numidPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<snd_ctl_event_t>)>>('snd_ctl_event_elem_get_numid');
  late final _snd_ctl_event_elem_get_numid = _snd_ctl_event_elem_get_numidPtr
      .asFunction<int Function(ffi.Pointer<snd_ctl_event_t>)>();

  void snd_ctl_event_elem_get_id(
    ffi.Pointer<snd_ctl_event_t> obj,
    ffi.Pointer<snd_ctl_elem_id_t> ptr,
  ) {
    return _snd_ctl_event_elem_get_id(
      obj,
      ptr,
    );
  }

  late final _snd_ctl_event_elem_get_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_ctl_event_t>,
              ffi.Pointer<snd_ctl_elem_id_t>)>>('snd_ctl_event_elem_get_id');
  late final _snd_ctl_event_elem_get_id =
      _snd_ctl_event_elem_get_idPtr.asFunction<
          void Function(
              ffi.Pointer<snd_ctl_event_t>, ffi.Pointer<snd_ctl_elem_id_t>)>();

  int snd_ctl_event_elem_get_interface(
    ffi.Pointer<snd_ctl_event_t> obj,
  ) {
    return _snd_ctl_event_elem_get_interface(
      obj,
    );
  }

  late final _snd_ctl_event_elem_get_interfacePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<snd_ctl_event_t>)>>(
      'snd_ctl_event_elem_get_interface');
  late final _snd_ctl_event_elem_get_interface =
      _snd_ctl_event_elem_get_interfacePtr
          .asFunction<int Function(ffi.Pointer<snd_ctl_event_t>)>();

  int snd_ctl_event_elem_get_device(
    ffi.Pointer<snd_ctl_event_t> obj,
  ) {
    return _snd_ctl_event_elem_get_device(
      obj,
    );
  }

  late final _snd_ctl_event_elem_get_devicePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<snd_ctl_event_t>)>>('snd_ctl_event_elem_get_device');
  late final _snd_ctl_event_elem_get_device = _snd_ctl_event_elem_get_devicePtr
      .asFunction<int Function(ffi.Pointer<snd_ctl_event_t>)>();

  int snd_ctl_event_elem_get_subdevice(
    ffi.Pointer<snd_ctl_event_t> obj,
  ) {
    return _snd_ctl_event_elem_get_subdevice(
      obj,
    );
  }

  late final _snd_ctl_event_elem_get_subdevicePtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<snd_ctl_event_t>)>>(
      'snd_ctl_event_elem_get_subdevice');
  late final _snd_ctl_event_elem_get_subdevice =
      _snd_ctl_event_elem_get_subdevicePtr
          .asFunction<int Function(ffi.Pointer<snd_ctl_event_t>)>();

  ffi.Pointer<ffi.Char> snd_ctl_event_elem_get_name(
    ffi.Pointer<snd_ctl_event_t> obj,
  ) {
    return _snd_ctl_event_elem_get_name(
      obj,
    );
  }

  late final _snd_ctl_event_elem_get_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<snd_ctl_event_t>)>>('snd_ctl_event_elem_get_name');
  late final _snd_ctl_event_elem_get_name =
      _snd_ctl_event_elem_get_namePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<snd_ctl_event_t>)>();

  int snd_ctl_event_elem_get_index(
    ffi.Pointer<snd_ctl_event_t> obj,
  ) {
    return _snd_ctl_event_elem_get_index(
      obj,
    );
  }

  late final _snd_ctl_event_elem_get_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<snd_ctl_event_t>)>>('snd_ctl_event_elem_get_index');
  late final _snd_ctl_event_elem_get_index = _snd_ctl_event_elem_get_indexPtr
      .asFunction<int Function(ffi.Pointer<snd_ctl_event_t>)>();

  int snd_ctl_elem_list_alloc_space(
    ffi.Pointer<snd_ctl_elem_list_t> obj,
    int entries,
  ) {
    return _snd_ctl_elem_list_alloc_space(
      obj,
      entries,
    );
  }

  late final _snd_ctl_elem_list_alloc_spacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_ctl_elem_list_t>,
              ffi.UnsignedInt)>>('snd_ctl_elem_list_alloc_space');
  late final _snd_ctl_elem_list_alloc_space = _snd_ctl_elem_list_alloc_spacePtr
      .asFunction<int Function(ffi.Pointer<snd_ctl_elem_list_t>, int)>();

  void snd_ctl_elem_list_free_space(
    ffi.Pointer<snd_ctl_elem_list_t> obj,
  ) {
    return _snd_ctl_elem_list_free_space(
      obj,
    );
  }

  late final _snd_ctl_elem_list_free_spacePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<snd_ctl_elem_list_t>)>>(
      'snd_ctl_elem_list_free_space');
  late final _snd_ctl_elem_list_free_space = _snd_ctl_elem_list_free_spacePtr
      .asFunction<void Function(ffi.Pointer<snd_ctl_elem_list_t>)>();

  ffi.Pointer<ffi.Char> snd_ctl_ascii_elem_id_get(
    ffi.Pointer<snd_ctl_elem_id_t> id,
  ) {
    return _snd_ctl_ascii_elem_id_get(
      id,
    );
  }

  late final _snd_ctl_ascii_elem_id_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<snd_ctl_elem_id_t>)>>('snd_ctl_ascii_elem_id_get');
  late final _snd_ctl_ascii_elem_id_get =
      _snd_ctl_ascii_elem_id_getPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<snd_ctl_elem_id_t>)>();

  int snd_ctl_ascii_elem_id_parse(
    ffi.Pointer<snd_ctl_elem_id_t> dst,
    ffi.Pointer<ffi.Char> str,
  ) {
    return _snd_ctl_ascii_elem_id_parse(
      dst,
      str,
    );
  }

  late final _snd_ctl_ascii_elem_id_parsePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_ctl_elem_id_t>,
              ffi.Pointer<ffi.Char>)>>('snd_ctl_ascii_elem_id_parse');
  late final _snd_ctl_ascii_elem_id_parse =
      _snd_ctl_ascii_elem_id_parsePtr.asFunction<
          int Function(
              ffi.Pointer<snd_ctl_elem_id_t>, ffi.Pointer<ffi.Char>)>();

  int snd_ctl_ascii_value_parse(
    ffi.Pointer<snd_ctl_t> handle,
    ffi.Pointer<snd_ctl_elem_value_t> dst,
    ffi.Pointer<snd_ctl_elem_info_t> info,
    ffi.Pointer<ffi.Char> value,
  ) {
    return _snd_ctl_ascii_value_parse(
      handle,
      dst,
      info,
      value,
    );
  }

  late final _snd_ctl_ascii_value_parsePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_ctl_t>,
              ffi.Pointer<snd_ctl_elem_value_t>,
              ffi.Pointer<snd_ctl_elem_info_t>,
              ffi.Pointer<ffi.Char>)>>('snd_ctl_ascii_value_parse');
  late final _snd_ctl_ascii_value_parse =
      _snd_ctl_ascii_value_parsePtr.asFunction<
          int Function(
              ffi.Pointer<snd_ctl_t>,
              ffi.Pointer<snd_ctl_elem_value_t>,
              ffi.Pointer<snd_ctl_elem_info_t>,
              ffi.Pointer<ffi.Char>)>();

  int snd_ctl_elem_id_sizeof() {
    return _snd_ctl_elem_id_sizeof();
  }

  late final _snd_ctl_elem_id_sizeofPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>(
          'snd_ctl_elem_id_sizeof');
  late final _snd_ctl_elem_id_sizeof =
      _snd_ctl_elem_id_sizeofPtr.asFunction<int Function()>();

  int snd_ctl_elem_id_malloc(
    ffi.Pointer<ffi.Pointer<snd_ctl_elem_id_t>> ptr,
  ) {
    return _snd_ctl_elem_id_malloc(
      ptr,
    );
  }

  late final _snd_ctl_elem_id_mallocPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Pointer<snd_ctl_elem_id_t>>)>>(
      'snd_ctl_elem_id_malloc');
  late final _snd_ctl_elem_id_malloc = _snd_ctl_elem_id_mallocPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<snd_ctl_elem_id_t>>)>();

  void snd_ctl_elem_id_free(
    ffi.Pointer<snd_ctl_elem_id_t> obj,
  ) {
    return _snd_ctl_elem_id_free(
      obj,
    );
  }

  late final _snd_ctl_elem_id_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<snd_ctl_elem_id_t>)>>('snd_ctl_elem_id_free');
  late final _snd_ctl_elem_id_free = _snd_ctl_elem_id_freePtr
      .asFunction<void Function(ffi.Pointer<snd_ctl_elem_id_t>)>();

  void snd_ctl_elem_id_clear(
    ffi.Pointer<snd_ctl_elem_id_t> obj,
  ) {
    return _snd_ctl_elem_id_clear(
      obj,
    );
  }

  late final _snd_ctl_elem_id_clearPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<snd_ctl_elem_id_t>)>>('snd_ctl_elem_id_clear');
  late final _snd_ctl_elem_id_clear = _snd_ctl_elem_id_clearPtr
      .asFunction<void Function(ffi.Pointer<snd_ctl_elem_id_t>)>();

  void snd_ctl_elem_id_copy(
    ffi.Pointer<snd_ctl_elem_id_t> dst,
    ffi.Pointer<snd_ctl_elem_id_t> src,
  ) {
    return _snd_ctl_elem_id_copy(
      dst,
      src,
    );
  }

  late final _snd_ctl_elem_id_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_ctl_elem_id_t>,
              ffi.Pointer<snd_ctl_elem_id_t>)>>('snd_ctl_elem_id_copy');
  late final _snd_ctl_elem_id_copy = _snd_ctl_elem_id_copyPtr.asFunction<
      void Function(
          ffi.Pointer<snd_ctl_elem_id_t>, ffi.Pointer<snd_ctl_elem_id_t>)>();

  int snd_ctl_elem_id_compare_numid(
    ffi.Pointer<snd_ctl_elem_id_t> id1,
    ffi.Pointer<snd_ctl_elem_id_t> id2,
  ) {
    return _snd_ctl_elem_id_compare_numid(
      id1,
      id2,
    );
  }

  late final _snd_ctl_elem_id_compare_numidPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_ctl_elem_id_t>,
                  ffi.Pointer<snd_ctl_elem_id_t>)>>(
      'snd_ctl_elem_id_compare_numid');
  late final _snd_ctl_elem_id_compare_numid =
      _snd_ctl_elem_id_compare_numidPtr.asFunction<
          int Function(ffi.Pointer<snd_ctl_elem_id_t>,
              ffi.Pointer<snd_ctl_elem_id_t>)>();

  int snd_ctl_elem_id_compare_set(
    ffi.Pointer<snd_ctl_elem_id_t> id1,
    ffi.Pointer<snd_ctl_elem_id_t> id2,
  ) {
    return _snd_ctl_elem_id_compare_set(
      id1,
      id2,
    );
  }

  late final _snd_ctl_elem_id_compare_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_ctl_elem_id_t>,
              ffi.Pointer<snd_ctl_elem_id_t>)>>('snd_ctl_elem_id_compare_set');
  late final _snd_ctl_elem_id_compare_set =
      _snd_ctl_elem_id_compare_setPtr.asFunction<
          int Function(ffi.Pointer<snd_ctl_elem_id_t>,
              ffi.Pointer<snd_ctl_elem_id_t>)>();

  int snd_ctl_elem_id_get_numid(
    ffi.Pointer<snd_ctl_elem_id_t> obj,
  ) {
    return _snd_ctl_elem_id_get_numid(
      obj,
    );
  }

  late final _snd_ctl_elem_id_get_numidPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<snd_ctl_elem_id_t>)>>('snd_ctl_elem_id_get_numid');
  late final _snd_ctl_elem_id_get_numid = _snd_ctl_elem_id_get_numidPtr
      .asFunction<int Function(ffi.Pointer<snd_ctl_elem_id_t>)>();

  int snd_ctl_elem_id_get_interface(
    ffi.Pointer<snd_ctl_elem_id_t> obj,
  ) {
    return _snd_ctl_elem_id_get_interface(
      obj,
    );
  }

  late final _snd_ctl_elem_id_get_interfacePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<snd_ctl_elem_id_t>)>>(
      'snd_ctl_elem_id_get_interface');
  late final _snd_ctl_elem_id_get_interface = _snd_ctl_elem_id_get_interfacePtr
      .asFunction<int Function(ffi.Pointer<snd_ctl_elem_id_t>)>();

  int snd_ctl_elem_id_get_device(
    ffi.Pointer<snd_ctl_elem_id_t> obj,
  ) {
    return _snd_ctl_elem_id_get_device(
      obj,
    );
  }

  late final _snd_ctl_elem_id_get_devicePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<snd_ctl_elem_id_t>)>>('snd_ctl_elem_id_get_device');
  late final _snd_ctl_elem_id_get_device = _snd_ctl_elem_id_get_devicePtr
      .asFunction<int Function(ffi.Pointer<snd_ctl_elem_id_t>)>();

  int snd_ctl_elem_id_get_subdevice(
    ffi.Pointer<snd_ctl_elem_id_t> obj,
  ) {
    return _snd_ctl_elem_id_get_subdevice(
      obj,
    );
  }

  late final _snd_ctl_elem_id_get_subdevicePtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<snd_ctl_elem_id_t>)>>(
      'snd_ctl_elem_id_get_subdevice');
  late final _snd_ctl_elem_id_get_subdevice = _snd_ctl_elem_id_get_subdevicePtr
      .asFunction<int Function(ffi.Pointer<snd_ctl_elem_id_t>)>();

  ffi.Pointer<ffi.Char> snd_ctl_elem_id_get_name(
    ffi.Pointer<snd_ctl_elem_id_t> obj,
  ) {
    return _snd_ctl_elem_id_get_name(
      obj,
    );
  }

  late final _snd_ctl_elem_id_get_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<snd_ctl_elem_id_t>)>>('snd_ctl_elem_id_get_name');
  late final _snd_ctl_elem_id_get_name =
      _snd_ctl_elem_id_get_namePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<snd_ctl_elem_id_t>)>();

  int snd_ctl_elem_id_get_index(
    ffi.Pointer<snd_ctl_elem_id_t> obj,
  ) {
    return _snd_ctl_elem_id_get_index(
      obj,
    );
  }

  late final _snd_ctl_elem_id_get_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<snd_ctl_elem_id_t>)>>('snd_ctl_elem_id_get_index');
  late final _snd_ctl_elem_id_get_index = _snd_ctl_elem_id_get_indexPtr
      .asFunction<int Function(ffi.Pointer<snd_ctl_elem_id_t>)>();

  void snd_ctl_elem_id_set_numid(
    ffi.Pointer<snd_ctl_elem_id_t> obj,
    int val,
  ) {
    return _snd_ctl_elem_id_set_numid(
      obj,
      val,
    );
  }

  late final _snd_ctl_elem_id_set_numidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_ctl_elem_id_t>,
              ffi.UnsignedInt)>>('snd_ctl_elem_id_set_numid');
  late final _snd_ctl_elem_id_set_numid = _snd_ctl_elem_id_set_numidPtr
      .asFunction<void Function(ffi.Pointer<snd_ctl_elem_id_t>, int)>();

  void snd_ctl_elem_id_set_interface(
    ffi.Pointer<snd_ctl_elem_id_t> obj,
    int val,
  ) {
    return _snd_ctl_elem_id_set_interface(
      obj,
      val,
    );
  }

  late final _snd_ctl_elem_id_set_interfacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_ctl_elem_id_t>,
              ffi.Int32)>>('snd_ctl_elem_id_set_interface');
  late final _snd_ctl_elem_id_set_interface = _snd_ctl_elem_id_set_interfacePtr
      .asFunction<void Function(ffi.Pointer<snd_ctl_elem_id_t>, int)>();

  void snd_ctl_elem_id_set_device(
    ffi.Pointer<snd_ctl_elem_id_t> obj,
    int val,
  ) {
    return _snd_ctl_elem_id_set_device(
      obj,
      val,
    );
  }

  late final _snd_ctl_elem_id_set_devicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_ctl_elem_id_t>,
              ffi.UnsignedInt)>>('snd_ctl_elem_id_set_device');
  late final _snd_ctl_elem_id_set_device = _snd_ctl_elem_id_set_devicePtr
      .asFunction<void Function(ffi.Pointer<snd_ctl_elem_id_t>, int)>();

  void snd_ctl_elem_id_set_subdevice(
    ffi.Pointer<snd_ctl_elem_id_t> obj,
    int val,
  ) {
    return _snd_ctl_elem_id_set_subdevice(
      obj,
      val,
    );
  }

  late final _snd_ctl_elem_id_set_subdevicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_ctl_elem_id_t>,
              ffi.UnsignedInt)>>('snd_ctl_elem_id_set_subdevice');
  late final _snd_ctl_elem_id_set_subdevice = _snd_ctl_elem_id_set_subdevicePtr
      .asFunction<void Function(ffi.Pointer<snd_ctl_elem_id_t>, int)>();

  void snd_ctl_elem_id_set_name(
    ffi.Pointer<snd_ctl_elem_id_t> obj,
    ffi.Pointer<ffi.Char> val,
  ) {
    return _snd_ctl_elem_id_set_name(
      obj,
      val,
    );
  }

  late final _snd_ctl_elem_id_set_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_ctl_elem_id_t>,
              ffi.Pointer<ffi.Char>)>>('snd_ctl_elem_id_set_name');
  late final _snd_ctl_elem_id_set_name =
      _snd_ctl_elem_id_set_namePtr.asFunction<
          void Function(
              ffi.Pointer<snd_ctl_elem_id_t>, ffi.Pointer<ffi.Char>)>();

  void snd_ctl_elem_id_set_index(
    ffi.Pointer<snd_ctl_elem_id_t> obj,
    int val,
  ) {
    return _snd_ctl_elem_id_set_index(
      obj,
      val,
    );
  }

  late final _snd_ctl_elem_id_set_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_ctl_elem_id_t>,
              ffi.UnsignedInt)>>('snd_ctl_elem_id_set_index');
  late final _snd_ctl_elem_id_set_index = _snd_ctl_elem_id_set_indexPtr
      .asFunction<void Function(ffi.Pointer<snd_ctl_elem_id_t>, int)>();

  int snd_ctl_card_info_sizeof() {
    return _snd_ctl_card_info_sizeof();
  }

  late final _snd_ctl_card_info_sizeofPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>(
          'snd_ctl_card_info_sizeof');
  late final _snd_ctl_card_info_sizeof =
      _snd_ctl_card_info_sizeofPtr.asFunction<int Function()>();

  int snd_ctl_card_info_malloc(
    ffi.Pointer<ffi.Pointer<snd_ctl_card_info_t>> ptr,
  ) {
    return _snd_ctl_card_info_malloc(
      ptr,
    );
  }

  late final _snd_ctl_card_info_mallocPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Pointer<snd_ctl_card_info_t>>)>>(
      'snd_ctl_card_info_malloc');
  late final _snd_ctl_card_info_malloc =
      _snd_ctl_card_info_mallocPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<snd_ctl_card_info_t>>)>();

  void snd_ctl_card_info_free(
    ffi.Pointer<snd_ctl_card_info_t> obj,
  ) {
    return _snd_ctl_card_info_free(
      obj,
    );
  }

  late final _snd_ctl_card_info_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<snd_ctl_card_info_t>)>>('snd_ctl_card_info_free');
  late final _snd_ctl_card_info_free = _snd_ctl_card_info_freePtr
      .asFunction<void Function(ffi.Pointer<snd_ctl_card_info_t>)>();

  void snd_ctl_card_info_clear(
    ffi.Pointer<snd_ctl_card_info_t> obj,
  ) {
    return _snd_ctl_card_info_clear(
      obj,
    );
  }

  late final _snd_ctl_card_info_clearPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<snd_ctl_card_info_t>)>>('snd_ctl_card_info_clear');
  late final _snd_ctl_card_info_clear = _snd_ctl_card_info_clearPtr
      .asFunction<void Function(ffi.Pointer<snd_ctl_card_info_t>)>();

  void snd_ctl_card_info_copy(
    ffi.Pointer<snd_ctl_card_info_t> dst,
    ffi.Pointer<snd_ctl_card_info_t> src,
  ) {
    return _snd_ctl_card_info_copy(
      dst,
      src,
    );
  }

  late final _snd_ctl_card_info_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_ctl_card_info_t>,
              ffi.Pointer<snd_ctl_card_info_t>)>>('snd_ctl_card_info_copy');
  late final _snd_ctl_card_info_copy = _snd_ctl_card_info_copyPtr.asFunction<
      void Function(ffi.Pointer<snd_ctl_card_info_t>,
          ffi.Pointer<snd_ctl_card_info_t>)>();

  int snd_ctl_card_info_get_card(
    ffi.Pointer<snd_ctl_card_info_t> obj,
  ) {
    return _snd_ctl_card_info_get_card(
      obj,
    );
  }

  late final _snd_ctl_card_info_get_cardPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_ctl_card_info_t>)>>('snd_ctl_card_info_get_card');
  late final _snd_ctl_card_info_get_card = _snd_ctl_card_info_get_cardPtr
      .asFunction<int Function(ffi.Pointer<snd_ctl_card_info_t>)>();

  ffi.Pointer<ffi.Char> snd_ctl_card_info_get_id(
    ffi.Pointer<snd_ctl_card_info_t> obj,
  ) {
    return _snd_ctl_card_info_get_id(
      obj,
    );
  }

  late final _snd_ctl_card_info_get_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<snd_ctl_card_info_t>)>>('snd_ctl_card_info_get_id');
  late final _snd_ctl_card_info_get_id =
      _snd_ctl_card_info_get_idPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<snd_ctl_card_info_t>)>();

  ffi.Pointer<ffi.Char> snd_ctl_card_info_get_driver(
    ffi.Pointer<snd_ctl_card_info_t> obj,
  ) {
    return _snd_ctl_card_info_get_driver(
      obj,
    );
  }

  late final _snd_ctl_card_info_get_driverPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<snd_ctl_card_info_t>)>>(
      'snd_ctl_card_info_get_driver');
  late final _snd_ctl_card_info_get_driver =
      _snd_ctl_card_info_get_driverPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<snd_ctl_card_info_t>)>();

  ffi.Pointer<ffi.Char> snd_ctl_card_info_get_name(
    ffi.Pointer<snd_ctl_card_info_t> obj,
  ) {
    return _snd_ctl_card_info_get_name(
      obj,
    );
  }

  late final _snd_ctl_card_info_get_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<snd_ctl_card_info_t>)>>('snd_ctl_card_info_get_name');
  late final _snd_ctl_card_info_get_name =
      _snd_ctl_card_info_get_namePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<snd_ctl_card_info_t>)>();

  ffi.Pointer<ffi.Char> snd_ctl_card_info_get_longname(
    ffi.Pointer<snd_ctl_card_info_t> obj,
  ) {
    return _snd_ctl_card_info_get_longname(
      obj,
    );
  }

  late final _snd_ctl_card_info_get_longnamePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<snd_ctl_card_info_t>)>>(
      'snd_ctl_card_info_get_longname');
  late final _snd_ctl_card_info_get_longname =
      _snd_ctl_card_info_get_longnamePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<snd_ctl_card_info_t>)>();

  ffi.Pointer<ffi.Char> snd_ctl_card_info_get_mixername(
    ffi.Pointer<snd_ctl_card_info_t> obj,
  ) {
    return _snd_ctl_card_info_get_mixername(
      obj,
    );
  }

  late final _snd_ctl_card_info_get_mixernamePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<snd_ctl_card_info_t>)>>(
      'snd_ctl_card_info_get_mixername');
  late final _snd_ctl_card_info_get_mixername =
      _snd_ctl_card_info_get_mixernamePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<snd_ctl_card_info_t>)>();

  ffi.Pointer<ffi.Char> snd_ctl_card_info_get_components(
    ffi.Pointer<snd_ctl_card_info_t> obj,
  ) {
    return _snd_ctl_card_info_get_components(
      obj,
    );
  }

  late final _snd_ctl_card_info_get_componentsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<snd_ctl_card_info_t>)>>(
      'snd_ctl_card_info_get_components');
  late final _snd_ctl_card_info_get_components =
      _snd_ctl_card_info_get_componentsPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<snd_ctl_card_info_t>)>();

  int snd_ctl_event_sizeof() {
    return _snd_ctl_event_sizeof();
  }

  late final _snd_ctl_event_sizeofPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('snd_ctl_event_sizeof');
  late final _snd_ctl_event_sizeof =
      _snd_ctl_event_sizeofPtr.asFunction<int Function()>();

  int snd_ctl_event_malloc(
    ffi.Pointer<ffi.Pointer<snd_ctl_event_t>> ptr,
  ) {
    return _snd_ctl_event_malloc(
      ptr,
    );
  }

  late final _snd_ctl_event_mallocPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Pointer<snd_ctl_event_t>>)>>(
      'snd_ctl_event_malloc');
  late final _snd_ctl_event_malloc = _snd_ctl_event_mallocPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<snd_ctl_event_t>>)>();

  void snd_ctl_event_free(
    ffi.Pointer<snd_ctl_event_t> obj,
  ) {
    return _snd_ctl_event_free(
      obj,
    );
  }

  late final _snd_ctl_event_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<snd_ctl_event_t>)>>(
      'snd_ctl_event_free');
  late final _snd_ctl_event_free = _snd_ctl_event_freePtr
      .asFunction<void Function(ffi.Pointer<snd_ctl_event_t>)>();

  void snd_ctl_event_clear(
    ffi.Pointer<snd_ctl_event_t> obj,
  ) {
    return _snd_ctl_event_clear(
      obj,
    );
  }

  late final _snd_ctl_event_clearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<snd_ctl_event_t>)>>(
      'snd_ctl_event_clear');
  late final _snd_ctl_event_clear = _snd_ctl_event_clearPtr
      .asFunction<void Function(ffi.Pointer<snd_ctl_event_t>)>();

  void snd_ctl_event_copy(
    ffi.Pointer<snd_ctl_event_t> dst,
    ffi.Pointer<snd_ctl_event_t> src,
  ) {
    return _snd_ctl_event_copy(
      dst,
      src,
    );
  }

  late final _snd_ctl_event_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_ctl_event_t>,
              ffi.Pointer<snd_ctl_event_t>)>>('snd_ctl_event_copy');
  late final _snd_ctl_event_copy = _snd_ctl_event_copyPtr.asFunction<
      void Function(
          ffi.Pointer<snd_ctl_event_t>, ffi.Pointer<snd_ctl_event_t>)>();

  int snd_ctl_event_get_type(
    ffi.Pointer<snd_ctl_event_t> obj,
  ) {
    return _snd_ctl_event_get_type(
      obj,
    );
  }

  late final _snd_ctl_event_get_typePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<snd_ctl_event_t>)>>(
      'snd_ctl_event_get_type');
  late final _snd_ctl_event_get_type = _snd_ctl_event_get_typePtr
      .asFunction<int Function(ffi.Pointer<snd_ctl_event_t>)>();

  int snd_ctl_elem_list_sizeof() {
    return _snd_ctl_elem_list_sizeof();
  }

  late final _snd_ctl_elem_list_sizeofPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>(
          'snd_ctl_elem_list_sizeof');
  late final _snd_ctl_elem_list_sizeof =
      _snd_ctl_elem_list_sizeofPtr.asFunction<int Function()>();

  int snd_ctl_elem_list_malloc(
    ffi.Pointer<ffi.Pointer<snd_ctl_elem_list_t>> ptr,
  ) {
    return _snd_ctl_elem_list_malloc(
      ptr,
    );
  }

  late final _snd_ctl_elem_list_mallocPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Pointer<snd_ctl_elem_list_t>>)>>(
      'snd_ctl_elem_list_malloc');
  late final _snd_ctl_elem_list_malloc =
      _snd_ctl_elem_list_mallocPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<snd_ctl_elem_list_t>>)>();

  void snd_ctl_elem_list_free(
    ffi.Pointer<snd_ctl_elem_list_t> obj,
  ) {
    return _snd_ctl_elem_list_free(
      obj,
    );
  }

  late final _snd_ctl_elem_list_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<snd_ctl_elem_list_t>)>>('snd_ctl_elem_list_free');
  late final _snd_ctl_elem_list_free = _snd_ctl_elem_list_freePtr
      .asFunction<void Function(ffi.Pointer<snd_ctl_elem_list_t>)>();

  void snd_ctl_elem_list_clear(
    ffi.Pointer<snd_ctl_elem_list_t> obj,
  ) {
    return _snd_ctl_elem_list_clear(
      obj,
    );
  }

  late final _snd_ctl_elem_list_clearPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<snd_ctl_elem_list_t>)>>('snd_ctl_elem_list_clear');
  late final _snd_ctl_elem_list_clear = _snd_ctl_elem_list_clearPtr
      .asFunction<void Function(ffi.Pointer<snd_ctl_elem_list_t>)>();

  void snd_ctl_elem_list_copy(
    ffi.Pointer<snd_ctl_elem_list_t> dst,
    ffi.Pointer<snd_ctl_elem_list_t> src,
  ) {
    return _snd_ctl_elem_list_copy(
      dst,
      src,
    );
  }

  late final _snd_ctl_elem_list_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_ctl_elem_list_t>,
              ffi.Pointer<snd_ctl_elem_list_t>)>>('snd_ctl_elem_list_copy');
  late final _snd_ctl_elem_list_copy = _snd_ctl_elem_list_copyPtr.asFunction<
      void Function(ffi.Pointer<snd_ctl_elem_list_t>,
          ffi.Pointer<snd_ctl_elem_list_t>)>();

  void snd_ctl_elem_list_set_offset(
    ffi.Pointer<snd_ctl_elem_list_t> obj,
    int val,
  ) {
    return _snd_ctl_elem_list_set_offset(
      obj,
      val,
    );
  }

  late final _snd_ctl_elem_list_set_offsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_ctl_elem_list_t>,
              ffi.UnsignedInt)>>('snd_ctl_elem_list_set_offset');
  late final _snd_ctl_elem_list_set_offset = _snd_ctl_elem_list_set_offsetPtr
      .asFunction<void Function(ffi.Pointer<snd_ctl_elem_list_t>, int)>();

  int snd_ctl_elem_list_get_used(
    ffi.Pointer<snd_ctl_elem_list_t> obj,
  ) {
    return _snd_ctl_elem_list_get_used(
      obj,
    );
  }

  late final _snd_ctl_elem_list_get_usedPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<snd_ctl_elem_list_t>)>>('snd_ctl_elem_list_get_used');
  late final _snd_ctl_elem_list_get_used = _snd_ctl_elem_list_get_usedPtr
      .asFunction<int Function(ffi.Pointer<snd_ctl_elem_list_t>)>();

  int snd_ctl_elem_list_get_count(
    ffi.Pointer<snd_ctl_elem_list_t> obj,
  ) {
    return _snd_ctl_elem_list_get_count(
      obj,
    );
  }

  late final _snd_ctl_elem_list_get_countPtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<snd_ctl_elem_list_t>)>>(
      'snd_ctl_elem_list_get_count');
  late final _snd_ctl_elem_list_get_count = _snd_ctl_elem_list_get_countPtr
      .asFunction<int Function(ffi.Pointer<snd_ctl_elem_list_t>)>();

  void snd_ctl_elem_list_get_id(
    ffi.Pointer<snd_ctl_elem_list_t> obj,
    int idx,
    ffi.Pointer<snd_ctl_elem_id_t> ptr,
  ) {
    return _snd_ctl_elem_list_get_id(
      obj,
      idx,
      ptr,
    );
  }

  late final _snd_ctl_elem_list_get_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_ctl_elem_list_t>, ffi.UnsignedInt,
              ffi.Pointer<snd_ctl_elem_id_t>)>>('snd_ctl_elem_list_get_id');
  late final _snd_ctl_elem_list_get_id =
      _snd_ctl_elem_list_get_idPtr.asFunction<
          void Function(ffi.Pointer<snd_ctl_elem_list_t>, int,
              ffi.Pointer<snd_ctl_elem_id_t>)>();

  int snd_ctl_elem_list_get_numid(
    ffi.Pointer<snd_ctl_elem_list_t> obj,
    int idx,
  ) {
    return _snd_ctl_elem_list_get_numid(
      obj,
      idx,
    );
  }

  late final _snd_ctl_elem_list_get_numidPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<snd_ctl_elem_list_t>,
              ffi.UnsignedInt)>>('snd_ctl_elem_list_get_numid');
  late final _snd_ctl_elem_list_get_numid = _snd_ctl_elem_list_get_numidPtr
      .asFunction<int Function(ffi.Pointer<snd_ctl_elem_list_t>, int)>();

  int snd_ctl_elem_list_get_interface(
    ffi.Pointer<snd_ctl_elem_list_t> obj,
    int idx,
  ) {
    return _snd_ctl_elem_list_get_interface(
      obj,
      idx,
    );
  }

  late final _snd_ctl_elem_list_get_interfacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<snd_ctl_elem_list_t>,
              ffi.UnsignedInt)>>('snd_ctl_elem_list_get_interface');
  late final _snd_ctl_elem_list_get_interface =
      _snd_ctl_elem_list_get_interfacePtr
          .asFunction<int Function(ffi.Pointer<snd_ctl_elem_list_t>, int)>();

  int snd_ctl_elem_list_get_device(
    ffi.Pointer<snd_ctl_elem_list_t> obj,
    int idx,
  ) {
    return _snd_ctl_elem_list_get_device(
      obj,
      idx,
    );
  }

  late final _snd_ctl_elem_list_get_devicePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<snd_ctl_elem_list_t>,
              ffi.UnsignedInt)>>('snd_ctl_elem_list_get_device');
  late final _snd_ctl_elem_list_get_device = _snd_ctl_elem_list_get_devicePtr
      .asFunction<int Function(ffi.Pointer<snd_ctl_elem_list_t>, int)>();

  int snd_ctl_elem_list_get_subdevice(
    ffi.Pointer<snd_ctl_elem_list_t> obj,
    int idx,
  ) {
    return _snd_ctl_elem_list_get_subdevice(
      obj,
      idx,
    );
  }

  late final _snd_ctl_elem_list_get_subdevicePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<snd_ctl_elem_list_t>,
              ffi.UnsignedInt)>>('snd_ctl_elem_list_get_subdevice');
  late final _snd_ctl_elem_list_get_subdevice =
      _snd_ctl_elem_list_get_subdevicePtr
          .asFunction<int Function(ffi.Pointer<snd_ctl_elem_list_t>, int)>();

  ffi.Pointer<ffi.Char> snd_ctl_elem_list_get_name(
    ffi.Pointer<snd_ctl_elem_list_t> obj,
    int idx,
  ) {
    return _snd_ctl_elem_list_get_name(
      obj,
      idx,
    );
  }

  late final _snd_ctl_elem_list_get_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<snd_ctl_elem_list_t>,
              ffi.UnsignedInt)>>('snd_ctl_elem_list_get_name');
  late final _snd_ctl_elem_list_get_name =
      _snd_ctl_elem_list_get_namePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<snd_ctl_elem_list_t>, int)>();

  int snd_ctl_elem_list_get_index(
    ffi.Pointer<snd_ctl_elem_list_t> obj,
    int idx,
  ) {
    return _snd_ctl_elem_list_get_index(
      obj,
      idx,
    );
  }

  late final _snd_ctl_elem_list_get_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<snd_ctl_elem_list_t>,
              ffi.UnsignedInt)>>('snd_ctl_elem_list_get_index');
  late final _snd_ctl_elem_list_get_index = _snd_ctl_elem_list_get_indexPtr
      .asFunction<int Function(ffi.Pointer<snd_ctl_elem_list_t>, int)>();

  int snd_ctl_elem_info_sizeof() {
    return _snd_ctl_elem_info_sizeof();
  }

  late final _snd_ctl_elem_info_sizeofPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>(
          'snd_ctl_elem_info_sizeof');
  late final _snd_ctl_elem_info_sizeof =
      _snd_ctl_elem_info_sizeofPtr.asFunction<int Function()>();

  int snd_ctl_elem_info_malloc(
    ffi.Pointer<ffi.Pointer<snd_ctl_elem_info_t>> ptr,
  ) {
    return _snd_ctl_elem_info_malloc(
      ptr,
    );
  }

  late final _snd_ctl_elem_info_mallocPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Pointer<snd_ctl_elem_info_t>>)>>(
      'snd_ctl_elem_info_malloc');
  late final _snd_ctl_elem_info_malloc =
      _snd_ctl_elem_info_mallocPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<snd_ctl_elem_info_t>>)>();

  void snd_ctl_elem_info_free(
    ffi.Pointer<snd_ctl_elem_info_t> obj,
  ) {
    return _snd_ctl_elem_info_free(
      obj,
    );
  }

  late final _snd_ctl_elem_info_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<snd_ctl_elem_info_t>)>>('snd_ctl_elem_info_free');
  late final _snd_ctl_elem_info_free = _snd_ctl_elem_info_freePtr
      .asFunction<void Function(ffi.Pointer<snd_ctl_elem_info_t>)>();

  void snd_ctl_elem_info_clear(
    ffi.Pointer<snd_ctl_elem_info_t> obj,
  ) {
    return _snd_ctl_elem_info_clear(
      obj,
    );
  }

  late final _snd_ctl_elem_info_clearPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<snd_ctl_elem_info_t>)>>('snd_ctl_elem_info_clear');
  late final _snd_ctl_elem_info_clear = _snd_ctl_elem_info_clearPtr
      .asFunction<void Function(ffi.Pointer<snd_ctl_elem_info_t>)>();

  void snd_ctl_elem_info_copy(
    ffi.Pointer<snd_ctl_elem_info_t> dst,
    ffi.Pointer<snd_ctl_elem_info_t> src,
  ) {
    return _snd_ctl_elem_info_copy(
      dst,
      src,
    );
  }

  late final _snd_ctl_elem_info_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_ctl_elem_info_t>,
              ffi.Pointer<snd_ctl_elem_info_t>)>>('snd_ctl_elem_info_copy');
  late final _snd_ctl_elem_info_copy = _snd_ctl_elem_info_copyPtr.asFunction<
      void Function(ffi.Pointer<snd_ctl_elem_info_t>,
          ffi.Pointer<snd_ctl_elem_info_t>)>();

  int snd_ctl_elem_info_get_type(
    ffi.Pointer<snd_ctl_elem_info_t> obj,
  ) {
    return _snd_ctl_elem_info_get_type(
      obj,
    );
  }

  late final _snd_ctl_elem_info_get_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<snd_ctl_elem_info_t>)>>('snd_ctl_elem_info_get_type');
  late final _snd_ctl_elem_info_get_type = _snd_ctl_elem_info_get_typePtr
      .asFunction<int Function(ffi.Pointer<snd_ctl_elem_info_t>)>();

  int snd_ctl_elem_info_is_readable(
    ffi.Pointer<snd_ctl_elem_info_t> obj,
  ) {
    return _snd_ctl_elem_info_is_readable(
      obj,
    );
  }

  late final _snd_ctl_elem_info_is_readablePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_ctl_elem_info_t>)>>(
      'snd_ctl_elem_info_is_readable');
  late final _snd_ctl_elem_info_is_readable = _snd_ctl_elem_info_is_readablePtr
      .asFunction<int Function(ffi.Pointer<snd_ctl_elem_info_t>)>();

  int snd_ctl_elem_info_is_writable(
    ffi.Pointer<snd_ctl_elem_info_t> obj,
  ) {
    return _snd_ctl_elem_info_is_writable(
      obj,
    );
  }

  late final _snd_ctl_elem_info_is_writablePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_ctl_elem_info_t>)>>(
      'snd_ctl_elem_info_is_writable');
  late final _snd_ctl_elem_info_is_writable = _snd_ctl_elem_info_is_writablePtr
      .asFunction<int Function(ffi.Pointer<snd_ctl_elem_info_t>)>();

  int snd_ctl_elem_info_is_volatile(
    ffi.Pointer<snd_ctl_elem_info_t> obj,
  ) {
    return _snd_ctl_elem_info_is_volatile(
      obj,
    );
  }

  late final _snd_ctl_elem_info_is_volatilePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_ctl_elem_info_t>)>>(
      'snd_ctl_elem_info_is_volatile');
  late final _snd_ctl_elem_info_is_volatile = _snd_ctl_elem_info_is_volatilePtr
      .asFunction<int Function(ffi.Pointer<snd_ctl_elem_info_t>)>();

  int snd_ctl_elem_info_is_inactive(
    ffi.Pointer<snd_ctl_elem_info_t> obj,
  ) {
    return _snd_ctl_elem_info_is_inactive(
      obj,
    );
  }

  late final _snd_ctl_elem_info_is_inactivePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_ctl_elem_info_t>)>>(
      'snd_ctl_elem_info_is_inactive');
  late final _snd_ctl_elem_info_is_inactive = _snd_ctl_elem_info_is_inactivePtr
      .asFunction<int Function(ffi.Pointer<snd_ctl_elem_info_t>)>();

  int snd_ctl_elem_info_is_locked(
    ffi.Pointer<snd_ctl_elem_info_t> obj,
  ) {
    return _snd_ctl_elem_info_is_locked(
      obj,
    );
  }

  late final _snd_ctl_elem_info_is_lockedPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_ctl_elem_info_t>)>>(
      'snd_ctl_elem_info_is_locked');
  late final _snd_ctl_elem_info_is_locked = _snd_ctl_elem_info_is_lockedPtr
      .asFunction<int Function(ffi.Pointer<snd_ctl_elem_info_t>)>();

  int snd_ctl_elem_info_is_tlv_readable(
    ffi.Pointer<snd_ctl_elem_info_t> obj,
  ) {
    return _snd_ctl_elem_info_is_tlv_readable(
      obj,
    );
  }

  late final _snd_ctl_elem_info_is_tlv_readablePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_ctl_elem_info_t>)>>(
      'snd_ctl_elem_info_is_tlv_readable');
  late final _snd_ctl_elem_info_is_tlv_readable =
      _snd_ctl_elem_info_is_tlv_readablePtr
          .asFunction<int Function(ffi.Pointer<snd_ctl_elem_info_t>)>();

  int snd_ctl_elem_info_is_tlv_writable(
    ffi.Pointer<snd_ctl_elem_info_t> obj,
  ) {
    return _snd_ctl_elem_info_is_tlv_writable(
      obj,
    );
  }

  late final _snd_ctl_elem_info_is_tlv_writablePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_ctl_elem_info_t>)>>(
      'snd_ctl_elem_info_is_tlv_writable');
  late final _snd_ctl_elem_info_is_tlv_writable =
      _snd_ctl_elem_info_is_tlv_writablePtr
          .asFunction<int Function(ffi.Pointer<snd_ctl_elem_info_t>)>();

  int snd_ctl_elem_info_is_tlv_commandable(
    ffi.Pointer<snd_ctl_elem_info_t> obj,
  ) {
    return _snd_ctl_elem_info_is_tlv_commandable(
      obj,
    );
  }

  late final _snd_ctl_elem_info_is_tlv_commandablePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_ctl_elem_info_t>)>>(
      'snd_ctl_elem_info_is_tlv_commandable');
  late final _snd_ctl_elem_info_is_tlv_commandable =
      _snd_ctl_elem_info_is_tlv_commandablePtr
          .asFunction<int Function(ffi.Pointer<snd_ctl_elem_info_t>)>();

  int snd_ctl_elem_info_is_owner(
    ffi.Pointer<snd_ctl_elem_info_t> obj,
  ) {
    return _snd_ctl_elem_info_is_owner(
      obj,
    );
  }

  late final _snd_ctl_elem_info_is_ownerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_ctl_elem_info_t>)>>('snd_ctl_elem_info_is_owner');
  late final _snd_ctl_elem_info_is_owner = _snd_ctl_elem_info_is_ownerPtr
      .asFunction<int Function(ffi.Pointer<snd_ctl_elem_info_t>)>();

  int snd_ctl_elem_info_is_user(
    ffi.Pointer<snd_ctl_elem_info_t> obj,
  ) {
    return _snd_ctl_elem_info_is_user(
      obj,
    );
  }

  late final _snd_ctl_elem_info_is_userPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_ctl_elem_info_t>)>>('snd_ctl_elem_info_is_user');
  late final _snd_ctl_elem_info_is_user = _snd_ctl_elem_info_is_userPtr
      .asFunction<int Function(ffi.Pointer<snd_ctl_elem_info_t>)>();

  int snd_ctl_elem_info_get_owner(
    ffi.Pointer<snd_ctl_elem_info_t> obj,
  ) {
    return _snd_ctl_elem_info_get_owner(
      obj,
    );
  }

  late final _snd_ctl_elem_info_get_ownerPtr = _lookup<
          ffi.NativeFunction<pid_t Function(ffi.Pointer<snd_ctl_elem_info_t>)>>(
      'snd_ctl_elem_info_get_owner');
  late final _snd_ctl_elem_info_get_owner = _snd_ctl_elem_info_get_ownerPtr
      .asFunction<int Function(ffi.Pointer<snd_ctl_elem_info_t>)>();

  int snd_ctl_elem_info_get_count(
    ffi.Pointer<snd_ctl_elem_info_t> obj,
  ) {
    return _snd_ctl_elem_info_get_count(
      obj,
    );
  }

  late final _snd_ctl_elem_info_get_countPtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<snd_ctl_elem_info_t>)>>(
      'snd_ctl_elem_info_get_count');
  late final _snd_ctl_elem_info_get_count = _snd_ctl_elem_info_get_countPtr
      .asFunction<int Function(ffi.Pointer<snd_ctl_elem_info_t>)>();

  int snd_ctl_elem_info_get_min(
    ffi.Pointer<snd_ctl_elem_info_t> obj,
  ) {
    return _snd_ctl_elem_info_get_min(
      obj,
    );
  }

  late final _snd_ctl_elem_info_get_minPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(
              ffi.Pointer<snd_ctl_elem_info_t>)>>('snd_ctl_elem_info_get_min');
  late final _snd_ctl_elem_info_get_min = _snd_ctl_elem_info_get_minPtr
      .asFunction<int Function(ffi.Pointer<snd_ctl_elem_info_t>)>();

  int snd_ctl_elem_info_get_max(
    ffi.Pointer<snd_ctl_elem_info_t> obj,
  ) {
    return _snd_ctl_elem_info_get_max(
      obj,
    );
  }

  late final _snd_ctl_elem_info_get_maxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(
              ffi.Pointer<snd_ctl_elem_info_t>)>>('snd_ctl_elem_info_get_max');
  late final _snd_ctl_elem_info_get_max = _snd_ctl_elem_info_get_maxPtr
      .asFunction<int Function(ffi.Pointer<snd_ctl_elem_info_t>)>();

  int snd_ctl_elem_info_get_step(
    ffi.Pointer<snd_ctl_elem_info_t> obj,
  ) {
    return _snd_ctl_elem_info_get_step(
      obj,
    );
  }

  late final _snd_ctl_elem_info_get_stepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(
              ffi.Pointer<snd_ctl_elem_info_t>)>>('snd_ctl_elem_info_get_step');
  late final _snd_ctl_elem_info_get_step = _snd_ctl_elem_info_get_stepPtr
      .asFunction<int Function(ffi.Pointer<snd_ctl_elem_info_t>)>();

  int snd_ctl_elem_info_get_min64(
    ffi.Pointer<snd_ctl_elem_info_t> obj,
  ) {
    return _snd_ctl_elem_info_get_min64(
      obj,
    );
  }

  late final _snd_ctl_elem_info_get_min64Ptr = _lookup<
          ffi.NativeFunction<
              ffi.LongLong Function(ffi.Pointer<snd_ctl_elem_info_t>)>>(
      'snd_ctl_elem_info_get_min64');
  late final _snd_ctl_elem_info_get_min64 = _snd_ctl_elem_info_get_min64Ptr
      .asFunction<int Function(ffi.Pointer<snd_ctl_elem_info_t>)>();

  int snd_ctl_elem_info_get_max64(
    ffi.Pointer<snd_ctl_elem_info_t> obj,
  ) {
    return _snd_ctl_elem_info_get_max64(
      obj,
    );
  }

  late final _snd_ctl_elem_info_get_max64Ptr = _lookup<
          ffi.NativeFunction<
              ffi.LongLong Function(ffi.Pointer<snd_ctl_elem_info_t>)>>(
      'snd_ctl_elem_info_get_max64');
  late final _snd_ctl_elem_info_get_max64 = _snd_ctl_elem_info_get_max64Ptr
      .asFunction<int Function(ffi.Pointer<snd_ctl_elem_info_t>)>();

  int snd_ctl_elem_info_get_step64(
    ffi.Pointer<snd_ctl_elem_info_t> obj,
  ) {
    return _snd_ctl_elem_info_get_step64(
      obj,
    );
  }

  late final _snd_ctl_elem_info_get_step64Ptr = _lookup<
          ffi.NativeFunction<
              ffi.LongLong Function(ffi.Pointer<snd_ctl_elem_info_t>)>>(
      'snd_ctl_elem_info_get_step64');
  late final _snd_ctl_elem_info_get_step64 = _snd_ctl_elem_info_get_step64Ptr
      .asFunction<int Function(ffi.Pointer<snd_ctl_elem_info_t>)>();

  int snd_ctl_elem_info_get_items(
    ffi.Pointer<snd_ctl_elem_info_t> obj,
  ) {
    return _snd_ctl_elem_info_get_items(
      obj,
    );
  }

  late final _snd_ctl_elem_info_get_itemsPtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<snd_ctl_elem_info_t>)>>(
      'snd_ctl_elem_info_get_items');
  late final _snd_ctl_elem_info_get_items = _snd_ctl_elem_info_get_itemsPtr
      .asFunction<int Function(ffi.Pointer<snd_ctl_elem_info_t>)>();

  void snd_ctl_elem_info_set_item(
    ffi.Pointer<snd_ctl_elem_info_t> obj,
    int val,
  ) {
    return _snd_ctl_elem_info_set_item(
      obj,
      val,
    );
  }

  late final _snd_ctl_elem_info_set_itemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_ctl_elem_info_t>,
              ffi.UnsignedInt)>>('snd_ctl_elem_info_set_item');
  late final _snd_ctl_elem_info_set_item = _snd_ctl_elem_info_set_itemPtr
      .asFunction<void Function(ffi.Pointer<snd_ctl_elem_info_t>, int)>();

  ffi.Pointer<ffi.Char> snd_ctl_elem_info_get_item_name(
    ffi.Pointer<snd_ctl_elem_info_t> obj,
  ) {
    return _snd_ctl_elem_info_get_item_name(
      obj,
    );
  }

  late final _snd_ctl_elem_info_get_item_namePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<snd_ctl_elem_info_t>)>>(
      'snd_ctl_elem_info_get_item_name');
  late final _snd_ctl_elem_info_get_item_name =
      _snd_ctl_elem_info_get_item_namePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<snd_ctl_elem_info_t>)>();

  int snd_ctl_elem_info_get_dimensions(
    ffi.Pointer<snd_ctl_elem_info_t> obj,
  ) {
    return _snd_ctl_elem_info_get_dimensions(
      obj,
    );
  }

  late final _snd_ctl_elem_info_get_dimensionsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_ctl_elem_info_t>)>>(
      'snd_ctl_elem_info_get_dimensions');
  late final _snd_ctl_elem_info_get_dimensions =
      _snd_ctl_elem_info_get_dimensionsPtr
          .asFunction<int Function(ffi.Pointer<snd_ctl_elem_info_t>)>();

  int snd_ctl_elem_info_get_dimension(
    ffi.Pointer<snd_ctl_elem_info_t> obj,
    int idx,
  ) {
    return _snd_ctl_elem_info_get_dimension(
      obj,
      idx,
    );
  }

  late final _snd_ctl_elem_info_get_dimensionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_ctl_elem_info_t>,
              ffi.UnsignedInt)>>('snd_ctl_elem_info_get_dimension');
  late final _snd_ctl_elem_info_get_dimension =
      _snd_ctl_elem_info_get_dimensionPtr
          .asFunction<int Function(ffi.Pointer<snd_ctl_elem_info_t>, int)>();

  int snd_ctl_elem_info_set_dimension(
    ffi.Pointer<snd_ctl_elem_info_t> info,
    ffi.Pointer<ffi.Int> dimension,
  ) {
    return _snd_ctl_elem_info_set_dimension(
      info,
      dimension,
    );
  }

  late final _snd_ctl_elem_info_set_dimensionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_ctl_elem_info_t>,
              ffi.Pointer<ffi.Int>)>>('snd_ctl_elem_info_set_dimension');
  late final _snd_ctl_elem_info_set_dimension =
      _snd_ctl_elem_info_set_dimensionPtr.asFunction<
          int Function(
              ffi.Pointer<snd_ctl_elem_info_t>, ffi.Pointer<ffi.Int>)>();

  void snd_ctl_elem_info_get_id(
    ffi.Pointer<snd_ctl_elem_info_t> obj,
    ffi.Pointer<snd_ctl_elem_id_t> ptr,
  ) {
    return _snd_ctl_elem_info_get_id(
      obj,
      ptr,
    );
  }

  late final _snd_ctl_elem_info_get_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_ctl_elem_info_t>,
              ffi.Pointer<snd_ctl_elem_id_t>)>>('snd_ctl_elem_info_get_id');
  late final _snd_ctl_elem_info_get_id =
      _snd_ctl_elem_info_get_idPtr.asFunction<
          void Function(ffi.Pointer<snd_ctl_elem_info_t>,
              ffi.Pointer<snd_ctl_elem_id_t>)>();

  int snd_ctl_elem_info_get_numid(
    ffi.Pointer<snd_ctl_elem_info_t> obj,
  ) {
    return _snd_ctl_elem_info_get_numid(
      obj,
    );
  }

  late final _snd_ctl_elem_info_get_numidPtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<snd_ctl_elem_info_t>)>>(
      'snd_ctl_elem_info_get_numid');
  late final _snd_ctl_elem_info_get_numid = _snd_ctl_elem_info_get_numidPtr
      .asFunction<int Function(ffi.Pointer<snd_ctl_elem_info_t>)>();

  int snd_ctl_elem_info_get_interface(
    ffi.Pointer<snd_ctl_elem_info_t> obj,
  ) {
    return _snd_ctl_elem_info_get_interface(
      obj,
    );
  }

  late final _snd_ctl_elem_info_get_interfacePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<snd_ctl_elem_info_t>)>>(
      'snd_ctl_elem_info_get_interface');
  late final _snd_ctl_elem_info_get_interface =
      _snd_ctl_elem_info_get_interfacePtr
          .asFunction<int Function(ffi.Pointer<snd_ctl_elem_info_t>)>();

  int snd_ctl_elem_info_get_device(
    ffi.Pointer<snd_ctl_elem_info_t> obj,
  ) {
    return _snd_ctl_elem_info_get_device(
      obj,
    );
  }

  late final _snd_ctl_elem_info_get_devicePtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<snd_ctl_elem_info_t>)>>(
      'snd_ctl_elem_info_get_device');
  late final _snd_ctl_elem_info_get_device = _snd_ctl_elem_info_get_devicePtr
      .asFunction<int Function(ffi.Pointer<snd_ctl_elem_info_t>)>();

  int snd_ctl_elem_info_get_subdevice(
    ffi.Pointer<snd_ctl_elem_info_t> obj,
  ) {
    return _snd_ctl_elem_info_get_subdevice(
      obj,
    );
  }

  late final _snd_ctl_elem_info_get_subdevicePtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<snd_ctl_elem_info_t>)>>(
      'snd_ctl_elem_info_get_subdevice');
  late final _snd_ctl_elem_info_get_subdevice =
      _snd_ctl_elem_info_get_subdevicePtr
          .asFunction<int Function(ffi.Pointer<snd_ctl_elem_info_t>)>();

  ffi.Pointer<ffi.Char> snd_ctl_elem_info_get_name(
    ffi.Pointer<snd_ctl_elem_info_t> obj,
  ) {
    return _snd_ctl_elem_info_get_name(
      obj,
    );
  }

  late final _snd_ctl_elem_info_get_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<snd_ctl_elem_info_t>)>>('snd_ctl_elem_info_get_name');
  late final _snd_ctl_elem_info_get_name =
      _snd_ctl_elem_info_get_namePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<snd_ctl_elem_info_t>)>();

  int snd_ctl_elem_info_get_index(
    ffi.Pointer<snd_ctl_elem_info_t> obj,
  ) {
    return _snd_ctl_elem_info_get_index(
      obj,
    );
  }

  late final _snd_ctl_elem_info_get_indexPtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<snd_ctl_elem_info_t>)>>(
      'snd_ctl_elem_info_get_index');
  late final _snd_ctl_elem_info_get_index = _snd_ctl_elem_info_get_indexPtr
      .asFunction<int Function(ffi.Pointer<snd_ctl_elem_info_t>)>();

  void snd_ctl_elem_info_set_id(
    ffi.Pointer<snd_ctl_elem_info_t> obj,
    ffi.Pointer<snd_ctl_elem_id_t> ptr,
  ) {
    return _snd_ctl_elem_info_set_id(
      obj,
      ptr,
    );
  }

  late final _snd_ctl_elem_info_set_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_ctl_elem_info_t>,
              ffi.Pointer<snd_ctl_elem_id_t>)>>('snd_ctl_elem_info_set_id');
  late final _snd_ctl_elem_info_set_id =
      _snd_ctl_elem_info_set_idPtr.asFunction<
          void Function(ffi.Pointer<snd_ctl_elem_info_t>,
              ffi.Pointer<snd_ctl_elem_id_t>)>();

  void snd_ctl_elem_info_set_numid(
    ffi.Pointer<snd_ctl_elem_info_t> obj,
    int val,
  ) {
    return _snd_ctl_elem_info_set_numid(
      obj,
      val,
    );
  }

  late final _snd_ctl_elem_info_set_numidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_ctl_elem_info_t>,
              ffi.UnsignedInt)>>('snd_ctl_elem_info_set_numid');
  late final _snd_ctl_elem_info_set_numid = _snd_ctl_elem_info_set_numidPtr
      .asFunction<void Function(ffi.Pointer<snd_ctl_elem_info_t>, int)>();

  void snd_ctl_elem_info_set_interface(
    ffi.Pointer<snd_ctl_elem_info_t> obj,
    int val,
  ) {
    return _snd_ctl_elem_info_set_interface(
      obj,
      val,
    );
  }

  late final _snd_ctl_elem_info_set_interfacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_ctl_elem_info_t>,
              ffi.Int32)>>('snd_ctl_elem_info_set_interface');
  late final _snd_ctl_elem_info_set_interface =
      _snd_ctl_elem_info_set_interfacePtr
          .asFunction<void Function(ffi.Pointer<snd_ctl_elem_info_t>, int)>();

  void snd_ctl_elem_info_set_device(
    ffi.Pointer<snd_ctl_elem_info_t> obj,
    int val,
  ) {
    return _snd_ctl_elem_info_set_device(
      obj,
      val,
    );
  }

  late final _snd_ctl_elem_info_set_devicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_ctl_elem_info_t>,
              ffi.UnsignedInt)>>('snd_ctl_elem_info_set_device');
  late final _snd_ctl_elem_info_set_device = _snd_ctl_elem_info_set_devicePtr
      .asFunction<void Function(ffi.Pointer<snd_ctl_elem_info_t>, int)>();

  void snd_ctl_elem_info_set_subdevice(
    ffi.Pointer<snd_ctl_elem_info_t> obj,
    int val,
  ) {
    return _snd_ctl_elem_info_set_subdevice(
      obj,
      val,
    );
  }

  late final _snd_ctl_elem_info_set_subdevicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_ctl_elem_info_t>,
              ffi.UnsignedInt)>>('snd_ctl_elem_info_set_subdevice');
  late final _snd_ctl_elem_info_set_subdevice =
      _snd_ctl_elem_info_set_subdevicePtr
          .asFunction<void Function(ffi.Pointer<snd_ctl_elem_info_t>, int)>();

  void snd_ctl_elem_info_set_name(
    ffi.Pointer<snd_ctl_elem_info_t> obj,
    ffi.Pointer<ffi.Char> val,
  ) {
    return _snd_ctl_elem_info_set_name(
      obj,
      val,
    );
  }

  late final _snd_ctl_elem_info_set_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_ctl_elem_info_t>,
              ffi.Pointer<ffi.Char>)>>('snd_ctl_elem_info_set_name');
  late final _snd_ctl_elem_info_set_name =
      _snd_ctl_elem_info_set_namePtr.asFunction<
          void Function(
              ffi.Pointer<snd_ctl_elem_info_t>, ffi.Pointer<ffi.Char>)>();

  void snd_ctl_elem_info_set_index(
    ffi.Pointer<snd_ctl_elem_info_t> obj,
    int val,
  ) {
    return _snd_ctl_elem_info_set_index(
      obj,
      val,
    );
  }

  late final _snd_ctl_elem_info_set_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_ctl_elem_info_t>,
              ffi.UnsignedInt)>>('snd_ctl_elem_info_set_index');
  late final _snd_ctl_elem_info_set_index = _snd_ctl_elem_info_set_indexPtr
      .asFunction<void Function(ffi.Pointer<snd_ctl_elem_info_t>, int)>();

  void snd_ctl_elem_info_set_read_write(
    ffi.Pointer<snd_ctl_elem_info_t> obj,
    int rval,
    int wval,
  ) {
    return _snd_ctl_elem_info_set_read_write(
      obj,
      rval,
      wval,
    );
  }

  late final _snd_ctl_elem_info_set_read_writePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_ctl_elem_info_t>, ffi.Int,
              ffi.Int)>>('snd_ctl_elem_info_set_read_write');
  late final _snd_ctl_elem_info_set_read_write =
      _snd_ctl_elem_info_set_read_writePtr.asFunction<
          void Function(ffi.Pointer<snd_ctl_elem_info_t>, int, int)>();

  void snd_ctl_elem_info_set_tlv_read_write(
    ffi.Pointer<snd_ctl_elem_info_t> obj,
    int rval,
    int wval,
  ) {
    return _snd_ctl_elem_info_set_tlv_read_write(
      obj,
      rval,
      wval,
    );
  }

  late final _snd_ctl_elem_info_set_tlv_read_writePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_ctl_elem_info_t>, ffi.Int,
              ffi.Int)>>('snd_ctl_elem_info_set_tlv_read_write');
  late final _snd_ctl_elem_info_set_tlv_read_write =
      _snd_ctl_elem_info_set_tlv_read_writePtr.asFunction<
          void Function(ffi.Pointer<snd_ctl_elem_info_t>, int, int)>();

  void snd_ctl_elem_info_set_inactive(
    ffi.Pointer<snd_ctl_elem_info_t> obj,
    int val,
  ) {
    return _snd_ctl_elem_info_set_inactive(
      obj,
      val,
    );
  }

  late final _snd_ctl_elem_info_set_inactivePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_ctl_elem_info_t>,
              ffi.Int)>>('snd_ctl_elem_info_set_inactive');
  late final _snd_ctl_elem_info_set_inactive =
      _snd_ctl_elem_info_set_inactivePtr
          .asFunction<void Function(ffi.Pointer<snd_ctl_elem_info_t>, int)>();

  int snd_ctl_add_integer_elem_set(
    ffi.Pointer<snd_ctl_t> ctl,
    ffi.Pointer<snd_ctl_elem_info_t> info,
    int element_count,
    int member_count,
    int min,
    int max,
    int step,
  ) {
    return _snd_ctl_add_integer_elem_set(
      ctl,
      info,
      element_count,
      member_count,
      min,
      max,
      step,
    );
  }

  late final _snd_ctl_add_integer_elem_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_ctl_t>,
              ffi.Pointer<snd_ctl_elem_info_t>,
              ffi.UnsignedInt,
              ffi.UnsignedInt,
              ffi.Long,
              ffi.Long,
              ffi.Long)>>('snd_ctl_add_integer_elem_set');
  late final _snd_ctl_add_integer_elem_set =
      _snd_ctl_add_integer_elem_setPtr.asFunction<
          int Function(ffi.Pointer<snd_ctl_t>, ffi.Pointer<snd_ctl_elem_info_t>,
              int, int, int, int, int)>();

  int snd_ctl_add_integer64_elem_set(
    ffi.Pointer<snd_ctl_t> ctl,
    ffi.Pointer<snd_ctl_elem_info_t> info,
    int element_count,
    int member_count,
    int min,
    int max,
    int step,
  ) {
    return _snd_ctl_add_integer64_elem_set(
      ctl,
      info,
      element_count,
      member_count,
      min,
      max,
      step,
    );
  }

  late final _snd_ctl_add_integer64_elem_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_ctl_t>,
              ffi.Pointer<snd_ctl_elem_info_t>,
              ffi.UnsignedInt,
              ffi.UnsignedInt,
              ffi.LongLong,
              ffi.LongLong,
              ffi.LongLong)>>('snd_ctl_add_integer64_elem_set');
  late final _snd_ctl_add_integer64_elem_set =
      _snd_ctl_add_integer64_elem_setPtr.asFunction<
          int Function(ffi.Pointer<snd_ctl_t>, ffi.Pointer<snd_ctl_elem_info_t>,
              int, int, int, int, int)>();

  int snd_ctl_add_boolean_elem_set(
    ffi.Pointer<snd_ctl_t> ctl,
    ffi.Pointer<snd_ctl_elem_info_t> info,
    int element_count,
    int member_count,
  ) {
    return _snd_ctl_add_boolean_elem_set(
      ctl,
      info,
      element_count,
      member_count,
    );
  }

  late final _snd_ctl_add_boolean_elem_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_ctl_t>,
              ffi.Pointer<snd_ctl_elem_info_t>,
              ffi.UnsignedInt,
              ffi.UnsignedInt)>>('snd_ctl_add_boolean_elem_set');
  late final _snd_ctl_add_boolean_elem_set =
      _snd_ctl_add_boolean_elem_setPtr.asFunction<
          int Function(ffi.Pointer<snd_ctl_t>, ffi.Pointer<snd_ctl_elem_info_t>,
              int, int)>();

  int snd_ctl_add_enumerated_elem_set(
    ffi.Pointer<snd_ctl_t> ctl,
    ffi.Pointer<snd_ctl_elem_info_t> info,
    int element_count,
    int member_count,
    int items,
    ffi.Pointer<ffi.Pointer<ffi.Char>> labels,
  ) {
    return _snd_ctl_add_enumerated_elem_set(
      ctl,
      info,
      element_count,
      member_count,
      items,
      labels,
    );
  }

  late final _snd_ctl_add_enumerated_elem_setPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<snd_ctl_t>,
                  ffi.Pointer<snd_ctl_elem_info_t>,
                  ffi.UnsignedInt,
                  ffi.UnsignedInt,
                  ffi.UnsignedInt,
                  ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
      'snd_ctl_add_enumerated_elem_set');
  late final _snd_ctl_add_enumerated_elem_set =
      _snd_ctl_add_enumerated_elem_setPtr.asFunction<
          int Function(ffi.Pointer<snd_ctl_t>, ffi.Pointer<snd_ctl_elem_info_t>,
              int, int, int, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int snd_ctl_add_bytes_elem_set(
    ffi.Pointer<snd_ctl_t> ctl,
    ffi.Pointer<snd_ctl_elem_info_t> info,
    int element_count,
    int member_count,
  ) {
    return _snd_ctl_add_bytes_elem_set(
      ctl,
      info,
      element_count,
      member_count,
    );
  }

  late final _snd_ctl_add_bytes_elem_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_ctl_t>,
              ffi.Pointer<snd_ctl_elem_info_t>,
              ffi.UnsignedInt,
              ffi.UnsignedInt)>>('snd_ctl_add_bytes_elem_set');
  late final _snd_ctl_add_bytes_elem_set =
      _snd_ctl_add_bytes_elem_setPtr.asFunction<
          int Function(ffi.Pointer<snd_ctl_t>, ffi.Pointer<snd_ctl_elem_info_t>,
              int, int)>();

  int snd_ctl_elem_add_integer(
    ffi.Pointer<snd_ctl_t> ctl,
    ffi.Pointer<snd_ctl_elem_id_t> id,
    int count,
    int imin,
    int imax,
    int istep,
  ) {
    return _snd_ctl_elem_add_integer(
      ctl,
      id,
      count,
      imin,
      imax,
      istep,
    );
  }

  late final _snd_ctl_elem_add_integerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_ctl_t>,
              ffi.Pointer<snd_ctl_elem_id_t>,
              ffi.UnsignedInt,
              ffi.Long,
              ffi.Long,
              ffi.Long)>>('snd_ctl_elem_add_integer');
  late final _snd_ctl_elem_add_integer =
      _snd_ctl_elem_add_integerPtr.asFunction<
          int Function(ffi.Pointer<snd_ctl_t>, ffi.Pointer<snd_ctl_elem_id_t>,
              int, int, int, int)>();

  int snd_ctl_elem_add_integer64(
    ffi.Pointer<snd_ctl_t> ctl,
    ffi.Pointer<snd_ctl_elem_id_t> id,
    int count,
    int imin,
    int imax,
    int istep,
  ) {
    return _snd_ctl_elem_add_integer64(
      ctl,
      id,
      count,
      imin,
      imax,
      istep,
    );
  }

  late final _snd_ctl_elem_add_integer64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_ctl_t>,
              ffi.Pointer<snd_ctl_elem_id_t>,
              ffi.UnsignedInt,
              ffi.LongLong,
              ffi.LongLong,
              ffi.LongLong)>>('snd_ctl_elem_add_integer64');
  late final _snd_ctl_elem_add_integer64 =
      _snd_ctl_elem_add_integer64Ptr.asFunction<
          int Function(ffi.Pointer<snd_ctl_t>, ffi.Pointer<snd_ctl_elem_id_t>,
              int, int, int, int)>();

  int snd_ctl_elem_add_boolean(
    ffi.Pointer<snd_ctl_t> ctl,
    ffi.Pointer<snd_ctl_elem_id_t> id,
    int count,
  ) {
    return _snd_ctl_elem_add_boolean(
      ctl,
      id,
      count,
    );
  }

  late final _snd_ctl_elem_add_booleanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_ctl_t>,
              ffi.Pointer<snd_ctl_elem_id_t>,
              ffi.UnsignedInt)>>('snd_ctl_elem_add_boolean');
  late final _snd_ctl_elem_add_boolean =
      _snd_ctl_elem_add_booleanPtr.asFunction<
          int Function(
              ffi.Pointer<snd_ctl_t>, ffi.Pointer<snd_ctl_elem_id_t>, int)>();

  int snd_ctl_elem_add_enumerated(
    ffi.Pointer<snd_ctl_t> ctl,
    ffi.Pointer<snd_ctl_elem_id_t> id,
    int count,
    int items,
    ffi.Pointer<ffi.Pointer<ffi.Char>> names,
  ) {
    return _snd_ctl_elem_add_enumerated(
      ctl,
      id,
      count,
      items,
      names,
    );
  }

  late final _snd_ctl_elem_add_enumeratedPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<snd_ctl_t>,
                  ffi.Pointer<snd_ctl_elem_id_t>,
                  ffi.UnsignedInt,
                  ffi.UnsignedInt,
                  ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
      'snd_ctl_elem_add_enumerated');
  late final _snd_ctl_elem_add_enumerated =
      _snd_ctl_elem_add_enumeratedPtr.asFunction<
          int Function(ffi.Pointer<snd_ctl_t>, ffi.Pointer<snd_ctl_elem_id_t>,
              int, int, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int snd_ctl_elem_add_iec958(
    ffi.Pointer<snd_ctl_t> ctl,
    ffi.Pointer<snd_ctl_elem_id_t> id,
  ) {
    return _snd_ctl_elem_add_iec958(
      ctl,
      id,
    );
  }

  late final _snd_ctl_elem_add_iec958Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_ctl_t>,
              ffi.Pointer<snd_ctl_elem_id_t>)>>('snd_ctl_elem_add_iec958');
  late final _snd_ctl_elem_add_iec958 = _snd_ctl_elem_add_iec958Ptr.asFunction<
      int Function(ffi.Pointer<snd_ctl_t>, ffi.Pointer<snd_ctl_elem_id_t>)>();

  int snd_ctl_elem_remove(
    ffi.Pointer<snd_ctl_t> ctl,
    ffi.Pointer<snd_ctl_elem_id_t> id,
  ) {
    return _snd_ctl_elem_remove(
      ctl,
      id,
    );
  }

  late final _snd_ctl_elem_removePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_ctl_t>,
              ffi.Pointer<snd_ctl_elem_id_t>)>>('snd_ctl_elem_remove');
  late final _snd_ctl_elem_remove = _snd_ctl_elem_removePtr.asFunction<
      int Function(ffi.Pointer<snd_ctl_t>, ffi.Pointer<snd_ctl_elem_id_t>)>();

  int snd_ctl_elem_value_sizeof() {
    return _snd_ctl_elem_value_sizeof();
  }

  late final _snd_ctl_elem_value_sizeofPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>(
          'snd_ctl_elem_value_sizeof');
  late final _snd_ctl_elem_value_sizeof =
      _snd_ctl_elem_value_sizeofPtr.asFunction<int Function()>();

  int snd_ctl_elem_value_malloc(
    ffi.Pointer<ffi.Pointer<snd_ctl_elem_value_t>> ptr,
  ) {
    return _snd_ctl_elem_value_malloc(
      ptr,
    );
  }

  late final _snd_ctl_elem_value_mallocPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Pointer<snd_ctl_elem_value_t>>)>>(
      'snd_ctl_elem_value_malloc');
  late final _snd_ctl_elem_value_malloc =
      _snd_ctl_elem_value_mallocPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<snd_ctl_elem_value_t>>)>();

  void snd_ctl_elem_value_free(
    ffi.Pointer<snd_ctl_elem_value_t> obj,
  ) {
    return _snd_ctl_elem_value_free(
      obj,
    );
  }

  late final _snd_ctl_elem_value_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<snd_ctl_elem_value_t>)>>('snd_ctl_elem_value_free');
  late final _snd_ctl_elem_value_free = _snd_ctl_elem_value_freePtr
      .asFunction<void Function(ffi.Pointer<snd_ctl_elem_value_t>)>();

  void snd_ctl_elem_value_clear(
    ffi.Pointer<snd_ctl_elem_value_t> obj,
  ) {
    return _snd_ctl_elem_value_clear(
      obj,
    );
  }

  late final _snd_ctl_elem_value_clearPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<snd_ctl_elem_value_t>)>>('snd_ctl_elem_value_clear');
  late final _snd_ctl_elem_value_clear = _snd_ctl_elem_value_clearPtr
      .asFunction<void Function(ffi.Pointer<snd_ctl_elem_value_t>)>();

  void snd_ctl_elem_value_copy(
    ffi.Pointer<snd_ctl_elem_value_t> dst,
    ffi.Pointer<snd_ctl_elem_value_t> src,
  ) {
    return _snd_ctl_elem_value_copy(
      dst,
      src,
    );
  }

  late final _snd_ctl_elem_value_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_ctl_elem_value_t>,
              ffi.Pointer<snd_ctl_elem_value_t>)>>('snd_ctl_elem_value_copy');
  late final _snd_ctl_elem_value_copy = _snd_ctl_elem_value_copyPtr.asFunction<
      void Function(ffi.Pointer<snd_ctl_elem_value_t>,
          ffi.Pointer<snd_ctl_elem_value_t>)>();

  int snd_ctl_elem_value_compare(
    ffi.Pointer<snd_ctl_elem_value_t> left,
    ffi.Pointer<snd_ctl_elem_value_t> right,
  ) {
    return _snd_ctl_elem_value_compare(
      left,
      right,
    );
  }

  late final _snd_ctl_elem_value_comparePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_ctl_elem_value_t>,
                  ffi.Pointer<snd_ctl_elem_value_t>)>>(
      'snd_ctl_elem_value_compare');
  late final _snd_ctl_elem_value_compare =
      _snd_ctl_elem_value_comparePtr.asFunction<
          int Function(ffi.Pointer<snd_ctl_elem_value_t>,
              ffi.Pointer<snd_ctl_elem_value_t>)>();

  void snd_ctl_elem_value_get_id(
    ffi.Pointer<snd_ctl_elem_value_t> obj,
    ffi.Pointer<snd_ctl_elem_id_t> ptr,
  ) {
    return _snd_ctl_elem_value_get_id(
      obj,
      ptr,
    );
  }

  late final _snd_ctl_elem_value_get_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_ctl_elem_value_t>,
              ffi.Pointer<snd_ctl_elem_id_t>)>>('snd_ctl_elem_value_get_id');
  late final _snd_ctl_elem_value_get_id =
      _snd_ctl_elem_value_get_idPtr.asFunction<
          void Function(ffi.Pointer<snd_ctl_elem_value_t>,
              ffi.Pointer<snd_ctl_elem_id_t>)>();

  int snd_ctl_elem_value_get_numid(
    ffi.Pointer<snd_ctl_elem_value_t> obj,
  ) {
    return _snd_ctl_elem_value_get_numid(
      obj,
    );
  }

  late final _snd_ctl_elem_value_get_numidPtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<snd_ctl_elem_value_t>)>>(
      'snd_ctl_elem_value_get_numid');
  late final _snd_ctl_elem_value_get_numid = _snd_ctl_elem_value_get_numidPtr
      .asFunction<int Function(ffi.Pointer<snd_ctl_elem_value_t>)>();

  int snd_ctl_elem_value_get_interface(
    ffi.Pointer<snd_ctl_elem_value_t> obj,
  ) {
    return _snd_ctl_elem_value_get_interface(
      obj,
    );
  }

  late final _snd_ctl_elem_value_get_interfacePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<snd_ctl_elem_value_t>)>>(
      'snd_ctl_elem_value_get_interface');
  late final _snd_ctl_elem_value_get_interface =
      _snd_ctl_elem_value_get_interfacePtr
          .asFunction<int Function(ffi.Pointer<snd_ctl_elem_value_t>)>();

  int snd_ctl_elem_value_get_device(
    ffi.Pointer<snd_ctl_elem_value_t> obj,
  ) {
    return _snd_ctl_elem_value_get_device(
      obj,
    );
  }

  late final _snd_ctl_elem_value_get_devicePtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<snd_ctl_elem_value_t>)>>(
      'snd_ctl_elem_value_get_device');
  late final _snd_ctl_elem_value_get_device = _snd_ctl_elem_value_get_devicePtr
      .asFunction<int Function(ffi.Pointer<snd_ctl_elem_value_t>)>();

  int snd_ctl_elem_value_get_subdevice(
    ffi.Pointer<snd_ctl_elem_value_t> obj,
  ) {
    return _snd_ctl_elem_value_get_subdevice(
      obj,
    );
  }

  late final _snd_ctl_elem_value_get_subdevicePtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<snd_ctl_elem_value_t>)>>(
      'snd_ctl_elem_value_get_subdevice');
  late final _snd_ctl_elem_value_get_subdevice =
      _snd_ctl_elem_value_get_subdevicePtr
          .asFunction<int Function(ffi.Pointer<snd_ctl_elem_value_t>)>();

  ffi.Pointer<ffi.Char> snd_ctl_elem_value_get_name(
    ffi.Pointer<snd_ctl_elem_value_t> obj,
  ) {
    return _snd_ctl_elem_value_get_name(
      obj,
    );
  }

  late final _snd_ctl_elem_value_get_namePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<snd_ctl_elem_value_t>)>>(
      'snd_ctl_elem_value_get_name');
  late final _snd_ctl_elem_value_get_name =
      _snd_ctl_elem_value_get_namePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<snd_ctl_elem_value_t>)>();

  int snd_ctl_elem_value_get_index(
    ffi.Pointer<snd_ctl_elem_value_t> obj,
  ) {
    return _snd_ctl_elem_value_get_index(
      obj,
    );
  }

  late final _snd_ctl_elem_value_get_indexPtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<snd_ctl_elem_value_t>)>>(
      'snd_ctl_elem_value_get_index');
  late final _snd_ctl_elem_value_get_index = _snd_ctl_elem_value_get_indexPtr
      .asFunction<int Function(ffi.Pointer<snd_ctl_elem_value_t>)>();

  void snd_ctl_elem_value_set_id(
    ffi.Pointer<snd_ctl_elem_value_t> obj,
    ffi.Pointer<snd_ctl_elem_id_t> ptr,
  ) {
    return _snd_ctl_elem_value_set_id(
      obj,
      ptr,
    );
  }

  late final _snd_ctl_elem_value_set_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_ctl_elem_value_t>,
              ffi.Pointer<snd_ctl_elem_id_t>)>>('snd_ctl_elem_value_set_id');
  late final _snd_ctl_elem_value_set_id =
      _snd_ctl_elem_value_set_idPtr.asFunction<
          void Function(ffi.Pointer<snd_ctl_elem_value_t>,
              ffi.Pointer<snd_ctl_elem_id_t>)>();

  void snd_ctl_elem_value_set_numid(
    ffi.Pointer<snd_ctl_elem_value_t> obj,
    int val,
  ) {
    return _snd_ctl_elem_value_set_numid(
      obj,
      val,
    );
  }

  late final _snd_ctl_elem_value_set_numidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_ctl_elem_value_t>,
              ffi.UnsignedInt)>>('snd_ctl_elem_value_set_numid');
  late final _snd_ctl_elem_value_set_numid = _snd_ctl_elem_value_set_numidPtr
      .asFunction<void Function(ffi.Pointer<snd_ctl_elem_value_t>, int)>();

  void snd_ctl_elem_value_set_interface(
    ffi.Pointer<snd_ctl_elem_value_t> obj,
    int val,
  ) {
    return _snd_ctl_elem_value_set_interface(
      obj,
      val,
    );
  }

  late final _snd_ctl_elem_value_set_interfacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_ctl_elem_value_t>,
              ffi.Int32)>>('snd_ctl_elem_value_set_interface');
  late final _snd_ctl_elem_value_set_interface =
      _snd_ctl_elem_value_set_interfacePtr
          .asFunction<void Function(ffi.Pointer<snd_ctl_elem_value_t>, int)>();

  void snd_ctl_elem_value_set_device(
    ffi.Pointer<snd_ctl_elem_value_t> obj,
    int val,
  ) {
    return _snd_ctl_elem_value_set_device(
      obj,
      val,
    );
  }

  late final _snd_ctl_elem_value_set_devicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_ctl_elem_value_t>,
              ffi.UnsignedInt)>>('snd_ctl_elem_value_set_device');
  late final _snd_ctl_elem_value_set_device = _snd_ctl_elem_value_set_devicePtr
      .asFunction<void Function(ffi.Pointer<snd_ctl_elem_value_t>, int)>();

  void snd_ctl_elem_value_set_subdevice(
    ffi.Pointer<snd_ctl_elem_value_t> obj,
    int val,
  ) {
    return _snd_ctl_elem_value_set_subdevice(
      obj,
      val,
    );
  }

  late final _snd_ctl_elem_value_set_subdevicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_ctl_elem_value_t>,
              ffi.UnsignedInt)>>('snd_ctl_elem_value_set_subdevice');
  late final _snd_ctl_elem_value_set_subdevice =
      _snd_ctl_elem_value_set_subdevicePtr
          .asFunction<void Function(ffi.Pointer<snd_ctl_elem_value_t>, int)>();

  void snd_ctl_elem_value_set_name(
    ffi.Pointer<snd_ctl_elem_value_t> obj,
    ffi.Pointer<ffi.Char> val,
  ) {
    return _snd_ctl_elem_value_set_name(
      obj,
      val,
    );
  }

  late final _snd_ctl_elem_value_set_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_ctl_elem_value_t>,
              ffi.Pointer<ffi.Char>)>>('snd_ctl_elem_value_set_name');
  late final _snd_ctl_elem_value_set_name =
      _snd_ctl_elem_value_set_namePtr.asFunction<
          void Function(
              ffi.Pointer<snd_ctl_elem_value_t>, ffi.Pointer<ffi.Char>)>();

  void snd_ctl_elem_value_set_index(
    ffi.Pointer<snd_ctl_elem_value_t> obj,
    int val,
  ) {
    return _snd_ctl_elem_value_set_index(
      obj,
      val,
    );
  }

  late final _snd_ctl_elem_value_set_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_ctl_elem_value_t>,
              ffi.UnsignedInt)>>('snd_ctl_elem_value_set_index');
  late final _snd_ctl_elem_value_set_index = _snd_ctl_elem_value_set_indexPtr
      .asFunction<void Function(ffi.Pointer<snd_ctl_elem_value_t>, int)>();

  int snd_ctl_elem_value_get_boolean(
    ffi.Pointer<snd_ctl_elem_value_t> obj,
    int idx,
  ) {
    return _snd_ctl_elem_value_get_boolean(
      obj,
      idx,
    );
  }

  late final _snd_ctl_elem_value_get_booleanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_ctl_elem_value_t>,
              ffi.UnsignedInt)>>('snd_ctl_elem_value_get_boolean');
  late final _snd_ctl_elem_value_get_boolean =
      _snd_ctl_elem_value_get_booleanPtr
          .asFunction<int Function(ffi.Pointer<snd_ctl_elem_value_t>, int)>();

  int snd_ctl_elem_value_get_integer(
    ffi.Pointer<snd_ctl_elem_value_t> obj,
    int idx,
  ) {
    return _snd_ctl_elem_value_get_integer(
      obj,
      idx,
    );
  }

  late final _snd_ctl_elem_value_get_integerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<snd_ctl_elem_value_t>,
              ffi.UnsignedInt)>>('snd_ctl_elem_value_get_integer');
  late final _snd_ctl_elem_value_get_integer =
      _snd_ctl_elem_value_get_integerPtr
          .asFunction<int Function(ffi.Pointer<snd_ctl_elem_value_t>, int)>();

  int snd_ctl_elem_value_get_integer64(
    ffi.Pointer<snd_ctl_elem_value_t> obj,
    int idx,
  ) {
    return _snd_ctl_elem_value_get_integer64(
      obj,
      idx,
    );
  }

  late final _snd_ctl_elem_value_get_integer64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<snd_ctl_elem_value_t>,
              ffi.UnsignedInt)>>('snd_ctl_elem_value_get_integer64');
  late final _snd_ctl_elem_value_get_integer64 =
      _snd_ctl_elem_value_get_integer64Ptr
          .asFunction<int Function(ffi.Pointer<snd_ctl_elem_value_t>, int)>();

  int snd_ctl_elem_value_get_enumerated(
    ffi.Pointer<snd_ctl_elem_value_t> obj,
    int idx,
  ) {
    return _snd_ctl_elem_value_get_enumerated(
      obj,
      idx,
    );
  }

  late final _snd_ctl_elem_value_get_enumeratedPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<snd_ctl_elem_value_t>,
              ffi.UnsignedInt)>>('snd_ctl_elem_value_get_enumerated');
  late final _snd_ctl_elem_value_get_enumerated =
      _snd_ctl_elem_value_get_enumeratedPtr
          .asFunction<int Function(ffi.Pointer<snd_ctl_elem_value_t>, int)>();

  int snd_ctl_elem_value_get_byte(
    ffi.Pointer<snd_ctl_elem_value_t> obj,
    int idx,
  ) {
    return _snd_ctl_elem_value_get_byte(
      obj,
      idx,
    );
  }

  late final _snd_ctl_elem_value_get_bytePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedChar Function(ffi.Pointer<snd_ctl_elem_value_t>,
              ffi.UnsignedInt)>>('snd_ctl_elem_value_get_byte');
  late final _snd_ctl_elem_value_get_byte = _snd_ctl_elem_value_get_bytePtr
      .asFunction<int Function(ffi.Pointer<snd_ctl_elem_value_t>, int)>();

  void snd_ctl_elem_value_set_boolean(
    ffi.Pointer<snd_ctl_elem_value_t> obj,
    int idx,
    int val,
  ) {
    return _snd_ctl_elem_value_set_boolean(
      obj,
      idx,
      val,
    );
  }

  late final _snd_ctl_elem_value_set_booleanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_ctl_elem_value_t>, ffi.UnsignedInt,
              ffi.Long)>>('snd_ctl_elem_value_set_boolean');
  late final _snd_ctl_elem_value_set_boolean =
      _snd_ctl_elem_value_set_booleanPtr.asFunction<
          void Function(ffi.Pointer<snd_ctl_elem_value_t>, int, int)>();

  void snd_ctl_elem_value_set_integer(
    ffi.Pointer<snd_ctl_elem_value_t> obj,
    int idx,
    int val,
  ) {
    return _snd_ctl_elem_value_set_integer(
      obj,
      idx,
      val,
    );
  }

  late final _snd_ctl_elem_value_set_integerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_ctl_elem_value_t>, ffi.UnsignedInt,
              ffi.Long)>>('snd_ctl_elem_value_set_integer');
  late final _snd_ctl_elem_value_set_integer =
      _snd_ctl_elem_value_set_integerPtr.asFunction<
          void Function(ffi.Pointer<snd_ctl_elem_value_t>, int, int)>();

  void snd_ctl_elem_value_set_integer64(
    ffi.Pointer<snd_ctl_elem_value_t> obj,
    int idx,
    int val,
  ) {
    return _snd_ctl_elem_value_set_integer64(
      obj,
      idx,
      val,
    );
  }

  late final _snd_ctl_elem_value_set_integer64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_ctl_elem_value_t>, ffi.UnsignedInt,
              ffi.LongLong)>>('snd_ctl_elem_value_set_integer64');
  late final _snd_ctl_elem_value_set_integer64 =
      _snd_ctl_elem_value_set_integer64Ptr.asFunction<
          void Function(ffi.Pointer<snd_ctl_elem_value_t>, int, int)>();

  void snd_ctl_elem_value_set_enumerated(
    ffi.Pointer<snd_ctl_elem_value_t> obj,
    int idx,
    int val,
  ) {
    return _snd_ctl_elem_value_set_enumerated(
      obj,
      idx,
      val,
    );
  }

  late final _snd_ctl_elem_value_set_enumeratedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_ctl_elem_value_t>, ffi.UnsignedInt,
              ffi.UnsignedInt)>>('snd_ctl_elem_value_set_enumerated');
  late final _snd_ctl_elem_value_set_enumerated =
      _snd_ctl_elem_value_set_enumeratedPtr.asFunction<
          void Function(ffi.Pointer<snd_ctl_elem_value_t>, int, int)>();

  void snd_ctl_elem_value_set_byte(
    ffi.Pointer<snd_ctl_elem_value_t> obj,
    int idx,
    int val,
  ) {
    return _snd_ctl_elem_value_set_byte(
      obj,
      idx,
      val,
    );
  }

  late final _snd_ctl_elem_value_set_bytePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_ctl_elem_value_t>, ffi.UnsignedInt,
              ffi.UnsignedChar)>>('snd_ctl_elem_value_set_byte');
  late final _snd_ctl_elem_value_set_byte = _snd_ctl_elem_value_set_bytePtr
      .asFunction<void Function(ffi.Pointer<snd_ctl_elem_value_t>, int, int)>();

  void snd_ctl_elem_set_bytes(
    ffi.Pointer<snd_ctl_elem_value_t> obj,
    ffi.Pointer<ffi.Void> data,
    int size,
  ) {
    return _snd_ctl_elem_set_bytes(
      obj,
      data,
      size,
    );
  }

  late final _snd_ctl_elem_set_bytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_ctl_elem_value_t>,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('snd_ctl_elem_set_bytes');
  late final _snd_ctl_elem_set_bytes = _snd_ctl_elem_set_bytesPtr.asFunction<
      void Function(
          ffi.Pointer<snd_ctl_elem_value_t>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> snd_ctl_elem_value_get_bytes(
    ffi.Pointer<snd_ctl_elem_value_t> obj,
  ) {
    return _snd_ctl_elem_value_get_bytes(
      obj,
    );
  }

  late final _snd_ctl_elem_value_get_bytesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<snd_ctl_elem_value_t>)>>(
      'snd_ctl_elem_value_get_bytes');
  late final _snd_ctl_elem_value_get_bytes =
      _snd_ctl_elem_value_get_bytesPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<snd_ctl_elem_value_t>)>();

  void snd_ctl_elem_value_get_iec958(
    ffi.Pointer<snd_ctl_elem_value_t> obj,
    ffi.Pointer<snd_aes_iec958_t> ptr,
  ) {
    return _snd_ctl_elem_value_get_iec958(
      obj,
      ptr,
    );
  }

  late final _snd_ctl_elem_value_get_iec958Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_ctl_elem_value_t>,
              ffi.Pointer<snd_aes_iec958_t>)>>('snd_ctl_elem_value_get_iec958');
  late final _snd_ctl_elem_value_get_iec958 =
      _snd_ctl_elem_value_get_iec958Ptr.asFunction<
          void Function(ffi.Pointer<snd_ctl_elem_value_t>,
              ffi.Pointer<snd_aes_iec958_t>)>();

  void snd_ctl_elem_value_set_iec958(
    ffi.Pointer<snd_ctl_elem_value_t> obj,
    ffi.Pointer<snd_aes_iec958_t> ptr,
  ) {
    return _snd_ctl_elem_value_set_iec958(
      obj,
      ptr,
    );
  }

  late final _snd_ctl_elem_value_set_iec958Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_ctl_elem_value_t>,
              ffi.Pointer<snd_aes_iec958_t>)>>('snd_ctl_elem_value_set_iec958');
  late final _snd_ctl_elem_value_set_iec958 =
      _snd_ctl_elem_value_set_iec958Ptr.asFunction<
          void Function(ffi.Pointer<snd_ctl_elem_value_t>,
              ffi.Pointer<snd_aes_iec958_t>)>();

  int snd_tlv_parse_dB_info(
    ffi.Pointer<ffi.UnsignedInt> tlv,
    int tlv_size,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedInt>> db_tlvp,
  ) {
    return _snd_tlv_parse_dB_info(
      tlv,
      tlv_size,
      db_tlvp,
    );
  }

  late final _snd_tlv_parse_dB_infoPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>, ffi.UnsignedInt,
                  ffi.Pointer<ffi.Pointer<ffi.UnsignedInt>>)>>(
      'snd_tlv_parse_dB_info');
  late final _snd_tlv_parse_dB_info = _snd_tlv_parse_dB_infoPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedInt>, int,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedInt>>)>();

  int snd_tlv_get_dB_range(
    ffi.Pointer<ffi.UnsignedInt> tlv,
    int rangemin,
    int rangemax,
    ffi.Pointer<ffi.Long> min,
    ffi.Pointer<ffi.Long> max,
  ) {
    return _snd_tlv_get_dB_range(
      tlv,
      rangemin,
      rangemax,
      min,
      max,
    );
  }

  late final _snd_tlv_get_dB_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Long,
              ffi.Long,
              ffi.Pointer<ffi.Long>,
              ffi.Pointer<ffi.Long>)>>('snd_tlv_get_dB_range');
  late final _snd_tlv_get_dB_range = _snd_tlv_get_dB_rangePtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedInt>, int, int,
          ffi.Pointer<ffi.Long>, ffi.Pointer<ffi.Long>)>();

  int snd_tlv_convert_to_dB(
    ffi.Pointer<ffi.UnsignedInt> tlv,
    int rangemin,
    int rangemax,
    int volume,
    ffi.Pointer<ffi.Long> db_gain,
  ) {
    return _snd_tlv_convert_to_dB(
      tlv,
      rangemin,
      rangemax,
      volume,
      db_gain,
    );
  }

  late final _snd_tlv_convert_to_dBPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Long, ffi.Long,
              ffi.Long, ffi.Pointer<ffi.Long>)>>('snd_tlv_convert_to_dB');
  late final _snd_tlv_convert_to_dB = _snd_tlv_convert_to_dBPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedInt>, int, int, int,
          ffi.Pointer<ffi.Long>)>();

  int snd_tlv_convert_from_dB(
    ffi.Pointer<ffi.UnsignedInt> tlv,
    int rangemin,
    int rangemax,
    int db_gain,
    ffi.Pointer<ffi.Long> value,
    int xdir,
  ) {
    return _snd_tlv_convert_from_dB(
      tlv,
      rangemin,
      rangemax,
      db_gain,
      value,
      xdir,
    );
  }

  late final _snd_tlv_convert_from_dBPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Long,
              ffi.Long,
              ffi.Long,
              ffi.Pointer<ffi.Long>,
              ffi.Int)>>('snd_tlv_convert_from_dB');
  late final _snd_tlv_convert_from_dB = _snd_tlv_convert_from_dBPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedInt>, int, int, int,
          ffi.Pointer<ffi.Long>, int)>();

  int snd_ctl_get_dB_range(
    ffi.Pointer<snd_ctl_t> ctl,
    ffi.Pointer<snd_ctl_elem_id_t> id,
    ffi.Pointer<ffi.Long> min,
    ffi.Pointer<ffi.Long> max,
  ) {
    return _snd_ctl_get_dB_range(
      ctl,
      id,
      min,
      max,
    );
  }

  late final _snd_ctl_get_dB_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_ctl_t>,
              ffi.Pointer<snd_ctl_elem_id_t>,
              ffi.Pointer<ffi.Long>,
              ffi.Pointer<ffi.Long>)>>('snd_ctl_get_dB_range');
  late final _snd_ctl_get_dB_range = _snd_ctl_get_dB_rangePtr.asFunction<
      int Function(ffi.Pointer<snd_ctl_t>, ffi.Pointer<snd_ctl_elem_id_t>,
          ffi.Pointer<ffi.Long>, ffi.Pointer<ffi.Long>)>();

  int snd_ctl_convert_to_dB(
    ffi.Pointer<snd_ctl_t> ctl,
    ffi.Pointer<snd_ctl_elem_id_t> id,
    int volume,
    ffi.Pointer<ffi.Long> db_gain,
  ) {
    return _snd_ctl_convert_to_dB(
      ctl,
      id,
      volume,
      db_gain,
    );
  }

  late final _snd_ctl_convert_to_dBPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_ctl_t>,
              ffi.Pointer<snd_ctl_elem_id_t>,
              ffi.Long,
              ffi.Pointer<ffi.Long>)>>('snd_ctl_convert_to_dB');
  late final _snd_ctl_convert_to_dB = _snd_ctl_convert_to_dBPtr.asFunction<
      int Function(ffi.Pointer<snd_ctl_t>, ffi.Pointer<snd_ctl_elem_id_t>, int,
          ffi.Pointer<ffi.Long>)>();

  int snd_ctl_convert_from_dB(
    ffi.Pointer<snd_ctl_t> ctl,
    ffi.Pointer<snd_ctl_elem_id_t> id,
    int db_gain,
    ffi.Pointer<ffi.Long> value,
    int xdir,
  ) {
    return _snd_ctl_convert_from_dB(
      ctl,
      id,
      db_gain,
      value,
      xdir,
    );
  }

  late final _snd_ctl_convert_from_dBPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_ctl_t>,
              ffi.Pointer<snd_ctl_elem_id_t>,
              ffi.Long,
              ffi.Pointer<ffi.Long>,
              ffi.Int)>>('snd_ctl_convert_from_dB');
  late final _snd_ctl_convert_from_dB = _snd_ctl_convert_from_dBPtr.asFunction<
      int Function(ffi.Pointer<snd_ctl_t>, ffi.Pointer<snd_ctl_elem_id_t>, int,
          ffi.Pointer<ffi.Long>, int)>();

  int snd_hctl_compare_fast(
    ffi.Pointer<snd_hctl_elem_t> c1,
    ffi.Pointer<snd_hctl_elem_t> c2,
  ) {
    return _snd_hctl_compare_fast(
      c1,
      c2,
    );
  }

  late final _snd_hctl_compare_fastPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_hctl_elem_t>,
              ffi.Pointer<snd_hctl_elem_t>)>>('snd_hctl_compare_fast');
  late final _snd_hctl_compare_fast = _snd_hctl_compare_fastPtr.asFunction<
      int Function(
          ffi.Pointer<snd_hctl_elem_t>, ffi.Pointer<snd_hctl_elem_t>)>();

  int snd_hctl_open(
    ffi.Pointer<ffi.Pointer<snd_hctl_t>> hctl,
    ffi.Pointer<ffi.Char> name,
    int mode,
  ) {
    return _snd_hctl_open(
      hctl,
      name,
      mode,
    );
  }

  late final _snd_hctl_openPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<snd_hctl_t>>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('snd_hctl_open');
  late final _snd_hctl_open = _snd_hctl_openPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<snd_hctl_t>>, ffi.Pointer<ffi.Char>, int)>();

  int snd_hctl_open_ctl(
    ffi.Pointer<ffi.Pointer<snd_hctl_t>> hctlp,
    ffi.Pointer<snd_ctl_t> ctl,
  ) {
    return _snd_hctl_open_ctl(
      hctlp,
      ctl,
    );
  }

  late final _snd_hctl_open_ctlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<snd_hctl_t>>,
              ffi.Pointer<snd_ctl_t>)>>('snd_hctl_open_ctl');
  late final _snd_hctl_open_ctl = _snd_hctl_open_ctlPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<snd_hctl_t>>, ffi.Pointer<snd_ctl_t>)>();

  int snd_hctl_close(
    ffi.Pointer<snd_hctl_t> hctl,
  ) {
    return _snd_hctl_close(
      hctl,
    );
  }

  late final _snd_hctl_closePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_hctl_t>)>>(
          'snd_hctl_close');
  late final _snd_hctl_close =
      _snd_hctl_closePtr.asFunction<int Function(ffi.Pointer<snd_hctl_t>)>();

  int snd_hctl_nonblock(
    ffi.Pointer<snd_hctl_t> hctl,
    int nonblock,
  ) {
    return _snd_hctl_nonblock(
      hctl,
      nonblock,
    );
  }

  late final _snd_hctl_nonblockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_hctl_t>, ffi.Int)>>('snd_hctl_nonblock');
  late final _snd_hctl_nonblock = _snd_hctl_nonblockPtr
      .asFunction<int Function(ffi.Pointer<snd_hctl_t>, int)>();

  int snd_hctl_poll_descriptors_count(
    ffi.Pointer<snd_hctl_t> hctl,
  ) {
    return _snd_hctl_poll_descriptors_count(
      hctl,
    );
  }

  late final _snd_hctl_poll_descriptors_countPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_hctl_t>)>>(
          'snd_hctl_poll_descriptors_count');
  late final _snd_hctl_poll_descriptors_count =
      _snd_hctl_poll_descriptors_countPtr
          .asFunction<int Function(ffi.Pointer<snd_hctl_t>)>();

  int snd_hctl_poll_descriptors(
    ffi.Pointer<snd_hctl_t> hctl,
    ffi.Pointer<pollfd> pfds,
    int space,
  ) {
    return _snd_hctl_poll_descriptors(
      hctl,
      pfds,
      space,
    );
  }

  late final _snd_hctl_poll_descriptorsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_hctl_t>, ffi.Pointer<pollfd>,
              ffi.UnsignedInt)>>('snd_hctl_poll_descriptors');
  late final _snd_hctl_poll_descriptors =
      _snd_hctl_poll_descriptorsPtr.asFunction<
          int Function(ffi.Pointer<snd_hctl_t>, ffi.Pointer<pollfd>, int)>();

  int snd_hctl_poll_descriptors_revents(
    ffi.Pointer<snd_hctl_t> ctl,
    ffi.Pointer<pollfd> pfds,
    int nfds,
    ffi.Pointer<ffi.UnsignedShort> revents,
  ) {
    return _snd_hctl_poll_descriptors_revents(
      ctl,
      pfds,
      nfds,
      revents,
    );
  }

  late final _snd_hctl_poll_descriptors_reventsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_hctl_t>, ffi.Pointer<pollfd>,
                  ffi.UnsignedInt, ffi.Pointer<ffi.UnsignedShort>)>>(
      'snd_hctl_poll_descriptors_revents');
  late final _snd_hctl_poll_descriptors_revents =
      _snd_hctl_poll_descriptors_reventsPtr.asFunction<
          int Function(ffi.Pointer<snd_hctl_t>, ffi.Pointer<pollfd>, int,
              ffi.Pointer<ffi.UnsignedShort>)>();

  int snd_hctl_get_count(
    ffi.Pointer<snd_hctl_t> hctl,
  ) {
    return _snd_hctl_get_count(
      hctl,
    );
  }

  late final _snd_hctl_get_countPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<snd_hctl_t>)>>('snd_hctl_get_count');
  late final _snd_hctl_get_count = _snd_hctl_get_countPtr
      .asFunction<int Function(ffi.Pointer<snd_hctl_t>)>();

  int snd_hctl_set_compare(
    ffi.Pointer<snd_hctl_t> hctl,
    snd_hctl_compare_t hsort,
  ) {
    return _snd_hctl_set_compare(
      hctl,
      hsort,
    );
  }

  late final _snd_hctl_set_comparePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_hctl_t>,
              snd_hctl_compare_t)>>('snd_hctl_set_compare');
  late final _snd_hctl_set_compare = _snd_hctl_set_comparePtr
      .asFunction<int Function(ffi.Pointer<snd_hctl_t>, snd_hctl_compare_t)>();

  ffi.Pointer<snd_hctl_elem_t> snd_hctl_first_elem(
    ffi.Pointer<snd_hctl_t> hctl,
  ) {
    return _snd_hctl_first_elem(
      hctl,
    );
  }

  late final _snd_hctl_first_elemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<snd_hctl_elem_t> Function(
              ffi.Pointer<snd_hctl_t>)>>('snd_hctl_first_elem');
  late final _snd_hctl_first_elem = _snd_hctl_first_elemPtr.asFunction<
      ffi.Pointer<snd_hctl_elem_t> Function(ffi.Pointer<snd_hctl_t>)>();

  ffi.Pointer<snd_hctl_elem_t> snd_hctl_last_elem(
    ffi.Pointer<snd_hctl_t> hctl,
  ) {
    return _snd_hctl_last_elem(
      hctl,
    );
  }

  late final _snd_hctl_last_elemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<snd_hctl_elem_t> Function(
              ffi.Pointer<snd_hctl_t>)>>('snd_hctl_last_elem');
  late final _snd_hctl_last_elem = _snd_hctl_last_elemPtr.asFunction<
      ffi.Pointer<snd_hctl_elem_t> Function(ffi.Pointer<snd_hctl_t>)>();

  ffi.Pointer<snd_hctl_elem_t> snd_hctl_find_elem(
    ffi.Pointer<snd_hctl_t> hctl,
    ffi.Pointer<snd_ctl_elem_id_t> id,
  ) {
    return _snd_hctl_find_elem(
      hctl,
      id,
    );
  }

  late final _snd_hctl_find_elemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<snd_hctl_elem_t> Function(ffi.Pointer<snd_hctl_t>,
              ffi.Pointer<snd_ctl_elem_id_t>)>>('snd_hctl_find_elem');
  late final _snd_hctl_find_elem = _snd_hctl_find_elemPtr.asFunction<
      ffi.Pointer<snd_hctl_elem_t> Function(
          ffi.Pointer<snd_hctl_t>, ffi.Pointer<snd_ctl_elem_id_t>)>();

  void snd_hctl_set_callback(
    ffi.Pointer<snd_hctl_t> hctl,
    snd_hctl_callback_t callback,
  ) {
    return _snd_hctl_set_callback(
      hctl,
      callback,
    );
  }

  late final _snd_hctl_set_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_hctl_t>,
              snd_hctl_callback_t)>>('snd_hctl_set_callback');
  late final _snd_hctl_set_callback = _snd_hctl_set_callbackPtr.asFunction<
      void Function(ffi.Pointer<snd_hctl_t>, snd_hctl_callback_t)>();

  void snd_hctl_set_callback_private(
    ffi.Pointer<snd_hctl_t> hctl,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _snd_hctl_set_callback_private(
      hctl,
      data,
    );
  }

  late final _snd_hctl_set_callback_privatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_hctl_t>,
              ffi.Pointer<ffi.Void>)>>('snd_hctl_set_callback_private');
  late final _snd_hctl_set_callback_private =
      _snd_hctl_set_callback_privatePtr.asFunction<
          void Function(ffi.Pointer<snd_hctl_t>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> snd_hctl_get_callback_private(
    ffi.Pointer<snd_hctl_t> hctl,
  ) {
    return _snd_hctl_get_callback_private(
      hctl,
    );
  }

  late final _snd_hctl_get_callback_privatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<snd_hctl_t>)>>('snd_hctl_get_callback_private');
  late final _snd_hctl_get_callback_private = _snd_hctl_get_callback_privatePtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<snd_hctl_t>)>();

  int snd_hctl_load(
    ffi.Pointer<snd_hctl_t> hctl,
  ) {
    return _snd_hctl_load(
      hctl,
    );
  }

  late final _snd_hctl_loadPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_hctl_t>)>>(
          'snd_hctl_load');
  late final _snd_hctl_load =
      _snd_hctl_loadPtr.asFunction<int Function(ffi.Pointer<snd_hctl_t>)>();

  int snd_hctl_free(
    ffi.Pointer<snd_hctl_t> hctl,
  ) {
    return _snd_hctl_free(
      hctl,
    );
  }

  late final _snd_hctl_freePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_hctl_t>)>>(
          'snd_hctl_free');
  late final _snd_hctl_free =
      _snd_hctl_freePtr.asFunction<int Function(ffi.Pointer<snd_hctl_t>)>();

  int snd_hctl_handle_events(
    ffi.Pointer<snd_hctl_t> hctl,
  ) {
    return _snd_hctl_handle_events(
      hctl,
    );
  }

  late final _snd_hctl_handle_eventsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_hctl_t>)>>(
          'snd_hctl_handle_events');
  late final _snd_hctl_handle_events = _snd_hctl_handle_eventsPtr
      .asFunction<int Function(ffi.Pointer<snd_hctl_t>)>();

  ffi.Pointer<ffi.Char> snd_hctl_name(
    ffi.Pointer<snd_hctl_t> hctl,
  ) {
    return _snd_hctl_name(
      hctl,
    );
  }

  late final _snd_hctl_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<snd_hctl_t>)>>('snd_hctl_name');
  late final _snd_hctl_name = _snd_hctl_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<snd_hctl_t>)>();

  int snd_hctl_wait(
    ffi.Pointer<snd_hctl_t> hctl,
    int timeout,
  ) {
    return _snd_hctl_wait(
      hctl,
      timeout,
    );
  }

  late final _snd_hctl_waitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_hctl_t>, ffi.Int)>>('snd_hctl_wait');
  late final _snd_hctl_wait = _snd_hctl_waitPtr
      .asFunction<int Function(ffi.Pointer<snd_hctl_t>, int)>();

  ffi.Pointer<snd_ctl_t> snd_hctl_ctl(
    ffi.Pointer<snd_hctl_t> hctl,
  ) {
    return _snd_hctl_ctl(
      hctl,
    );
  }

  late final _snd_hctl_ctlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<snd_ctl_t> Function(
              ffi.Pointer<snd_hctl_t>)>>('snd_hctl_ctl');
  late final _snd_hctl_ctl = _snd_hctl_ctlPtr
      .asFunction<ffi.Pointer<snd_ctl_t> Function(ffi.Pointer<snd_hctl_t>)>();

  ffi.Pointer<snd_hctl_elem_t> snd_hctl_elem_next(
    ffi.Pointer<snd_hctl_elem_t> elem,
  ) {
    return _snd_hctl_elem_next(
      elem,
    );
  }

  late final _snd_hctl_elem_nextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<snd_hctl_elem_t> Function(
              ffi.Pointer<snd_hctl_elem_t>)>>('snd_hctl_elem_next');
  late final _snd_hctl_elem_next = _snd_hctl_elem_nextPtr.asFunction<
      ffi.Pointer<snd_hctl_elem_t> Function(ffi.Pointer<snd_hctl_elem_t>)>();

  ffi.Pointer<snd_hctl_elem_t> snd_hctl_elem_prev(
    ffi.Pointer<snd_hctl_elem_t> elem,
  ) {
    return _snd_hctl_elem_prev(
      elem,
    );
  }

  late final _snd_hctl_elem_prevPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<snd_hctl_elem_t> Function(
              ffi.Pointer<snd_hctl_elem_t>)>>('snd_hctl_elem_prev');
  late final _snd_hctl_elem_prev = _snd_hctl_elem_prevPtr.asFunction<
      ffi.Pointer<snd_hctl_elem_t> Function(ffi.Pointer<snd_hctl_elem_t>)>();

  int snd_hctl_elem_info(
    ffi.Pointer<snd_hctl_elem_t> elem,
    ffi.Pointer<snd_ctl_elem_info_t> info,
  ) {
    return _snd_hctl_elem_info(
      elem,
      info,
    );
  }

  late final _snd_hctl_elem_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_hctl_elem_t>,
              ffi.Pointer<snd_ctl_elem_info_t>)>>('snd_hctl_elem_info');
  late final _snd_hctl_elem_info = _snd_hctl_elem_infoPtr.asFunction<
      int Function(
          ffi.Pointer<snd_hctl_elem_t>, ffi.Pointer<snd_ctl_elem_info_t>)>();

  int snd_hctl_elem_read(
    ffi.Pointer<snd_hctl_elem_t> elem,
    ffi.Pointer<snd_ctl_elem_value_t> value,
  ) {
    return _snd_hctl_elem_read(
      elem,
      value,
    );
  }

  late final _snd_hctl_elem_readPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_hctl_elem_t>,
              ffi.Pointer<snd_ctl_elem_value_t>)>>('snd_hctl_elem_read');
  late final _snd_hctl_elem_read = _snd_hctl_elem_readPtr.asFunction<
      int Function(
          ffi.Pointer<snd_hctl_elem_t>, ffi.Pointer<snd_ctl_elem_value_t>)>();

  int snd_hctl_elem_write(
    ffi.Pointer<snd_hctl_elem_t> elem,
    ffi.Pointer<snd_ctl_elem_value_t> value,
  ) {
    return _snd_hctl_elem_write(
      elem,
      value,
    );
  }

  late final _snd_hctl_elem_writePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_hctl_elem_t>,
              ffi.Pointer<snd_ctl_elem_value_t>)>>('snd_hctl_elem_write');
  late final _snd_hctl_elem_write = _snd_hctl_elem_writePtr.asFunction<
      int Function(
          ffi.Pointer<snd_hctl_elem_t>, ffi.Pointer<snd_ctl_elem_value_t>)>();

  int snd_hctl_elem_tlv_read(
    ffi.Pointer<snd_hctl_elem_t> elem,
    ffi.Pointer<ffi.UnsignedInt> tlv,
    int tlv_size,
  ) {
    return _snd_hctl_elem_tlv_read(
      elem,
      tlv,
      tlv_size,
    );
  }

  late final _snd_hctl_elem_tlv_readPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_hctl_elem_t>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.UnsignedInt)>>('snd_hctl_elem_tlv_read');
  late final _snd_hctl_elem_tlv_read = _snd_hctl_elem_tlv_readPtr.asFunction<
      int Function(
          ffi.Pointer<snd_hctl_elem_t>, ffi.Pointer<ffi.UnsignedInt>, int)>();

  int snd_hctl_elem_tlv_write(
    ffi.Pointer<snd_hctl_elem_t> elem,
    ffi.Pointer<ffi.UnsignedInt> tlv,
  ) {
    return _snd_hctl_elem_tlv_write(
      elem,
      tlv,
    );
  }

  late final _snd_hctl_elem_tlv_writePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_hctl_elem_t>,
              ffi.Pointer<ffi.UnsignedInt>)>>('snd_hctl_elem_tlv_write');
  late final _snd_hctl_elem_tlv_write = _snd_hctl_elem_tlv_writePtr.asFunction<
      int Function(
          ffi.Pointer<snd_hctl_elem_t>, ffi.Pointer<ffi.UnsignedInt>)>();

  int snd_hctl_elem_tlv_command(
    ffi.Pointer<snd_hctl_elem_t> elem,
    ffi.Pointer<ffi.UnsignedInt> tlv,
  ) {
    return _snd_hctl_elem_tlv_command(
      elem,
      tlv,
    );
  }

  late final _snd_hctl_elem_tlv_commandPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_hctl_elem_t>,
              ffi.Pointer<ffi.UnsignedInt>)>>('snd_hctl_elem_tlv_command');
  late final _snd_hctl_elem_tlv_command =
      _snd_hctl_elem_tlv_commandPtr.asFunction<
          int Function(
              ffi.Pointer<snd_hctl_elem_t>, ffi.Pointer<ffi.UnsignedInt>)>();

  ffi.Pointer<snd_hctl_t> snd_hctl_elem_get_hctl(
    ffi.Pointer<snd_hctl_elem_t> elem,
  ) {
    return _snd_hctl_elem_get_hctl(
      elem,
    );
  }

  late final _snd_hctl_elem_get_hctlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<snd_hctl_t> Function(
              ffi.Pointer<snd_hctl_elem_t>)>>('snd_hctl_elem_get_hctl');
  late final _snd_hctl_elem_get_hctl = _snd_hctl_elem_get_hctlPtr.asFunction<
      ffi.Pointer<snd_hctl_t> Function(ffi.Pointer<snd_hctl_elem_t>)>();

  void snd_hctl_elem_get_id(
    ffi.Pointer<snd_hctl_elem_t> obj,
    ffi.Pointer<snd_ctl_elem_id_t> ptr,
  ) {
    return _snd_hctl_elem_get_id(
      obj,
      ptr,
    );
  }

  late final _snd_hctl_elem_get_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_hctl_elem_t>,
              ffi.Pointer<snd_ctl_elem_id_t>)>>('snd_hctl_elem_get_id');
  late final _snd_hctl_elem_get_id = _snd_hctl_elem_get_idPtr.asFunction<
      void Function(
          ffi.Pointer<snd_hctl_elem_t>, ffi.Pointer<snd_ctl_elem_id_t>)>();

  int snd_hctl_elem_get_numid(
    ffi.Pointer<snd_hctl_elem_t> obj,
  ) {
    return _snd_hctl_elem_get_numid(
      obj,
    );
  }

  late final _snd_hctl_elem_get_numidPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<snd_hctl_elem_t>)>>('snd_hctl_elem_get_numid');
  late final _snd_hctl_elem_get_numid = _snd_hctl_elem_get_numidPtr
      .asFunction<int Function(ffi.Pointer<snd_hctl_elem_t>)>();

  int snd_hctl_elem_get_interface(
    ffi.Pointer<snd_hctl_elem_t> obj,
  ) {
    return _snd_hctl_elem_get_interface(
      obj,
    );
  }

  late final _snd_hctl_elem_get_interfacePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<snd_hctl_elem_t>)>>(
      'snd_hctl_elem_get_interface');
  late final _snd_hctl_elem_get_interface = _snd_hctl_elem_get_interfacePtr
      .asFunction<int Function(ffi.Pointer<snd_hctl_elem_t>)>();

  int snd_hctl_elem_get_device(
    ffi.Pointer<snd_hctl_elem_t> obj,
  ) {
    return _snd_hctl_elem_get_device(
      obj,
    );
  }

  late final _snd_hctl_elem_get_devicePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<snd_hctl_elem_t>)>>('snd_hctl_elem_get_device');
  late final _snd_hctl_elem_get_device = _snd_hctl_elem_get_devicePtr
      .asFunction<int Function(ffi.Pointer<snd_hctl_elem_t>)>();

  int snd_hctl_elem_get_subdevice(
    ffi.Pointer<snd_hctl_elem_t> obj,
  ) {
    return _snd_hctl_elem_get_subdevice(
      obj,
    );
  }

  late final _snd_hctl_elem_get_subdevicePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<snd_hctl_elem_t>)>>('snd_hctl_elem_get_subdevice');
  late final _snd_hctl_elem_get_subdevice = _snd_hctl_elem_get_subdevicePtr
      .asFunction<int Function(ffi.Pointer<snd_hctl_elem_t>)>();

  ffi.Pointer<ffi.Char> snd_hctl_elem_get_name(
    ffi.Pointer<snd_hctl_elem_t> obj,
  ) {
    return _snd_hctl_elem_get_name(
      obj,
    );
  }

  late final _snd_hctl_elem_get_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<snd_hctl_elem_t>)>>('snd_hctl_elem_get_name');
  late final _snd_hctl_elem_get_name = _snd_hctl_elem_get_namePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<snd_hctl_elem_t>)>();

  int snd_hctl_elem_get_index(
    ffi.Pointer<snd_hctl_elem_t> obj,
  ) {
    return _snd_hctl_elem_get_index(
      obj,
    );
  }

  late final _snd_hctl_elem_get_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<snd_hctl_elem_t>)>>('snd_hctl_elem_get_index');
  late final _snd_hctl_elem_get_index = _snd_hctl_elem_get_indexPtr
      .asFunction<int Function(ffi.Pointer<snd_hctl_elem_t>)>();

  void snd_hctl_elem_set_callback(
    ffi.Pointer<snd_hctl_elem_t> obj,
    snd_hctl_elem_callback_t val,
  ) {
    return _snd_hctl_elem_set_callback(
      obj,
      val,
    );
  }

  late final _snd_hctl_elem_set_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_hctl_elem_t>,
              snd_hctl_elem_callback_t)>>('snd_hctl_elem_set_callback');
  late final _snd_hctl_elem_set_callback =
      _snd_hctl_elem_set_callbackPtr.asFunction<
          void Function(
              ffi.Pointer<snd_hctl_elem_t>, snd_hctl_elem_callback_t)>();

  ffi.Pointer<ffi.Void> snd_hctl_elem_get_callback_private(
    ffi.Pointer<snd_hctl_elem_t> obj,
  ) {
    return _snd_hctl_elem_get_callback_private(
      obj,
    );
  }

  late final _snd_hctl_elem_get_callback_privatePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<snd_hctl_elem_t>)>>(
      'snd_hctl_elem_get_callback_private');
  late final _snd_hctl_elem_get_callback_private =
      _snd_hctl_elem_get_callback_privatePtr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<snd_hctl_elem_t>)>();

  void snd_hctl_elem_set_callback_private(
    ffi.Pointer<snd_hctl_elem_t> obj,
    ffi.Pointer<ffi.Void> val,
  ) {
    return _snd_hctl_elem_set_callback_private(
      obj,
      val,
    );
  }

  late final _snd_hctl_elem_set_callback_privatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_hctl_elem_t>,
              ffi.Pointer<ffi.Void>)>>('snd_hctl_elem_set_callback_private');
  late final _snd_hctl_elem_set_callback_private =
      _snd_hctl_elem_set_callback_privatePtr.asFunction<
          void Function(ffi.Pointer<snd_hctl_elem_t>, ffi.Pointer<ffi.Void>)>();

  int snd_sctl_build(
    ffi.Pointer<ffi.Pointer<snd_sctl_t>> ctl,
    ffi.Pointer<snd_ctl_t> handle,
    ffi.Pointer<snd_config_t> config,
    ffi.Pointer<snd_config_t> private_data,
    int mode,
  ) {
    return _snd_sctl_build(
      ctl,
      handle,
      config,
      private_data,
      mode,
    );
  }

  late final _snd_sctl_buildPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<snd_sctl_t>>,
              ffi.Pointer<snd_ctl_t>,
              ffi.Pointer<snd_config_t>,
              ffi.Pointer<snd_config_t>,
              ffi.Int)>>('snd_sctl_build');
  late final _snd_sctl_build = _snd_sctl_buildPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<snd_sctl_t>>, ffi.Pointer<snd_ctl_t>,
          ffi.Pointer<snd_config_t>, ffi.Pointer<snd_config_t>, int)>();

  int snd_sctl_free(
    ffi.Pointer<snd_sctl_t> handle,
  ) {
    return _snd_sctl_free(
      handle,
    );
  }

  late final _snd_sctl_freePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_sctl_t>)>>(
          'snd_sctl_free');
  late final _snd_sctl_free =
      _snd_sctl_freePtr.asFunction<int Function(ffi.Pointer<snd_sctl_t>)>();

  int snd_sctl_install(
    ffi.Pointer<snd_sctl_t> handle,
  ) {
    return _snd_sctl_install(
      handle,
    );
  }

  late final _snd_sctl_installPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_sctl_t>)>>(
          'snd_sctl_install');
  late final _snd_sctl_install =
      _snd_sctl_installPtr.asFunction<int Function(ffi.Pointer<snd_sctl_t>)>();

  int snd_sctl_remove(
    ffi.Pointer<snd_sctl_t> handle,
  ) {
    return _snd_sctl_remove(
      handle,
    );
  }

  late final _snd_sctl_removePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_sctl_t>)>>(
          'snd_sctl_remove');
  late final _snd_sctl_remove =
      _snd_sctl_removePtr.asFunction<int Function(ffi.Pointer<snd_sctl_t>)>();

  int snd_mixer_open(
    ffi.Pointer<ffi.Pointer<snd_mixer_t>> mixer,
    int mode,
  ) {
    return _snd_mixer_open(
      mixer,
      mode,
    );
  }

  late final _snd_mixer_openPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<snd_mixer_t>>,
              ffi.Int)>>('snd_mixer_open');
  late final _snd_mixer_open = _snd_mixer_openPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<snd_mixer_t>>, int)>();

  int snd_mixer_close(
    ffi.Pointer<snd_mixer_t> mixer,
  ) {
    return _snd_mixer_close(
      mixer,
    );
  }

  late final _snd_mixer_closePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_mixer_t>)>>(
          'snd_mixer_close');
  late final _snd_mixer_close =
      _snd_mixer_closePtr.asFunction<int Function(ffi.Pointer<snd_mixer_t>)>();

  ffi.Pointer<snd_mixer_elem_t> snd_mixer_first_elem(
    ffi.Pointer<snd_mixer_t> mixer,
  ) {
    return _snd_mixer_first_elem(
      mixer,
    );
  }

  late final _snd_mixer_first_elemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<snd_mixer_elem_t> Function(
              ffi.Pointer<snd_mixer_t>)>>('snd_mixer_first_elem');
  late final _snd_mixer_first_elem = _snd_mixer_first_elemPtr.asFunction<
      ffi.Pointer<snd_mixer_elem_t> Function(ffi.Pointer<snd_mixer_t>)>();

  ffi.Pointer<snd_mixer_elem_t> snd_mixer_last_elem(
    ffi.Pointer<snd_mixer_t> mixer,
  ) {
    return _snd_mixer_last_elem(
      mixer,
    );
  }

  late final _snd_mixer_last_elemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<snd_mixer_elem_t> Function(
              ffi.Pointer<snd_mixer_t>)>>('snd_mixer_last_elem');
  late final _snd_mixer_last_elem = _snd_mixer_last_elemPtr.asFunction<
      ffi.Pointer<snd_mixer_elem_t> Function(ffi.Pointer<snd_mixer_t>)>();

  int snd_mixer_handle_events(
    ffi.Pointer<snd_mixer_t> mixer,
  ) {
    return _snd_mixer_handle_events(
      mixer,
    );
  }

  late final _snd_mixer_handle_eventsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_mixer_t>)>>(
          'snd_mixer_handle_events');
  late final _snd_mixer_handle_events = _snd_mixer_handle_eventsPtr
      .asFunction<int Function(ffi.Pointer<snd_mixer_t>)>();

  int snd_mixer_attach(
    ffi.Pointer<snd_mixer_t> mixer,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _snd_mixer_attach(
      mixer,
      name,
    );
  }

  late final _snd_mixer_attachPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_mixer_t>,
              ffi.Pointer<ffi.Char>)>>('snd_mixer_attach');
  late final _snd_mixer_attach = _snd_mixer_attachPtr.asFunction<
      int Function(ffi.Pointer<snd_mixer_t>, ffi.Pointer<ffi.Char>)>();

  int snd_mixer_attach_hctl(
    ffi.Pointer<snd_mixer_t> mixer,
    ffi.Pointer<snd_hctl_t> hctl,
  ) {
    return _snd_mixer_attach_hctl(
      mixer,
      hctl,
    );
  }

  late final _snd_mixer_attach_hctlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_mixer_t>,
              ffi.Pointer<snd_hctl_t>)>>('snd_mixer_attach_hctl');
  late final _snd_mixer_attach_hctl = _snd_mixer_attach_hctlPtr.asFunction<
      int Function(ffi.Pointer<snd_mixer_t>, ffi.Pointer<snd_hctl_t>)>();

  int snd_mixer_detach(
    ffi.Pointer<snd_mixer_t> mixer,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _snd_mixer_detach(
      mixer,
      name,
    );
  }

  late final _snd_mixer_detachPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_mixer_t>,
              ffi.Pointer<ffi.Char>)>>('snd_mixer_detach');
  late final _snd_mixer_detach = _snd_mixer_detachPtr.asFunction<
      int Function(ffi.Pointer<snd_mixer_t>, ffi.Pointer<ffi.Char>)>();

  int snd_mixer_detach_hctl(
    ffi.Pointer<snd_mixer_t> mixer,
    ffi.Pointer<snd_hctl_t> hctl,
  ) {
    return _snd_mixer_detach_hctl(
      mixer,
      hctl,
    );
  }

  late final _snd_mixer_detach_hctlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_mixer_t>,
              ffi.Pointer<snd_hctl_t>)>>('snd_mixer_detach_hctl');
  late final _snd_mixer_detach_hctl = _snd_mixer_detach_hctlPtr.asFunction<
      int Function(ffi.Pointer<snd_mixer_t>, ffi.Pointer<snd_hctl_t>)>();

  int snd_mixer_get_hctl(
    ffi.Pointer<snd_mixer_t> mixer,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Pointer<snd_hctl_t>> hctl,
  ) {
    return _snd_mixer_get_hctl(
      mixer,
      name,
      hctl,
    );
  }

  late final _snd_mixer_get_hctlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_mixer_t>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<snd_hctl_t>>)>>('snd_mixer_get_hctl');
  late final _snd_mixer_get_hctl = _snd_mixer_get_hctlPtr.asFunction<
      int Function(ffi.Pointer<snd_mixer_t>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<snd_hctl_t>>)>();

  int snd_mixer_poll_descriptors_count(
    ffi.Pointer<snd_mixer_t> mixer,
  ) {
    return _snd_mixer_poll_descriptors_count(
      mixer,
    );
  }

  late final _snd_mixer_poll_descriptors_countPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_mixer_t>)>>(
          'snd_mixer_poll_descriptors_count');
  late final _snd_mixer_poll_descriptors_count =
      _snd_mixer_poll_descriptors_countPtr
          .asFunction<int Function(ffi.Pointer<snd_mixer_t>)>();

  int snd_mixer_poll_descriptors(
    ffi.Pointer<snd_mixer_t> mixer,
    ffi.Pointer<pollfd> pfds,
    int space,
  ) {
    return _snd_mixer_poll_descriptors(
      mixer,
      pfds,
      space,
    );
  }

  late final _snd_mixer_poll_descriptorsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_mixer_t>, ffi.Pointer<pollfd>,
              ffi.UnsignedInt)>>('snd_mixer_poll_descriptors');
  late final _snd_mixer_poll_descriptors =
      _snd_mixer_poll_descriptorsPtr.asFunction<
          int Function(ffi.Pointer<snd_mixer_t>, ffi.Pointer<pollfd>, int)>();

  int snd_mixer_poll_descriptors_revents(
    ffi.Pointer<snd_mixer_t> mixer,
    ffi.Pointer<pollfd> pfds,
    int nfds,
    ffi.Pointer<ffi.UnsignedShort> revents,
  ) {
    return _snd_mixer_poll_descriptors_revents(
      mixer,
      pfds,
      nfds,
      revents,
    );
  }

  late final _snd_mixer_poll_descriptors_reventsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_mixer_t>, ffi.Pointer<pollfd>,
                  ffi.UnsignedInt, ffi.Pointer<ffi.UnsignedShort>)>>(
      'snd_mixer_poll_descriptors_revents');
  late final _snd_mixer_poll_descriptors_revents =
      _snd_mixer_poll_descriptors_reventsPtr.asFunction<
          int Function(ffi.Pointer<snd_mixer_t>, ffi.Pointer<pollfd>, int,
              ffi.Pointer<ffi.UnsignedShort>)>();

  int snd_mixer_load(
    ffi.Pointer<snd_mixer_t> mixer,
  ) {
    return _snd_mixer_load(
      mixer,
    );
  }

  late final _snd_mixer_loadPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_mixer_t>)>>(
          'snd_mixer_load');
  late final _snd_mixer_load =
      _snd_mixer_loadPtr.asFunction<int Function(ffi.Pointer<snd_mixer_t>)>();

  void snd_mixer_free(
    ffi.Pointer<snd_mixer_t> mixer,
  ) {
    return _snd_mixer_free(
      mixer,
    );
  }

  late final _snd_mixer_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<snd_mixer_t>)>>(
          'snd_mixer_free');
  late final _snd_mixer_free =
      _snd_mixer_freePtr.asFunction<void Function(ffi.Pointer<snd_mixer_t>)>();

  int snd_mixer_wait(
    ffi.Pointer<snd_mixer_t> mixer,
    int timeout,
  ) {
    return _snd_mixer_wait(
      mixer,
      timeout,
    );
  }

  late final _snd_mixer_waitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_mixer_t>, ffi.Int)>>('snd_mixer_wait');
  late final _snd_mixer_wait = _snd_mixer_waitPtr
      .asFunction<int Function(ffi.Pointer<snd_mixer_t>, int)>();

  int snd_mixer_set_compare(
    ffi.Pointer<snd_mixer_t> mixer,
    snd_mixer_compare_t msort,
  ) {
    return _snd_mixer_set_compare(
      mixer,
      msort,
    );
  }

  late final _snd_mixer_set_comparePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_mixer_t>,
              snd_mixer_compare_t)>>('snd_mixer_set_compare');
  late final _snd_mixer_set_compare = _snd_mixer_set_comparePtr.asFunction<
      int Function(ffi.Pointer<snd_mixer_t>, snd_mixer_compare_t)>();

  void snd_mixer_set_callback(
    ffi.Pointer<snd_mixer_t> obj,
    snd_mixer_callback_t val,
  ) {
    return _snd_mixer_set_callback(
      obj,
      val,
    );
  }

  late final _snd_mixer_set_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_mixer_t>,
              snd_mixer_callback_t)>>('snd_mixer_set_callback');
  late final _snd_mixer_set_callback = _snd_mixer_set_callbackPtr.asFunction<
      void Function(ffi.Pointer<snd_mixer_t>, snd_mixer_callback_t)>();

  ffi.Pointer<ffi.Void> snd_mixer_get_callback_private(
    ffi.Pointer<snd_mixer_t> obj,
  ) {
    return _snd_mixer_get_callback_private(
      obj,
    );
  }

  late final _snd_mixer_get_callback_privatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<snd_mixer_t>)>>('snd_mixer_get_callback_private');
  late final _snd_mixer_get_callback_private =
      _snd_mixer_get_callback_privatePtr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<snd_mixer_t>)>();

  void snd_mixer_set_callback_private(
    ffi.Pointer<snd_mixer_t> obj,
    ffi.Pointer<ffi.Void> val,
  ) {
    return _snd_mixer_set_callback_private(
      obj,
      val,
    );
  }

  late final _snd_mixer_set_callback_privatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_mixer_t>,
              ffi.Pointer<ffi.Void>)>>('snd_mixer_set_callback_private');
  late final _snd_mixer_set_callback_private =
      _snd_mixer_set_callback_privatePtr.asFunction<
          void Function(ffi.Pointer<snd_mixer_t>, ffi.Pointer<ffi.Void>)>();

  int snd_mixer_get_count(
    ffi.Pointer<snd_mixer_t> obj,
  ) {
    return _snd_mixer_get_count(
      obj,
    );
  }

  late final _snd_mixer_get_countPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<snd_mixer_t>)>>('snd_mixer_get_count');
  late final _snd_mixer_get_count = _snd_mixer_get_countPtr
      .asFunction<int Function(ffi.Pointer<snd_mixer_t>)>();

  int snd_mixer_class_unregister(
    ffi.Pointer<snd_mixer_class_t> clss,
  ) {
    return _snd_mixer_class_unregister(
      clss,
    );
  }

  late final _snd_mixer_class_unregisterPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_mixer_class_t>)>>(
      'snd_mixer_class_unregister');
  late final _snd_mixer_class_unregister = _snd_mixer_class_unregisterPtr
      .asFunction<int Function(ffi.Pointer<snd_mixer_class_t>)>();

  ffi.Pointer<snd_mixer_elem_t> snd_mixer_elem_next(
    ffi.Pointer<snd_mixer_elem_t> elem,
  ) {
    return _snd_mixer_elem_next(
      elem,
    );
  }

  late final _snd_mixer_elem_nextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<snd_mixer_elem_t> Function(
              ffi.Pointer<snd_mixer_elem_t>)>>('snd_mixer_elem_next');
  late final _snd_mixer_elem_next = _snd_mixer_elem_nextPtr.asFunction<
      ffi.Pointer<snd_mixer_elem_t> Function(ffi.Pointer<snd_mixer_elem_t>)>();

  ffi.Pointer<snd_mixer_elem_t> snd_mixer_elem_prev(
    ffi.Pointer<snd_mixer_elem_t> elem,
  ) {
    return _snd_mixer_elem_prev(
      elem,
    );
  }

  late final _snd_mixer_elem_prevPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<snd_mixer_elem_t> Function(
              ffi.Pointer<snd_mixer_elem_t>)>>('snd_mixer_elem_prev');
  late final _snd_mixer_elem_prev = _snd_mixer_elem_prevPtr.asFunction<
      ffi.Pointer<snd_mixer_elem_t> Function(ffi.Pointer<snd_mixer_elem_t>)>();

  void snd_mixer_elem_set_callback(
    ffi.Pointer<snd_mixer_elem_t> obj,
    snd_mixer_elem_callback_t val,
  ) {
    return _snd_mixer_elem_set_callback(
      obj,
      val,
    );
  }

  late final _snd_mixer_elem_set_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_mixer_elem_t>,
              snd_mixer_elem_callback_t)>>('snd_mixer_elem_set_callback');
  late final _snd_mixer_elem_set_callback =
      _snd_mixer_elem_set_callbackPtr.asFunction<
          void Function(
              ffi.Pointer<snd_mixer_elem_t>, snd_mixer_elem_callback_t)>();

  ffi.Pointer<ffi.Void> snd_mixer_elem_get_callback_private(
    ffi.Pointer<snd_mixer_elem_t> obj,
  ) {
    return _snd_mixer_elem_get_callback_private(
      obj,
    );
  }

  late final _snd_mixer_elem_get_callback_privatePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<snd_mixer_elem_t>)>>(
      'snd_mixer_elem_get_callback_private');
  late final _snd_mixer_elem_get_callback_private =
      _snd_mixer_elem_get_callback_privatePtr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<snd_mixer_elem_t>)>();

  void snd_mixer_elem_set_callback_private(
    ffi.Pointer<snd_mixer_elem_t> obj,
    ffi.Pointer<ffi.Void> val,
  ) {
    return _snd_mixer_elem_set_callback_private(
      obj,
      val,
    );
  }

  late final _snd_mixer_elem_set_callback_privatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_mixer_elem_t>,
              ffi.Pointer<ffi.Void>)>>('snd_mixer_elem_set_callback_private');
  late final _snd_mixer_elem_set_callback_private =
      _snd_mixer_elem_set_callback_privatePtr.asFunction<
          void Function(
              ffi.Pointer<snd_mixer_elem_t>, ffi.Pointer<ffi.Void>)>();

  int snd_mixer_elem_get_type(
    ffi.Pointer<snd_mixer_elem_t> obj,
  ) {
    return _snd_mixer_elem_get_type(
      obj,
    );
  }

  late final _snd_mixer_elem_get_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<snd_mixer_elem_t>)>>('snd_mixer_elem_get_type');
  late final _snd_mixer_elem_get_type = _snd_mixer_elem_get_typePtr
      .asFunction<int Function(ffi.Pointer<snd_mixer_elem_t>)>();

  int snd_mixer_class_register(
    ffi.Pointer<snd_mixer_class_t> class_,
    ffi.Pointer<snd_mixer_t> mixer,
  ) {
    return _snd_mixer_class_register(
      class_,
      mixer,
    );
  }

  late final _snd_mixer_class_registerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_mixer_class_t>,
              ffi.Pointer<snd_mixer_t>)>>('snd_mixer_class_register');
  late final _snd_mixer_class_register =
      _snd_mixer_class_registerPtr.asFunction<
          int Function(
              ffi.Pointer<snd_mixer_class_t>, ffi.Pointer<snd_mixer_t>)>();

  int snd_mixer_elem_new(
    ffi.Pointer<ffi.Pointer<snd_mixer_elem_t>> elem,
    int type,
    int compare_weight,
    ffi.Pointer<ffi.Void> private_data,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<snd_mixer_elem_t> elem)>>
        private_free,
  ) {
    return _snd_mixer_elem_new(
      elem,
      type,
      compare_weight,
      private_data,
      private_free,
    );
  }

  late final _snd_mixer_elem_newPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Pointer<snd_mixer_elem_t>>,
                  ffi.Int32,
                  ffi.Int,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(
                              ffi.Pointer<snd_mixer_elem_t> elem)>>)>>(
      'snd_mixer_elem_new');
  late final _snd_mixer_elem_new = _snd_mixer_elem_newPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<snd_mixer_elem_t>>,
          int,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<snd_mixer_elem_t> elem)>>)>();

  int snd_mixer_elem_add(
    ffi.Pointer<snd_mixer_elem_t> elem,
    ffi.Pointer<snd_mixer_class_t> class_,
  ) {
    return _snd_mixer_elem_add(
      elem,
      class_,
    );
  }

  late final _snd_mixer_elem_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_mixer_elem_t>,
              ffi.Pointer<snd_mixer_class_t>)>>('snd_mixer_elem_add');
  late final _snd_mixer_elem_add = _snd_mixer_elem_addPtr.asFunction<
      int Function(
          ffi.Pointer<snd_mixer_elem_t>, ffi.Pointer<snd_mixer_class_t>)>();

  int snd_mixer_elem_remove(
    ffi.Pointer<snd_mixer_elem_t> elem,
  ) {
    return _snd_mixer_elem_remove(
      elem,
    );
  }

  late final _snd_mixer_elem_removePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_mixer_elem_t>)>>(
      'snd_mixer_elem_remove');
  late final _snd_mixer_elem_remove = _snd_mixer_elem_removePtr
      .asFunction<int Function(ffi.Pointer<snd_mixer_elem_t>)>();

  void snd_mixer_elem_free(
    ffi.Pointer<snd_mixer_elem_t> elem,
  ) {
    return _snd_mixer_elem_free(
      elem,
    );
  }

  late final _snd_mixer_elem_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<snd_mixer_elem_t>)>>(
      'snd_mixer_elem_free');
  late final _snd_mixer_elem_free = _snd_mixer_elem_freePtr
      .asFunction<void Function(ffi.Pointer<snd_mixer_elem_t>)>();

  int snd_mixer_elem_info(
    ffi.Pointer<snd_mixer_elem_t> elem,
  ) {
    return _snd_mixer_elem_info(
      elem,
    );
  }

  late final _snd_mixer_elem_infoPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_mixer_elem_t>)>>(
      'snd_mixer_elem_info');
  late final _snd_mixer_elem_info = _snd_mixer_elem_infoPtr
      .asFunction<int Function(ffi.Pointer<snd_mixer_elem_t>)>();

  int snd_mixer_elem_value(
    ffi.Pointer<snd_mixer_elem_t> elem,
  ) {
    return _snd_mixer_elem_value(
      elem,
    );
  }

  late final _snd_mixer_elem_valuePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_mixer_elem_t>)>>(
      'snd_mixer_elem_value');
  late final _snd_mixer_elem_value = _snd_mixer_elem_valuePtr
      .asFunction<int Function(ffi.Pointer<snd_mixer_elem_t>)>();

  int snd_mixer_elem_attach(
    ffi.Pointer<snd_mixer_elem_t> melem,
    ffi.Pointer<snd_hctl_elem_t> helem,
  ) {
    return _snd_mixer_elem_attach(
      melem,
      helem,
    );
  }

  late final _snd_mixer_elem_attachPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_mixer_elem_t>,
              ffi.Pointer<snd_hctl_elem_t>)>>('snd_mixer_elem_attach');
  late final _snd_mixer_elem_attach = _snd_mixer_elem_attachPtr.asFunction<
      int Function(
          ffi.Pointer<snd_mixer_elem_t>, ffi.Pointer<snd_hctl_elem_t>)>();

  int snd_mixer_elem_detach(
    ffi.Pointer<snd_mixer_elem_t> melem,
    ffi.Pointer<snd_hctl_elem_t> helem,
  ) {
    return _snd_mixer_elem_detach(
      melem,
      helem,
    );
  }

  late final _snd_mixer_elem_detachPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_mixer_elem_t>,
              ffi.Pointer<snd_hctl_elem_t>)>>('snd_mixer_elem_detach');
  late final _snd_mixer_elem_detach = _snd_mixer_elem_detachPtr.asFunction<
      int Function(
          ffi.Pointer<snd_mixer_elem_t>, ffi.Pointer<snd_hctl_elem_t>)>();

  int snd_mixer_elem_empty(
    ffi.Pointer<snd_mixer_elem_t> melem,
  ) {
    return _snd_mixer_elem_empty(
      melem,
    );
  }

  late final _snd_mixer_elem_emptyPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_mixer_elem_t>)>>(
      'snd_mixer_elem_empty');
  late final _snd_mixer_elem_empty = _snd_mixer_elem_emptyPtr
      .asFunction<int Function(ffi.Pointer<snd_mixer_elem_t>)>();

  ffi.Pointer<ffi.Void> snd_mixer_elem_get_private(
    ffi.Pointer<snd_mixer_elem_t> melem,
  ) {
    return _snd_mixer_elem_get_private(
      melem,
    );
  }

  late final _snd_mixer_elem_get_privatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<snd_mixer_elem_t>)>>('snd_mixer_elem_get_private');
  late final _snd_mixer_elem_get_private =
      _snd_mixer_elem_get_privatePtr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<snd_mixer_elem_t>)>();

  int snd_mixer_class_sizeof() {
    return _snd_mixer_class_sizeof();
  }

  late final _snd_mixer_class_sizeofPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>(
          'snd_mixer_class_sizeof');
  late final _snd_mixer_class_sizeof =
      _snd_mixer_class_sizeofPtr.asFunction<int Function()>();

  int snd_mixer_class_malloc(
    ffi.Pointer<ffi.Pointer<snd_mixer_class_t>> ptr,
  ) {
    return _snd_mixer_class_malloc(
      ptr,
    );
  }

  late final _snd_mixer_class_mallocPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Pointer<snd_mixer_class_t>>)>>(
      'snd_mixer_class_malloc');
  late final _snd_mixer_class_malloc = _snd_mixer_class_mallocPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<snd_mixer_class_t>>)>();

  void snd_mixer_class_free(
    ffi.Pointer<snd_mixer_class_t> obj,
  ) {
    return _snd_mixer_class_free(
      obj,
    );
  }

  late final _snd_mixer_class_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<snd_mixer_class_t>)>>('snd_mixer_class_free');
  late final _snd_mixer_class_free = _snd_mixer_class_freePtr
      .asFunction<void Function(ffi.Pointer<snd_mixer_class_t>)>();

  void snd_mixer_class_copy(
    ffi.Pointer<snd_mixer_class_t> dst,
    ffi.Pointer<snd_mixer_class_t> src,
  ) {
    return _snd_mixer_class_copy(
      dst,
      src,
    );
  }

  late final _snd_mixer_class_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_mixer_class_t>,
              ffi.Pointer<snd_mixer_class_t>)>>('snd_mixer_class_copy');
  late final _snd_mixer_class_copy = _snd_mixer_class_copyPtr.asFunction<
      void Function(
          ffi.Pointer<snd_mixer_class_t>, ffi.Pointer<snd_mixer_class_t>)>();

  ffi.Pointer<snd_mixer_t> snd_mixer_class_get_mixer(
    ffi.Pointer<snd_mixer_class_t> class_,
  ) {
    return _snd_mixer_class_get_mixer(
      class_,
    );
  }

  late final _snd_mixer_class_get_mixerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<snd_mixer_t> Function(
              ffi.Pointer<snd_mixer_class_t>)>>('snd_mixer_class_get_mixer');
  late final _snd_mixer_class_get_mixer =
      _snd_mixer_class_get_mixerPtr.asFunction<
          ffi.Pointer<snd_mixer_t> Function(ffi.Pointer<snd_mixer_class_t>)>();

  snd_mixer_event_t snd_mixer_class_get_event(
    ffi.Pointer<snd_mixer_class_t> class_,
  ) {
    return _snd_mixer_class_get_event(
      class_,
    );
  }

  late final _snd_mixer_class_get_eventPtr = _lookup<
      ffi.NativeFunction<
          snd_mixer_event_t Function(
              ffi.Pointer<snd_mixer_class_t>)>>('snd_mixer_class_get_event');
  late final _snd_mixer_class_get_event = _snd_mixer_class_get_eventPtr
      .asFunction<snd_mixer_event_t Function(ffi.Pointer<snd_mixer_class_t>)>();

  ffi.Pointer<ffi.Void> snd_mixer_class_get_private(
    ffi.Pointer<snd_mixer_class_t> class_,
  ) {
    return _snd_mixer_class_get_private(
      class_,
    );
  }

  late final _snd_mixer_class_get_privatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<snd_mixer_class_t>)>>('snd_mixer_class_get_private');
  late final _snd_mixer_class_get_private =
      _snd_mixer_class_get_privatePtr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<snd_mixer_class_t>)>();

  snd_mixer_compare_t snd_mixer_class_get_compare(
    ffi.Pointer<snd_mixer_class_t> class_,
  ) {
    return _snd_mixer_class_get_compare(
      class_,
    );
  }

  late final _snd_mixer_class_get_comparePtr = _lookup<
      ffi.NativeFunction<
          snd_mixer_compare_t Function(
              ffi.Pointer<snd_mixer_class_t>)>>('snd_mixer_class_get_compare');
  late final _snd_mixer_class_get_compare =
      _snd_mixer_class_get_comparePtr.asFunction<
          snd_mixer_compare_t Function(ffi.Pointer<snd_mixer_class_t>)>();

  int snd_mixer_class_set_event(
    ffi.Pointer<snd_mixer_class_t> class_,
    snd_mixer_event_t event,
  ) {
    return _snd_mixer_class_set_event(
      class_,
      event,
    );
  }

  late final _snd_mixer_class_set_eventPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_mixer_class_t>,
              snd_mixer_event_t)>>('snd_mixer_class_set_event');
  late final _snd_mixer_class_set_event =
      _snd_mixer_class_set_eventPtr.asFunction<
          int Function(ffi.Pointer<snd_mixer_class_t>, snd_mixer_event_t)>();

  int snd_mixer_class_set_private(
    ffi.Pointer<snd_mixer_class_t> class_,
    ffi.Pointer<ffi.Void> private_data,
  ) {
    return _snd_mixer_class_set_private(
      class_,
      private_data,
    );
  }

  late final _snd_mixer_class_set_privatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_mixer_class_t>,
              ffi.Pointer<ffi.Void>)>>('snd_mixer_class_set_private');
  late final _snd_mixer_class_set_private =
      _snd_mixer_class_set_privatePtr.asFunction<
          int Function(
              ffi.Pointer<snd_mixer_class_t>, ffi.Pointer<ffi.Void>)>();

  int snd_mixer_class_set_private_free(
    ffi.Pointer<snd_mixer_class_t> class_,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<snd_mixer_class_t>)>>
        private_free,
  ) {
    return _snd_mixer_class_set_private_free(
      class_,
      private_free,
    );
  }

  late final _snd_mixer_class_set_private_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<snd_mixer_class_t>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(
                              ffi.Pointer<snd_mixer_class_t>)>>)>>(
      'snd_mixer_class_set_private_free');
  late final _snd_mixer_class_set_private_free =
      _snd_mixer_class_set_private_freePtr.asFunction<
          int Function(
              ffi.Pointer<snd_mixer_class_t>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<snd_mixer_class_t>)>>)>();

  int snd_mixer_class_set_compare(
    ffi.Pointer<snd_mixer_class_t> class_,
    snd_mixer_compare_t compare,
  ) {
    return _snd_mixer_class_set_compare(
      class_,
      compare,
    );
  }

  late final _snd_mixer_class_set_comparePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_mixer_class_t>,
              snd_mixer_compare_t)>>('snd_mixer_class_set_compare');
  late final _snd_mixer_class_set_compare =
      _snd_mixer_class_set_comparePtr.asFunction<
          int Function(ffi.Pointer<snd_mixer_class_t>, snd_mixer_compare_t)>();

  ffi.Pointer<ffi.Char> snd_mixer_selem_channel_name(
    int channel,
  ) {
    return _snd_mixer_selem_channel_name(
      channel,
    );
  }

  late final _snd_mixer_selem_channel_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'snd_mixer_selem_channel_name');
  late final _snd_mixer_selem_channel_name = _snd_mixer_selem_channel_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int snd_mixer_selem_register(
    ffi.Pointer<snd_mixer_t> mixer,
    ffi.Pointer<snd_mixer_selem_regopt> options,
    ffi.Pointer<ffi.Pointer<snd_mixer_class_t>> classp,
  ) {
    return _snd_mixer_selem_register(
      mixer,
      options,
      classp,
    );
  }

  late final _snd_mixer_selem_registerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<snd_mixer_t>,
                  ffi.Pointer<snd_mixer_selem_regopt>,
                  ffi.Pointer<ffi.Pointer<snd_mixer_class_t>>)>>(
      'snd_mixer_selem_register');
  late final _snd_mixer_selem_register =
      _snd_mixer_selem_registerPtr.asFunction<
          int Function(
              ffi.Pointer<snd_mixer_t>,
              ffi.Pointer<snd_mixer_selem_regopt>,
              ffi.Pointer<ffi.Pointer<snd_mixer_class_t>>)>();

  void snd_mixer_selem_get_id(
    ffi.Pointer<snd_mixer_elem_t> element,
    ffi.Pointer<snd_mixer_selem_id_t> id,
  ) {
    return _snd_mixer_selem_get_id(
      element,
      id,
    );
  }

  late final _snd_mixer_selem_get_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_mixer_elem_t>,
              ffi.Pointer<snd_mixer_selem_id_t>)>>('snd_mixer_selem_get_id');
  late final _snd_mixer_selem_get_id = _snd_mixer_selem_get_idPtr.asFunction<
      void Function(
          ffi.Pointer<snd_mixer_elem_t>, ffi.Pointer<snd_mixer_selem_id_t>)>();

  ffi.Pointer<ffi.Char> snd_mixer_selem_get_name(
    ffi.Pointer<snd_mixer_elem_t> elem,
  ) {
    return _snd_mixer_selem_get_name(
      elem,
    );
  }

  late final _snd_mixer_selem_get_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<snd_mixer_elem_t>)>>('snd_mixer_selem_get_name');
  late final _snd_mixer_selem_get_name =
      _snd_mixer_selem_get_namePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<snd_mixer_elem_t>)>();

  int snd_mixer_selem_get_index(
    ffi.Pointer<snd_mixer_elem_t> elem,
  ) {
    return _snd_mixer_selem_get_index(
      elem,
    );
  }

  late final _snd_mixer_selem_get_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<snd_mixer_elem_t>)>>('snd_mixer_selem_get_index');
  late final _snd_mixer_selem_get_index = _snd_mixer_selem_get_indexPtr
      .asFunction<int Function(ffi.Pointer<snd_mixer_elem_t>)>();

  ffi.Pointer<snd_mixer_elem_t> snd_mixer_find_selem(
    ffi.Pointer<snd_mixer_t> mixer,
    ffi.Pointer<snd_mixer_selem_id_t> id,
  ) {
    return _snd_mixer_find_selem(
      mixer,
      id,
    );
  }

  late final _snd_mixer_find_selemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<snd_mixer_elem_t> Function(ffi.Pointer<snd_mixer_t>,
              ffi.Pointer<snd_mixer_selem_id_t>)>>('snd_mixer_find_selem');
  late final _snd_mixer_find_selem = _snd_mixer_find_selemPtr.asFunction<
      ffi.Pointer<snd_mixer_elem_t> Function(
          ffi.Pointer<snd_mixer_t>, ffi.Pointer<snd_mixer_selem_id_t>)>();

  int snd_mixer_selem_is_active(
    ffi.Pointer<snd_mixer_elem_t> elem,
  ) {
    return _snd_mixer_selem_is_active(
      elem,
    );
  }

  late final _snd_mixer_selem_is_activePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_mixer_elem_t>)>>(
      'snd_mixer_selem_is_active');
  late final _snd_mixer_selem_is_active = _snd_mixer_selem_is_activePtr
      .asFunction<int Function(ffi.Pointer<snd_mixer_elem_t>)>();

  int snd_mixer_selem_is_playback_mono(
    ffi.Pointer<snd_mixer_elem_t> elem,
  ) {
    return _snd_mixer_selem_is_playback_mono(
      elem,
    );
  }

  late final _snd_mixer_selem_is_playback_monoPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_mixer_elem_t>)>>(
      'snd_mixer_selem_is_playback_mono');
  late final _snd_mixer_selem_is_playback_mono =
      _snd_mixer_selem_is_playback_monoPtr
          .asFunction<int Function(ffi.Pointer<snd_mixer_elem_t>)>();

  int snd_mixer_selem_has_playback_channel(
    ffi.Pointer<snd_mixer_elem_t> obj,
    int channel,
  ) {
    return _snd_mixer_selem_has_playback_channel(
      obj,
      channel,
    );
  }

  late final _snd_mixer_selem_has_playback_channelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_mixer_elem_t>,
              ffi.Int32)>>('snd_mixer_selem_has_playback_channel');
  late final _snd_mixer_selem_has_playback_channel =
      _snd_mixer_selem_has_playback_channelPtr
          .asFunction<int Function(ffi.Pointer<snd_mixer_elem_t>, int)>();

  int snd_mixer_selem_is_capture_mono(
    ffi.Pointer<snd_mixer_elem_t> elem,
  ) {
    return _snd_mixer_selem_is_capture_mono(
      elem,
    );
  }

  late final _snd_mixer_selem_is_capture_monoPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_mixer_elem_t>)>>(
      'snd_mixer_selem_is_capture_mono');
  late final _snd_mixer_selem_is_capture_mono =
      _snd_mixer_selem_is_capture_monoPtr
          .asFunction<int Function(ffi.Pointer<snd_mixer_elem_t>)>();

  int snd_mixer_selem_has_capture_channel(
    ffi.Pointer<snd_mixer_elem_t> obj,
    int channel,
  ) {
    return _snd_mixer_selem_has_capture_channel(
      obj,
      channel,
    );
  }

  late final _snd_mixer_selem_has_capture_channelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_mixer_elem_t>,
              ffi.Int32)>>('snd_mixer_selem_has_capture_channel');
  late final _snd_mixer_selem_has_capture_channel =
      _snd_mixer_selem_has_capture_channelPtr
          .asFunction<int Function(ffi.Pointer<snd_mixer_elem_t>, int)>();

  int snd_mixer_selem_get_capture_group(
    ffi.Pointer<snd_mixer_elem_t> elem,
  ) {
    return _snd_mixer_selem_get_capture_group(
      elem,
    );
  }

  late final _snd_mixer_selem_get_capture_groupPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_mixer_elem_t>)>>(
      'snd_mixer_selem_get_capture_group');
  late final _snd_mixer_selem_get_capture_group =
      _snd_mixer_selem_get_capture_groupPtr
          .asFunction<int Function(ffi.Pointer<snd_mixer_elem_t>)>();

  int snd_mixer_selem_has_common_volume(
    ffi.Pointer<snd_mixer_elem_t> elem,
  ) {
    return _snd_mixer_selem_has_common_volume(
      elem,
    );
  }

  late final _snd_mixer_selem_has_common_volumePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_mixer_elem_t>)>>(
      'snd_mixer_selem_has_common_volume');
  late final _snd_mixer_selem_has_common_volume =
      _snd_mixer_selem_has_common_volumePtr
          .asFunction<int Function(ffi.Pointer<snd_mixer_elem_t>)>();

  int snd_mixer_selem_has_playback_volume(
    ffi.Pointer<snd_mixer_elem_t> elem,
  ) {
    return _snd_mixer_selem_has_playback_volume(
      elem,
    );
  }

  late final _snd_mixer_selem_has_playback_volumePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_mixer_elem_t>)>>(
      'snd_mixer_selem_has_playback_volume');
  late final _snd_mixer_selem_has_playback_volume =
      _snd_mixer_selem_has_playback_volumePtr
          .asFunction<int Function(ffi.Pointer<snd_mixer_elem_t>)>();

  int snd_mixer_selem_has_playback_volume_joined(
    ffi.Pointer<snd_mixer_elem_t> elem,
  ) {
    return _snd_mixer_selem_has_playback_volume_joined(
      elem,
    );
  }

  late final _snd_mixer_selem_has_playback_volume_joinedPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_mixer_elem_t>)>>(
      'snd_mixer_selem_has_playback_volume_joined');
  late final _snd_mixer_selem_has_playback_volume_joined =
      _snd_mixer_selem_has_playback_volume_joinedPtr
          .asFunction<int Function(ffi.Pointer<snd_mixer_elem_t>)>();

  int snd_mixer_selem_has_capture_volume(
    ffi.Pointer<snd_mixer_elem_t> elem,
  ) {
    return _snd_mixer_selem_has_capture_volume(
      elem,
    );
  }

  late final _snd_mixer_selem_has_capture_volumePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_mixer_elem_t>)>>(
      'snd_mixer_selem_has_capture_volume');
  late final _snd_mixer_selem_has_capture_volume =
      _snd_mixer_selem_has_capture_volumePtr
          .asFunction<int Function(ffi.Pointer<snd_mixer_elem_t>)>();

  int snd_mixer_selem_has_capture_volume_joined(
    ffi.Pointer<snd_mixer_elem_t> elem,
  ) {
    return _snd_mixer_selem_has_capture_volume_joined(
      elem,
    );
  }

  late final _snd_mixer_selem_has_capture_volume_joinedPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_mixer_elem_t>)>>(
      'snd_mixer_selem_has_capture_volume_joined');
  late final _snd_mixer_selem_has_capture_volume_joined =
      _snd_mixer_selem_has_capture_volume_joinedPtr
          .asFunction<int Function(ffi.Pointer<snd_mixer_elem_t>)>();

  int snd_mixer_selem_has_common_switch(
    ffi.Pointer<snd_mixer_elem_t> elem,
  ) {
    return _snd_mixer_selem_has_common_switch(
      elem,
    );
  }

  late final _snd_mixer_selem_has_common_switchPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_mixer_elem_t>)>>(
      'snd_mixer_selem_has_common_switch');
  late final _snd_mixer_selem_has_common_switch =
      _snd_mixer_selem_has_common_switchPtr
          .asFunction<int Function(ffi.Pointer<snd_mixer_elem_t>)>();

  int snd_mixer_selem_has_playback_switch(
    ffi.Pointer<snd_mixer_elem_t> elem,
  ) {
    return _snd_mixer_selem_has_playback_switch(
      elem,
    );
  }

  late final _snd_mixer_selem_has_playback_switchPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_mixer_elem_t>)>>(
      'snd_mixer_selem_has_playback_switch');
  late final _snd_mixer_selem_has_playback_switch =
      _snd_mixer_selem_has_playback_switchPtr
          .asFunction<int Function(ffi.Pointer<snd_mixer_elem_t>)>();

  int snd_mixer_selem_has_playback_switch_joined(
    ffi.Pointer<snd_mixer_elem_t> elem,
  ) {
    return _snd_mixer_selem_has_playback_switch_joined(
      elem,
    );
  }

  late final _snd_mixer_selem_has_playback_switch_joinedPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_mixer_elem_t>)>>(
      'snd_mixer_selem_has_playback_switch_joined');
  late final _snd_mixer_selem_has_playback_switch_joined =
      _snd_mixer_selem_has_playback_switch_joinedPtr
          .asFunction<int Function(ffi.Pointer<snd_mixer_elem_t>)>();

  int snd_mixer_selem_has_capture_switch(
    ffi.Pointer<snd_mixer_elem_t> elem,
  ) {
    return _snd_mixer_selem_has_capture_switch(
      elem,
    );
  }

  late final _snd_mixer_selem_has_capture_switchPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_mixer_elem_t>)>>(
      'snd_mixer_selem_has_capture_switch');
  late final _snd_mixer_selem_has_capture_switch =
      _snd_mixer_selem_has_capture_switchPtr
          .asFunction<int Function(ffi.Pointer<snd_mixer_elem_t>)>();

  int snd_mixer_selem_has_capture_switch_joined(
    ffi.Pointer<snd_mixer_elem_t> elem,
  ) {
    return _snd_mixer_selem_has_capture_switch_joined(
      elem,
    );
  }

  late final _snd_mixer_selem_has_capture_switch_joinedPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_mixer_elem_t>)>>(
      'snd_mixer_selem_has_capture_switch_joined');
  late final _snd_mixer_selem_has_capture_switch_joined =
      _snd_mixer_selem_has_capture_switch_joinedPtr
          .asFunction<int Function(ffi.Pointer<snd_mixer_elem_t>)>();

  int snd_mixer_selem_has_capture_switch_exclusive(
    ffi.Pointer<snd_mixer_elem_t> elem,
  ) {
    return _snd_mixer_selem_has_capture_switch_exclusive(
      elem,
    );
  }

  late final _snd_mixer_selem_has_capture_switch_exclusivePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_mixer_elem_t>)>>(
      'snd_mixer_selem_has_capture_switch_exclusive');
  late final _snd_mixer_selem_has_capture_switch_exclusive =
      _snd_mixer_selem_has_capture_switch_exclusivePtr
          .asFunction<int Function(ffi.Pointer<snd_mixer_elem_t>)>();

  int snd_mixer_selem_ask_playback_vol_dB(
    ffi.Pointer<snd_mixer_elem_t> elem,
    int value,
    ffi.Pointer<ffi.Long> dBvalue,
  ) {
    return _snd_mixer_selem_ask_playback_vol_dB(
      elem,
      value,
      dBvalue,
    );
  }

  late final _snd_mixer_selem_ask_playback_vol_dBPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_mixer_elem_t>, ffi.Long,
              ffi.Pointer<ffi.Long>)>>('snd_mixer_selem_ask_playback_vol_dB');
  late final _snd_mixer_selem_ask_playback_vol_dB =
      _snd_mixer_selem_ask_playback_vol_dBPtr.asFunction<
          int Function(
              ffi.Pointer<snd_mixer_elem_t>, int, ffi.Pointer<ffi.Long>)>();

  int snd_mixer_selem_ask_capture_vol_dB(
    ffi.Pointer<snd_mixer_elem_t> elem,
    int value,
    ffi.Pointer<ffi.Long> dBvalue,
  ) {
    return _snd_mixer_selem_ask_capture_vol_dB(
      elem,
      value,
      dBvalue,
    );
  }

  late final _snd_mixer_selem_ask_capture_vol_dBPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_mixer_elem_t>, ffi.Long,
              ffi.Pointer<ffi.Long>)>>('snd_mixer_selem_ask_capture_vol_dB');
  late final _snd_mixer_selem_ask_capture_vol_dB =
      _snd_mixer_selem_ask_capture_vol_dBPtr.asFunction<
          int Function(
              ffi.Pointer<snd_mixer_elem_t>, int, ffi.Pointer<ffi.Long>)>();

  int snd_mixer_selem_ask_playback_dB_vol(
    ffi.Pointer<snd_mixer_elem_t> elem,
    int dBvalue,
    int dir,
    ffi.Pointer<ffi.Long> value,
  ) {
    return _snd_mixer_selem_ask_playback_dB_vol(
      elem,
      dBvalue,
      dir,
      value,
    );
  }

  late final _snd_mixer_selem_ask_playback_dB_volPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_mixer_elem_t>, ffi.Long, ffi.Int,
              ffi.Pointer<ffi.Long>)>>('snd_mixer_selem_ask_playback_dB_vol');
  late final _snd_mixer_selem_ask_playback_dB_vol =
      _snd_mixer_selem_ask_playback_dB_volPtr.asFunction<
          int Function(ffi.Pointer<snd_mixer_elem_t>, int, int,
              ffi.Pointer<ffi.Long>)>();

  int snd_mixer_selem_ask_capture_dB_vol(
    ffi.Pointer<snd_mixer_elem_t> elem,
    int dBvalue,
    int dir,
    ffi.Pointer<ffi.Long> value,
  ) {
    return _snd_mixer_selem_ask_capture_dB_vol(
      elem,
      dBvalue,
      dir,
      value,
    );
  }

  late final _snd_mixer_selem_ask_capture_dB_volPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_mixer_elem_t>, ffi.Long, ffi.Int,
              ffi.Pointer<ffi.Long>)>>('snd_mixer_selem_ask_capture_dB_vol');
  late final _snd_mixer_selem_ask_capture_dB_vol =
      _snd_mixer_selem_ask_capture_dB_volPtr.asFunction<
          int Function(ffi.Pointer<snd_mixer_elem_t>, int, int,
              ffi.Pointer<ffi.Long>)>();

  int snd_mixer_selem_get_playback_volume(
    ffi.Pointer<snd_mixer_elem_t> elem,
    int channel,
    ffi.Pointer<ffi.Long> value,
  ) {
    return _snd_mixer_selem_get_playback_volume(
      elem,
      channel,
      value,
    );
  }

  late final _snd_mixer_selem_get_playback_volumePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_mixer_elem_t>, ffi.Int32,
              ffi.Pointer<ffi.Long>)>>('snd_mixer_selem_get_playback_volume');
  late final _snd_mixer_selem_get_playback_volume =
      _snd_mixer_selem_get_playback_volumePtr.asFunction<
          int Function(
              ffi.Pointer<snd_mixer_elem_t>, int, ffi.Pointer<ffi.Long>)>();

  int snd_mixer_selem_get_capture_volume(
    ffi.Pointer<snd_mixer_elem_t> elem,
    int channel,
    ffi.Pointer<ffi.Long> value,
  ) {
    return _snd_mixer_selem_get_capture_volume(
      elem,
      channel,
      value,
    );
  }

  late final _snd_mixer_selem_get_capture_volumePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_mixer_elem_t>, ffi.Int32,
              ffi.Pointer<ffi.Long>)>>('snd_mixer_selem_get_capture_volume');
  late final _snd_mixer_selem_get_capture_volume =
      _snd_mixer_selem_get_capture_volumePtr.asFunction<
          int Function(
              ffi.Pointer<snd_mixer_elem_t>, int, ffi.Pointer<ffi.Long>)>();

  int snd_mixer_selem_get_playback_dB(
    ffi.Pointer<snd_mixer_elem_t> elem,
    int channel,
    ffi.Pointer<ffi.Long> value,
  ) {
    return _snd_mixer_selem_get_playback_dB(
      elem,
      channel,
      value,
    );
  }

  late final _snd_mixer_selem_get_playback_dBPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_mixer_elem_t>, ffi.Int32,
              ffi.Pointer<ffi.Long>)>>('snd_mixer_selem_get_playback_dB');
  late final _snd_mixer_selem_get_playback_dB =
      _snd_mixer_selem_get_playback_dBPtr.asFunction<
          int Function(
              ffi.Pointer<snd_mixer_elem_t>, int, ffi.Pointer<ffi.Long>)>();

  int snd_mixer_selem_get_capture_dB(
    ffi.Pointer<snd_mixer_elem_t> elem,
    int channel,
    ffi.Pointer<ffi.Long> value,
  ) {
    return _snd_mixer_selem_get_capture_dB(
      elem,
      channel,
      value,
    );
  }

  late final _snd_mixer_selem_get_capture_dBPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_mixer_elem_t>, ffi.Int32,
              ffi.Pointer<ffi.Long>)>>('snd_mixer_selem_get_capture_dB');
  late final _snd_mixer_selem_get_capture_dB =
      _snd_mixer_selem_get_capture_dBPtr.asFunction<
          int Function(
              ffi.Pointer<snd_mixer_elem_t>, int, ffi.Pointer<ffi.Long>)>();

  int snd_mixer_selem_get_playback_switch(
    ffi.Pointer<snd_mixer_elem_t> elem,
    int channel,
    ffi.Pointer<ffi.Int> value,
  ) {
    return _snd_mixer_selem_get_playback_switch(
      elem,
      channel,
      value,
    );
  }

  late final _snd_mixer_selem_get_playback_switchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_mixer_elem_t>, ffi.Int32,
              ffi.Pointer<ffi.Int>)>>('snd_mixer_selem_get_playback_switch');
  late final _snd_mixer_selem_get_playback_switch =
      _snd_mixer_selem_get_playback_switchPtr.asFunction<
          int Function(
              ffi.Pointer<snd_mixer_elem_t>, int, ffi.Pointer<ffi.Int>)>();

  int snd_mixer_selem_get_capture_switch(
    ffi.Pointer<snd_mixer_elem_t> elem,
    int channel,
    ffi.Pointer<ffi.Int> value,
  ) {
    return _snd_mixer_selem_get_capture_switch(
      elem,
      channel,
      value,
    );
  }

  late final _snd_mixer_selem_get_capture_switchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_mixer_elem_t>, ffi.Int32,
              ffi.Pointer<ffi.Int>)>>('snd_mixer_selem_get_capture_switch');
  late final _snd_mixer_selem_get_capture_switch =
      _snd_mixer_selem_get_capture_switchPtr.asFunction<
          int Function(
              ffi.Pointer<snd_mixer_elem_t>, int, ffi.Pointer<ffi.Int>)>();

  int snd_mixer_selem_set_playback_volume(
    ffi.Pointer<snd_mixer_elem_t> elem,
    int channel,
    int value,
  ) {
    return _snd_mixer_selem_set_playback_volume(
      elem,
      channel,
      value,
    );
  }

  late final _snd_mixer_selem_set_playback_volumePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_mixer_elem_t>, ffi.Int32,
              ffi.Long)>>('snd_mixer_selem_set_playback_volume');
  late final _snd_mixer_selem_set_playback_volume =
      _snd_mixer_selem_set_playback_volumePtr
          .asFunction<int Function(ffi.Pointer<snd_mixer_elem_t>, int, int)>();

  int snd_mixer_selem_set_capture_volume(
    ffi.Pointer<snd_mixer_elem_t> elem,
    int channel,
    int value,
  ) {
    return _snd_mixer_selem_set_capture_volume(
      elem,
      channel,
      value,
    );
  }

  late final _snd_mixer_selem_set_capture_volumePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_mixer_elem_t>, ffi.Int32,
              ffi.Long)>>('snd_mixer_selem_set_capture_volume');
  late final _snd_mixer_selem_set_capture_volume =
      _snd_mixer_selem_set_capture_volumePtr
          .asFunction<int Function(ffi.Pointer<snd_mixer_elem_t>, int, int)>();

  int snd_mixer_selem_set_playback_dB(
    ffi.Pointer<snd_mixer_elem_t> elem,
    int channel,
    int value,
    int dir,
  ) {
    return _snd_mixer_selem_set_playback_dB(
      elem,
      channel,
      value,
      dir,
    );
  }

  late final _snd_mixer_selem_set_playback_dBPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_mixer_elem_t>, ffi.Int32, ffi.Long,
              ffi.Int)>>('snd_mixer_selem_set_playback_dB');
  late final _snd_mixer_selem_set_playback_dB =
      _snd_mixer_selem_set_playback_dBPtr.asFunction<
          int Function(ffi.Pointer<snd_mixer_elem_t>, int, int, int)>();

  int snd_mixer_selem_set_capture_dB(
    ffi.Pointer<snd_mixer_elem_t> elem,
    int channel,
    int value,
    int dir,
  ) {
    return _snd_mixer_selem_set_capture_dB(
      elem,
      channel,
      value,
      dir,
    );
  }

  late final _snd_mixer_selem_set_capture_dBPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_mixer_elem_t>, ffi.Int32, ffi.Long,
              ffi.Int)>>('snd_mixer_selem_set_capture_dB');
  late final _snd_mixer_selem_set_capture_dB =
      _snd_mixer_selem_set_capture_dBPtr.asFunction<
          int Function(ffi.Pointer<snd_mixer_elem_t>, int, int, int)>();

  int snd_mixer_selem_set_playback_volume_all(
    ffi.Pointer<snd_mixer_elem_t> elem,
    int value,
  ) {
    return _snd_mixer_selem_set_playback_volume_all(
      elem,
      value,
    );
  }

  late final _snd_mixer_selem_set_playback_volume_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_mixer_elem_t>,
              ffi.Long)>>('snd_mixer_selem_set_playback_volume_all');
  late final _snd_mixer_selem_set_playback_volume_all =
      _snd_mixer_selem_set_playback_volume_allPtr
          .asFunction<int Function(ffi.Pointer<snd_mixer_elem_t>, int)>();

  int snd_mixer_selem_set_capture_volume_all(
    ffi.Pointer<snd_mixer_elem_t> elem,
    int value,
  ) {
    return _snd_mixer_selem_set_capture_volume_all(
      elem,
      value,
    );
  }

  late final _snd_mixer_selem_set_capture_volume_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_mixer_elem_t>,
              ffi.Long)>>('snd_mixer_selem_set_capture_volume_all');
  late final _snd_mixer_selem_set_capture_volume_all =
      _snd_mixer_selem_set_capture_volume_allPtr
          .asFunction<int Function(ffi.Pointer<snd_mixer_elem_t>, int)>();

  int snd_mixer_selem_set_playback_dB_all(
    ffi.Pointer<snd_mixer_elem_t> elem,
    int value,
    int dir,
  ) {
    return _snd_mixer_selem_set_playback_dB_all(
      elem,
      value,
      dir,
    );
  }

  late final _snd_mixer_selem_set_playback_dB_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_mixer_elem_t>, ffi.Long,
              ffi.Int)>>('snd_mixer_selem_set_playback_dB_all');
  late final _snd_mixer_selem_set_playback_dB_all =
      _snd_mixer_selem_set_playback_dB_allPtr
          .asFunction<int Function(ffi.Pointer<snd_mixer_elem_t>, int, int)>();

  int snd_mixer_selem_set_capture_dB_all(
    ffi.Pointer<snd_mixer_elem_t> elem,
    int value,
    int dir,
  ) {
    return _snd_mixer_selem_set_capture_dB_all(
      elem,
      value,
      dir,
    );
  }

  late final _snd_mixer_selem_set_capture_dB_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_mixer_elem_t>, ffi.Long,
              ffi.Int)>>('snd_mixer_selem_set_capture_dB_all');
  late final _snd_mixer_selem_set_capture_dB_all =
      _snd_mixer_selem_set_capture_dB_allPtr
          .asFunction<int Function(ffi.Pointer<snd_mixer_elem_t>, int, int)>();

  int snd_mixer_selem_set_playback_switch(
    ffi.Pointer<snd_mixer_elem_t> elem,
    int channel,
    int value,
  ) {
    return _snd_mixer_selem_set_playback_switch(
      elem,
      channel,
      value,
    );
  }

  late final _snd_mixer_selem_set_playback_switchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_mixer_elem_t>, ffi.Int32,
              ffi.Int)>>('snd_mixer_selem_set_playback_switch');
  late final _snd_mixer_selem_set_playback_switch =
      _snd_mixer_selem_set_playback_switchPtr
          .asFunction<int Function(ffi.Pointer<snd_mixer_elem_t>, int, int)>();

  int snd_mixer_selem_set_capture_switch(
    ffi.Pointer<snd_mixer_elem_t> elem,
    int channel,
    int value,
  ) {
    return _snd_mixer_selem_set_capture_switch(
      elem,
      channel,
      value,
    );
  }

  late final _snd_mixer_selem_set_capture_switchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_mixer_elem_t>, ffi.Int32,
              ffi.Int)>>('snd_mixer_selem_set_capture_switch');
  late final _snd_mixer_selem_set_capture_switch =
      _snd_mixer_selem_set_capture_switchPtr
          .asFunction<int Function(ffi.Pointer<snd_mixer_elem_t>, int, int)>();

  int snd_mixer_selem_set_playback_switch_all(
    ffi.Pointer<snd_mixer_elem_t> elem,
    int value,
  ) {
    return _snd_mixer_selem_set_playback_switch_all(
      elem,
      value,
    );
  }

  late final _snd_mixer_selem_set_playback_switch_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_mixer_elem_t>,
              ffi.Int)>>('snd_mixer_selem_set_playback_switch_all');
  late final _snd_mixer_selem_set_playback_switch_all =
      _snd_mixer_selem_set_playback_switch_allPtr
          .asFunction<int Function(ffi.Pointer<snd_mixer_elem_t>, int)>();

  int snd_mixer_selem_set_capture_switch_all(
    ffi.Pointer<snd_mixer_elem_t> elem,
    int value,
  ) {
    return _snd_mixer_selem_set_capture_switch_all(
      elem,
      value,
    );
  }

  late final _snd_mixer_selem_set_capture_switch_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_mixer_elem_t>,
              ffi.Int)>>('snd_mixer_selem_set_capture_switch_all');
  late final _snd_mixer_selem_set_capture_switch_all =
      _snd_mixer_selem_set_capture_switch_allPtr
          .asFunction<int Function(ffi.Pointer<snd_mixer_elem_t>, int)>();

  int snd_mixer_selem_get_playback_volume_range(
    ffi.Pointer<snd_mixer_elem_t> elem,
    ffi.Pointer<ffi.Long> min,
    ffi.Pointer<ffi.Long> max,
  ) {
    return _snd_mixer_selem_get_playback_volume_range(
      elem,
      min,
      max,
    );
  }

  late final _snd_mixer_selem_get_playback_volume_rangePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_mixer_elem_t>,
                  ffi.Pointer<ffi.Long>, ffi.Pointer<ffi.Long>)>>(
      'snd_mixer_selem_get_playback_volume_range');
  late final _snd_mixer_selem_get_playback_volume_range =
      _snd_mixer_selem_get_playback_volume_rangePtr.asFunction<
          int Function(ffi.Pointer<snd_mixer_elem_t>, ffi.Pointer<ffi.Long>,
              ffi.Pointer<ffi.Long>)>();

  int snd_mixer_selem_get_playback_dB_range(
    ffi.Pointer<snd_mixer_elem_t> elem,
    ffi.Pointer<ffi.Long> min,
    ffi.Pointer<ffi.Long> max,
  ) {
    return _snd_mixer_selem_get_playback_dB_range(
      elem,
      min,
      max,
    );
  }

  late final _snd_mixer_selem_get_playback_dB_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_mixer_elem_t>, ffi.Pointer<ffi.Long>,
              ffi.Pointer<ffi.Long>)>>('snd_mixer_selem_get_playback_dB_range');
  late final _snd_mixer_selem_get_playback_dB_range =
      _snd_mixer_selem_get_playback_dB_rangePtr.asFunction<
          int Function(ffi.Pointer<snd_mixer_elem_t>, ffi.Pointer<ffi.Long>,
              ffi.Pointer<ffi.Long>)>();

  int snd_mixer_selem_set_playback_volume_range(
    ffi.Pointer<snd_mixer_elem_t> elem,
    int min,
    int max,
  ) {
    return _snd_mixer_selem_set_playback_volume_range(
      elem,
      min,
      max,
    );
  }

  late final _snd_mixer_selem_set_playback_volume_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_mixer_elem_t>, ffi.Long,
              ffi.Long)>>('snd_mixer_selem_set_playback_volume_range');
  late final _snd_mixer_selem_set_playback_volume_range =
      _snd_mixer_selem_set_playback_volume_rangePtr
          .asFunction<int Function(ffi.Pointer<snd_mixer_elem_t>, int, int)>();

  int snd_mixer_selem_get_capture_volume_range(
    ffi.Pointer<snd_mixer_elem_t> elem,
    ffi.Pointer<ffi.Long> min,
    ffi.Pointer<ffi.Long> max,
  ) {
    return _snd_mixer_selem_get_capture_volume_range(
      elem,
      min,
      max,
    );
  }

  late final _snd_mixer_selem_get_capture_volume_rangePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_mixer_elem_t>,
                  ffi.Pointer<ffi.Long>, ffi.Pointer<ffi.Long>)>>(
      'snd_mixer_selem_get_capture_volume_range');
  late final _snd_mixer_selem_get_capture_volume_range =
      _snd_mixer_selem_get_capture_volume_rangePtr.asFunction<
          int Function(ffi.Pointer<snd_mixer_elem_t>, ffi.Pointer<ffi.Long>,
              ffi.Pointer<ffi.Long>)>();

  int snd_mixer_selem_get_capture_dB_range(
    ffi.Pointer<snd_mixer_elem_t> elem,
    ffi.Pointer<ffi.Long> min,
    ffi.Pointer<ffi.Long> max,
  ) {
    return _snd_mixer_selem_get_capture_dB_range(
      elem,
      min,
      max,
    );
  }

  late final _snd_mixer_selem_get_capture_dB_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_mixer_elem_t>, ffi.Pointer<ffi.Long>,
              ffi.Pointer<ffi.Long>)>>('snd_mixer_selem_get_capture_dB_range');
  late final _snd_mixer_selem_get_capture_dB_range =
      _snd_mixer_selem_get_capture_dB_rangePtr.asFunction<
          int Function(ffi.Pointer<snd_mixer_elem_t>, ffi.Pointer<ffi.Long>,
              ffi.Pointer<ffi.Long>)>();

  int snd_mixer_selem_set_capture_volume_range(
    ffi.Pointer<snd_mixer_elem_t> elem,
    int min,
    int max,
  ) {
    return _snd_mixer_selem_set_capture_volume_range(
      elem,
      min,
      max,
    );
  }

  late final _snd_mixer_selem_set_capture_volume_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_mixer_elem_t>, ffi.Long,
              ffi.Long)>>('snd_mixer_selem_set_capture_volume_range');
  late final _snd_mixer_selem_set_capture_volume_range =
      _snd_mixer_selem_set_capture_volume_rangePtr
          .asFunction<int Function(ffi.Pointer<snd_mixer_elem_t>, int, int)>();

  int snd_mixer_selem_is_enumerated(
    ffi.Pointer<snd_mixer_elem_t> elem,
  ) {
    return _snd_mixer_selem_is_enumerated(
      elem,
    );
  }

  late final _snd_mixer_selem_is_enumeratedPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_mixer_elem_t>)>>(
      'snd_mixer_selem_is_enumerated');
  late final _snd_mixer_selem_is_enumerated = _snd_mixer_selem_is_enumeratedPtr
      .asFunction<int Function(ffi.Pointer<snd_mixer_elem_t>)>();

  int snd_mixer_selem_is_enum_playback(
    ffi.Pointer<snd_mixer_elem_t> elem,
  ) {
    return _snd_mixer_selem_is_enum_playback(
      elem,
    );
  }

  late final _snd_mixer_selem_is_enum_playbackPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_mixer_elem_t>)>>(
      'snd_mixer_selem_is_enum_playback');
  late final _snd_mixer_selem_is_enum_playback =
      _snd_mixer_selem_is_enum_playbackPtr
          .asFunction<int Function(ffi.Pointer<snd_mixer_elem_t>)>();

  int snd_mixer_selem_is_enum_capture(
    ffi.Pointer<snd_mixer_elem_t> elem,
  ) {
    return _snd_mixer_selem_is_enum_capture(
      elem,
    );
  }

  late final _snd_mixer_selem_is_enum_capturePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_mixer_elem_t>)>>(
      'snd_mixer_selem_is_enum_capture');
  late final _snd_mixer_selem_is_enum_capture =
      _snd_mixer_selem_is_enum_capturePtr
          .asFunction<int Function(ffi.Pointer<snd_mixer_elem_t>)>();

  int snd_mixer_selem_get_enum_items(
    ffi.Pointer<snd_mixer_elem_t> elem,
  ) {
    return _snd_mixer_selem_get_enum_items(
      elem,
    );
  }

  late final _snd_mixer_selem_get_enum_itemsPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_mixer_elem_t>)>>(
      'snd_mixer_selem_get_enum_items');
  late final _snd_mixer_selem_get_enum_items =
      _snd_mixer_selem_get_enum_itemsPtr
          .asFunction<int Function(ffi.Pointer<snd_mixer_elem_t>)>();

  int snd_mixer_selem_get_enum_item_name(
    ffi.Pointer<snd_mixer_elem_t> elem,
    int idx,
    int maxlen,
    ffi.Pointer<ffi.Char> str,
  ) {
    return _snd_mixer_selem_get_enum_item_name(
      elem,
      idx,
      maxlen,
      str,
    );
  }

  late final _snd_mixer_selem_get_enum_item_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_mixer_elem_t>,
              ffi.UnsignedInt,
              ffi.Size,
              ffi.Pointer<ffi.Char>)>>('snd_mixer_selem_get_enum_item_name');
  late final _snd_mixer_selem_get_enum_item_name =
      _snd_mixer_selem_get_enum_item_namePtr.asFunction<
          int Function(ffi.Pointer<snd_mixer_elem_t>, int, int,
              ffi.Pointer<ffi.Char>)>();

  int snd_mixer_selem_get_enum_item(
    ffi.Pointer<snd_mixer_elem_t> elem,
    int channel,
    ffi.Pointer<ffi.UnsignedInt> idxp,
  ) {
    return _snd_mixer_selem_get_enum_item(
      elem,
      channel,
      idxp,
    );
  }

  late final _snd_mixer_selem_get_enum_itemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_mixer_elem_t>, ffi.Int32,
              ffi.Pointer<ffi.UnsignedInt>)>>('snd_mixer_selem_get_enum_item');
  late final _snd_mixer_selem_get_enum_item =
      _snd_mixer_selem_get_enum_itemPtr.asFunction<
          int Function(ffi.Pointer<snd_mixer_elem_t>, int,
              ffi.Pointer<ffi.UnsignedInt>)>();

  int snd_mixer_selem_set_enum_item(
    ffi.Pointer<snd_mixer_elem_t> elem,
    int channel,
    int idx,
  ) {
    return _snd_mixer_selem_set_enum_item(
      elem,
      channel,
      idx,
    );
  }

  late final _snd_mixer_selem_set_enum_itemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_mixer_elem_t>, ffi.Int32,
              ffi.UnsignedInt)>>('snd_mixer_selem_set_enum_item');
  late final _snd_mixer_selem_set_enum_item = _snd_mixer_selem_set_enum_itemPtr
      .asFunction<int Function(ffi.Pointer<snd_mixer_elem_t>, int, int)>();

  int snd_mixer_selem_id_sizeof() {
    return _snd_mixer_selem_id_sizeof();
  }

  late final _snd_mixer_selem_id_sizeofPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>(
          'snd_mixer_selem_id_sizeof');
  late final _snd_mixer_selem_id_sizeof =
      _snd_mixer_selem_id_sizeofPtr.asFunction<int Function()>();

  int snd_mixer_selem_id_malloc(
    ffi.Pointer<ffi.Pointer<snd_mixer_selem_id_t>> ptr,
  ) {
    return _snd_mixer_selem_id_malloc(
      ptr,
    );
  }

  late final _snd_mixer_selem_id_mallocPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Pointer<snd_mixer_selem_id_t>>)>>(
      'snd_mixer_selem_id_malloc');
  late final _snd_mixer_selem_id_malloc =
      _snd_mixer_selem_id_mallocPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<snd_mixer_selem_id_t>>)>();

  void snd_mixer_selem_id_free(
    ffi.Pointer<snd_mixer_selem_id_t> obj,
  ) {
    return _snd_mixer_selem_id_free(
      obj,
    );
  }

  late final _snd_mixer_selem_id_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<snd_mixer_selem_id_t>)>>('snd_mixer_selem_id_free');
  late final _snd_mixer_selem_id_free = _snd_mixer_selem_id_freePtr
      .asFunction<void Function(ffi.Pointer<snd_mixer_selem_id_t>)>();

  void snd_mixer_selem_id_copy(
    ffi.Pointer<snd_mixer_selem_id_t> dst,
    ffi.Pointer<snd_mixer_selem_id_t> src,
  ) {
    return _snd_mixer_selem_id_copy(
      dst,
      src,
    );
  }

  late final _snd_mixer_selem_id_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_mixer_selem_id_t>,
              ffi.Pointer<snd_mixer_selem_id_t>)>>('snd_mixer_selem_id_copy');
  late final _snd_mixer_selem_id_copy = _snd_mixer_selem_id_copyPtr.asFunction<
      void Function(ffi.Pointer<snd_mixer_selem_id_t>,
          ffi.Pointer<snd_mixer_selem_id_t>)>();

  ffi.Pointer<ffi.Char> snd_mixer_selem_id_get_name(
    ffi.Pointer<snd_mixer_selem_id_t> obj,
  ) {
    return _snd_mixer_selem_id_get_name(
      obj,
    );
  }

  late final _snd_mixer_selem_id_get_namePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<snd_mixer_selem_id_t>)>>(
      'snd_mixer_selem_id_get_name');
  late final _snd_mixer_selem_id_get_name =
      _snd_mixer_selem_id_get_namePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<snd_mixer_selem_id_t>)>();

  int snd_mixer_selem_id_get_index(
    ffi.Pointer<snd_mixer_selem_id_t> obj,
  ) {
    return _snd_mixer_selem_id_get_index(
      obj,
    );
  }

  late final _snd_mixer_selem_id_get_indexPtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<snd_mixer_selem_id_t>)>>(
      'snd_mixer_selem_id_get_index');
  late final _snd_mixer_selem_id_get_index = _snd_mixer_selem_id_get_indexPtr
      .asFunction<int Function(ffi.Pointer<snd_mixer_selem_id_t>)>();

  void snd_mixer_selem_id_set_name(
    ffi.Pointer<snd_mixer_selem_id_t> obj,
    ffi.Pointer<ffi.Char> val,
  ) {
    return _snd_mixer_selem_id_set_name(
      obj,
      val,
    );
  }

  late final _snd_mixer_selem_id_set_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_mixer_selem_id_t>,
              ffi.Pointer<ffi.Char>)>>('snd_mixer_selem_id_set_name');
  late final _snd_mixer_selem_id_set_name =
      _snd_mixer_selem_id_set_namePtr.asFunction<
          void Function(
              ffi.Pointer<snd_mixer_selem_id_t>, ffi.Pointer<ffi.Char>)>();

  void snd_mixer_selem_id_set_index(
    ffi.Pointer<snd_mixer_selem_id_t> obj,
    int val,
  ) {
    return _snd_mixer_selem_id_set_index(
      obj,
      val,
    );
  }

  late final _snd_mixer_selem_id_set_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_mixer_selem_id_t>,
              ffi.UnsignedInt)>>('snd_mixer_selem_id_set_index');
  late final _snd_mixer_selem_id_set_index = _snd_mixer_selem_id_set_indexPtr
      .asFunction<void Function(ffi.Pointer<snd_mixer_selem_id_t>, int)>();

  int snd_mixer_selem_id_parse(
    ffi.Pointer<snd_mixer_selem_id_t> dst,
    ffi.Pointer<ffi.Char> str,
  ) {
    return _snd_mixer_selem_id_parse(
      dst,
      str,
    );
  }

  late final _snd_mixer_selem_id_parsePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_mixer_selem_id_t>,
              ffi.Pointer<ffi.Char>)>>('snd_mixer_selem_id_parse');
  late final _snd_mixer_selem_id_parse =
      _snd_mixer_selem_id_parsePtr.asFunction<
          int Function(
              ffi.Pointer<snd_mixer_selem_id_t>, ffi.Pointer<ffi.Char>)>();

  int snd_seq_open(
    ffi.Pointer<ffi.Pointer<snd_seq_t>> handle,
    ffi.Pointer<ffi.Char> name,
    int streams,
    int mode,
  ) {
    return _snd_seq_open(
      handle,
      name,
      streams,
      mode,
    );
  }

  late final _snd_seq_openPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<snd_seq_t>>,
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int)>>('snd_seq_open');
  late final _snd_seq_open = _snd_seq_openPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<snd_seq_t>>, ffi.Pointer<ffi.Char>,
          int, int)>();

  int snd_seq_open_lconf(
    ffi.Pointer<ffi.Pointer<snd_seq_t>> handle,
    ffi.Pointer<ffi.Char> name,
    int streams,
    int mode,
    ffi.Pointer<snd_config_t> lconf,
  ) {
    return _snd_seq_open_lconf(
      handle,
      name,
      streams,
      mode,
      lconf,
    );
  }

  late final _snd_seq_open_lconfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<snd_seq_t>>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<snd_config_t>)>>('snd_seq_open_lconf');
  late final _snd_seq_open_lconf = _snd_seq_open_lconfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<snd_seq_t>>, ffi.Pointer<ffi.Char>,
          int, int, ffi.Pointer<snd_config_t>)>();

  ffi.Pointer<ffi.Char> snd_seq_name(
    ffi.Pointer<snd_seq_t> seq,
  ) {
    return _snd_seq_name(
      seq,
    );
  }

  late final _snd_seq_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<snd_seq_t>)>>('snd_seq_name');
  late final _snd_seq_name = _snd_seq_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<snd_seq_t>)>();

  int snd_seq_type(
    ffi.Pointer<snd_seq_t> seq,
  ) {
    return _snd_seq_type(
      seq,
    );
  }

  late final _snd_seq_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<snd_seq_t>)>>(
          'snd_seq_type');
  late final _snd_seq_type =
      _snd_seq_typePtr.asFunction<int Function(ffi.Pointer<snd_seq_t>)>();

  int snd_seq_close(
    ffi.Pointer<snd_seq_t> handle,
  ) {
    return _snd_seq_close(
      handle,
    );
  }

  late final _snd_seq_closePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_seq_t>)>>(
          'snd_seq_close');
  late final _snd_seq_close =
      _snd_seq_closePtr.asFunction<int Function(ffi.Pointer<snd_seq_t>)>();

  int snd_seq_poll_descriptors_count(
    ffi.Pointer<snd_seq_t> handle,
    int events,
  ) {
    return _snd_seq_poll_descriptors_count(
      handle,
      events,
    );
  }

  late final _snd_seq_poll_descriptors_countPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_seq_t>,
              ffi.Short)>>('snd_seq_poll_descriptors_count');
  late final _snd_seq_poll_descriptors_count =
      _snd_seq_poll_descriptors_countPtr
          .asFunction<int Function(ffi.Pointer<snd_seq_t>, int)>();

  int snd_seq_poll_descriptors(
    ffi.Pointer<snd_seq_t> handle,
    ffi.Pointer<pollfd> pfds,
    int space,
    int events,
  ) {
    return _snd_seq_poll_descriptors(
      handle,
      pfds,
      space,
      events,
    );
  }

  late final _snd_seq_poll_descriptorsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_seq_t>, ffi.Pointer<pollfd>,
              ffi.UnsignedInt, ffi.Short)>>('snd_seq_poll_descriptors');
  late final _snd_seq_poll_descriptors =
      _snd_seq_poll_descriptorsPtr.asFunction<
          int Function(
              ffi.Pointer<snd_seq_t>, ffi.Pointer<pollfd>, int, int)>();

  int snd_seq_poll_descriptors_revents(
    ffi.Pointer<snd_seq_t> seq,
    ffi.Pointer<pollfd> pfds,
    int nfds,
    ffi.Pointer<ffi.UnsignedShort> revents,
  ) {
    return _snd_seq_poll_descriptors_revents(
      seq,
      pfds,
      nfds,
      revents,
    );
  }

  late final _snd_seq_poll_descriptors_reventsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_seq_t>, ffi.Pointer<pollfd>,
                  ffi.UnsignedInt, ffi.Pointer<ffi.UnsignedShort>)>>(
      'snd_seq_poll_descriptors_revents');
  late final _snd_seq_poll_descriptors_revents =
      _snd_seq_poll_descriptors_reventsPtr.asFunction<
          int Function(ffi.Pointer<snd_seq_t>, ffi.Pointer<pollfd>, int,
              ffi.Pointer<ffi.UnsignedShort>)>();

  int snd_seq_nonblock(
    ffi.Pointer<snd_seq_t> handle,
    int nonblock,
  ) {
    return _snd_seq_nonblock(
      handle,
      nonblock,
    );
  }

  late final _snd_seq_nonblockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_seq_t>, ffi.Int)>>('snd_seq_nonblock');
  late final _snd_seq_nonblock = _snd_seq_nonblockPtr
      .asFunction<int Function(ffi.Pointer<snd_seq_t>, int)>();

  int snd_seq_client_id(
    ffi.Pointer<snd_seq_t> handle,
  ) {
    return _snd_seq_client_id(
      handle,
    );
  }

  late final _snd_seq_client_idPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_seq_t>)>>(
          'snd_seq_client_id');
  late final _snd_seq_client_id =
      _snd_seq_client_idPtr.asFunction<int Function(ffi.Pointer<snd_seq_t>)>();

  int snd_seq_get_output_buffer_size(
    ffi.Pointer<snd_seq_t> handle,
  ) {
    return _snd_seq_get_output_buffer_size(
      handle,
    );
  }

  late final _snd_seq_get_output_buffer_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<snd_seq_t>)>>(
          'snd_seq_get_output_buffer_size');
  late final _snd_seq_get_output_buffer_size =
      _snd_seq_get_output_buffer_sizePtr
          .asFunction<int Function(ffi.Pointer<snd_seq_t>)>();

  int snd_seq_get_input_buffer_size(
    ffi.Pointer<snd_seq_t> handle,
  ) {
    return _snd_seq_get_input_buffer_size(
      handle,
    );
  }

  late final _snd_seq_get_input_buffer_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<snd_seq_t>)>>(
          'snd_seq_get_input_buffer_size');
  late final _snd_seq_get_input_buffer_size = _snd_seq_get_input_buffer_sizePtr
      .asFunction<int Function(ffi.Pointer<snd_seq_t>)>();

  int snd_seq_set_output_buffer_size(
    ffi.Pointer<snd_seq_t> handle,
    int size,
  ) {
    return _snd_seq_set_output_buffer_size(
      handle,
      size,
    );
  }

  late final _snd_seq_set_output_buffer_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_seq_t>,
              ffi.Size)>>('snd_seq_set_output_buffer_size');
  late final _snd_seq_set_output_buffer_size =
      _snd_seq_set_output_buffer_sizePtr
          .asFunction<int Function(ffi.Pointer<snd_seq_t>, int)>();

  int snd_seq_set_input_buffer_size(
    ffi.Pointer<snd_seq_t> handle,
    int size,
  ) {
    return _snd_seq_set_input_buffer_size(
      handle,
      size,
    );
  }

  late final _snd_seq_set_input_buffer_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_seq_t>,
              ffi.Size)>>('snd_seq_set_input_buffer_size');
  late final _snd_seq_set_input_buffer_size = _snd_seq_set_input_buffer_sizePtr
      .asFunction<int Function(ffi.Pointer<snd_seq_t>, int)>();

  int snd_seq_system_info_sizeof() {
    return _snd_seq_system_info_sizeof();
  }

  late final _snd_seq_system_info_sizeofPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>(
          'snd_seq_system_info_sizeof');
  late final _snd_seq_system_info_sizeof =
      _snd_seq_system_info_sizeofPtr.asFunction<int Function()>();

  int snd_seq_system_info_malloc(
    ffi.Pointer<ffi.Pointer<snd_seq_system_info_t>> ptr,
  ) {
    return _snd_seq_system_info_malloc(
      ptr,
    );
  }

  late final _snd_seq_system_info_mallocPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Pointer<snd_seq_system_info_t>>)>>(
      'snd_seq_system_info_malloc');
  late final _snd_seq_system_info_malloc =
      _snd_seq_system_info_mallocPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<snd_seq_system_info_t>>)>();

  void snd_seq_system_info_free(
    ffi.Pointer<snd_seq_system_info_t> ptr,
  ) {
    return _snd_seq_system_info_free(
      ptr,
    );
  }

  late final _snd_seq_system_info_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<snd_seq_system_info_t>)>>('snd_seq_system_info_free');
  late final _snd_seq_system_info_free = _snd_seq_system_info_freePtr
      .asFunction<void Function(ffi.Pointer<snd_seq_system_info_t>)>();

  void snd_seq_system_info_copy(
    ffi.Pointer<snd_seq_system_info_t> dst,
    ffi.Pointer<snd_seq_system_info_t> src,
  ) {
    return _snd_seq_system_info_copy(
      dst,
      src,
    );
  }

  late final _snd_seq_system_info_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_seq_system_info_t>,
              ffi.Pointer<snd_seq_system_info_t>)>>('snd_seq_system_info_copy');
  late final _snd_seq_system_info_copy =
      _snd_seq_system_info_copyPtr.asFunction<
          void Function(ffi.Pointer<snd_seq_system_info_t>,
              ffi.Pointer<snd_seq_system_info_t>)>();

  int snd_seq_system_info_get_queues(
    ffi.Pointer<snd_seq_system_info_t> info,
  ) {
    return _snd_seq_system_info_get_queues(
      info,
    );
  }

  late final _snd_seq_system_info_get_queuesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_seq_system_info_t>)>>(
      'snd_seq_system_info_get_queues');
  late final _snd_seq_system_info_get_queues =
      _snd_seq_system_info_get_queuesPtr
          .asFunction<int Function(ffi.Pointer<snd_seq_system_info_t>)>();

  int snd_seq_system_info_get_clients(
    ffi.Pointer<snd_seq_system_info_t> info,
  ) {
    return _snd_seq_system_info_get_clients(
      info,
    );
  }

  late final _snd_seq_system_info_get_clientsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_seq_system_info_t>)>>(
      'snd_seq_system_info_get_clients');
  late final _snd_seq_system_info_get_clients =
      _snd_seq_system_info_get_clientsPtr
          .asFunction<int Function(ffi.Pointer<snd_seq_system_info_t>)>();

  int snd_seq_system_info_get_ports(
    ffi.Pointer<snd_seq_system_info_t> info,
  ) {
    return _snd_seq_system_info_get_ports(
      info,
    );
  }

  late final _snd_seq_system_info_get_portsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_seq_system_info_t>)>>(
      'snd_seq_system_info_get_ports');
  late final _snd_seq_system_info_get_ports = _snd_seq_system_info_get_portsPtr
      .asFunction<int Function(ffi.Pointer<snd_seq_system_info_t>)>();

  int snd_seq_system_info_get_channels(
    ffi.Pointer<snd_seq_system_info_t> info,
  ) {
    return _snd_seq_system_info_get_channels(
      info,
    );
  }

  late final _snd_seq_system_info_get_channelsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_seq_system_info_t>)>>(
      'snd_seq_system_info_get_channels');
  late final _snd_seq_system_info_get_channels =
      _snd_seq_system_info_get_channelsPtr
          .asFunction<int Function(ffi.Pointer<snd_seq_system_info_t>)>();

  int snd_seq_system_info_get_cur_clients(
    ffi.Pointer<snd_seq_system_info_t> info,
  ) {
    return _snd_seq_system_info_get_cur_clients(
      info,
    );
  }

  late final _snd_seq_system_info_get_cur_clientsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_seq_system_info_t>)>>(
      'snd_seq_system_info_get_cur_clients');
  late final _snd_seq_system_info_get_cur_clients =
      _snd_seq_system_info_get_cur_clientsPtr
          .asFunction<int Function(ffi.Pointer<snd_seq_system_info_t>)>();

  int snd_seq_system_info_get_cur_queues(
    ffi.Pointer<snd_seq_system_info_t> info,
  ) {
    return _snd_seq_system_info_get_cur_queues(
      info,
    );
  }

  late final _snd_seq_system_info_get_cur_queuesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_seq_system_info_t>)>>(
      'snd_seq_system_info_get_cur_queues');
  late final _snd_seq_system_info_get_cur_queues =
      _snd_seq_system_info_get_cur_queuesPtr
          .asFunction<int Function(ffi.Pointer<snd_seq_system_info_t>)>();

  int snd_seq_system_info(
    ffi.Pointer<snd_seq_t> handle,
    ffi.Pointer<snd_seq_system_info_t> info,
  ) {
    return _snd_seq_system_info(
      handle,
      info,
    );
  }

  late final _snd_seq_system_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_seq_t>,
              ffi.Pointer<snd_seq_system_info_t>)>>('snd_seq_system_info');
  late final _snd_seq_system_info = _snd_seq_system_infoPtr.asFunction<
      int Function(
          ffi.Pointer<snd_seq_t>, ffi.Pointer<snd_seq_system_info_t>)>();

  int snd_seq_client_info_sizeof() {
    return _snd_seq_client_info_sizeof();
  }

  late final _snd_seq_client_info_sizeofPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>(
          'snd_seq_client_info_sizeof');
  late final _snd_seq_client_info_sizeof =
      _snd_seq_client_info_sizeofPtr.asFunction<int Function()>();

  int snd_seq_client_info_malloc(
    ffi.Pointer<ffi.Pointer<snd_seq_client_info_t>> ptr,
  ) {
    return _snd_seq_client_info_malloc(
      ptr,
    );
  }

  late final _snd_seq_client_info_mallocPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Pointer<snd_seq_client_info_t>>)>>(
      'snd_seq_client_info_malloc');
  late final _snd_seq_client_info_malloc =
      _snd_seq_client_info_mallocPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<snd_seq_client_info_t>>)>();

  void snd_seq_client_info_free(
    ffi.Pointer<snd_seq_client_info_t> ptr,
  ) {
    return _snd_seq_client_info_free(
      ptr,
    );
  }

  late final _snd_seq_client_info_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<snd_seq_client_info_t>)>>('snd_seq_client_info_free');
  late final _snd_seq_client_info_free = _snd_seq_client_info_freePtr
      .asFunction<void Function(ffi.Pointer<snd_seq_client_info_t>)>();

  void snd_seq_client_info_copy(
    ffi.Pointer<snd_seq_client_info_t> dst,
    ffi.Pointer<snd_seq_client_info_t> src,
  ) {
    return _snd_seq_client_info_copy(
      dst,
      src,
    );
  }

  late final _snd_seq_client_info_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_seq_client_info_t>,
              ffi.Pointer<snd_seq_client_info_t>)>>('snd_seq_client_info_copy');
  late final _snd_seq_client_info_copy =
      _snd_seq_client_info_copyPtr.asFunction<
          void Function(ffi.Pointer<snd_seq_client_info_t>,
              ffi.Pointer<snd_seq_client_info_t>)>();

  int snd_seq_client_info_get_client(
    ffi.Pointer<snd_seq_client_info_t> info,
  ) {
    return _snd_seq_client_info_get_client(
      info,
    );
  }

  late final _snd_seq_client_info_get_clientPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_seq_client_info_t>)>>(
      'snd_seq_client_info_get_client');
  late final _snd_seq_client_info_get_client =
      _snd_seq_client_info_get_clientPtr
          .asFunction<int Function(ffi.Pointer<snd_seq_client_info_t>)>();

  int snd_seq_client_info_get_type(
    ffi.Pointer<snd_seq_client_info_t> info,
  ) {
    return _snd_seq_client_info_get_type(
      info,
    );
  }

  late final _snd_seq_client_info_get_typePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<snd_seq_client_info_t>)>>(
      'snd_seq_client_info_get_type');
  late final _snd_seq_client_info_get_type = _snd_seq_client_info_get_typePtr
      .asFunction<int Function(ffi.Pointer<snd_seq_client_info_t>)>();

  ffi.Pointer<ffi.Char> snd_seq_client_info_get_name(
    ffi.Pointer<snd_seq_client_info_t> info,
  ) {
    return _snd_seq_client_info_get_name(
      info,
    );
  }

  late final _snd_seq_client_info_get_namePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<snd_seq_client_info_t>)>>(
      'snd_seq_client_info_get_name');
  late final _snd_seq_client_info_get_name =
      _snd_seq_client_info_get_namePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<snd_seq_client_info_t>)>();

  int snd_seq_client_info_get_broadcast_filter(
    ffi.Pointer<snd_seq_client_info_t> info,
  ) {
    return _snd_seq_client_info_get_broadcast_filter(
      info,
    );
  }

  late final _snd_seq_client_info_get_broadcast_filterPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_seq_client_info_t>)>>(
      'snd_seq_client_info_get_broadcast_filter');
  late final _snd_seq_client_info_get_broadcast_filter =
      _snd_seq_client_info_get_broadcast_filterPtr
          .asFunction<int Function(ffi.Pointer<snd_seq_client_info_t>)>();

  int snd_seq_client_info_get_error_bounce(
    ffi.Pointer<snd_seq_client_info_t> info,
  ) {
    return _snd_seq_client_info_get_error_bounce(
      info,
    );
  }

  late final _snd_seq_client_info_get_error_bouncePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_seq_client_info_t>)>>(
      'snd_seq_client_info_get_error_bounce');
  late final _snd_seq_client_info_get_error_bounce =
      _snd_seq_client_info_get_error_bouncePtr
          .asFunction<int Function(ffi.Pointer<snd_seq_client_info_t>)>();

  int snd_seq_client_info_get_card(
    ffi.Pointer<snd_seq_client_info_t> info,
  ) {
    return _snd_seq_client_info_get_card(
      info,
    );
  }

  late final _snd_seq_client_info_get_cardPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_seq_client_info_t>)>>(
      'snd_seq_client_info_get_card');
  late final _snd_seq_client_info_get_card = _snd_seq_client_info_get_cardPtr
      .asFunction<int Function(ffi.Pointer<snd_seq_client_info_t>)>();

  int snd_seq_client_info_get_pid(
    ffi.Pointer<snd_seq_client_info_t> info,
  ) {
    return _snd_seq_client_info_get_pid(
      info,
    );
  }

  late final _snd_seq_client_info_get_pidPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_seq_client_info_t>)>>(
      'snd_seq_client_info_get_pid');
  late final _snd_seq_client_info_get_pid = _snd_seq_client_info_get_pidPtr
      .asFunction<int Function(ffi.Pointer<snd_seq_client_info_t>)>();

  ffi.Pointer<ffi.UnsignedChar> snd_seq_client_info_get_event_filter(
    ffi.Pointer<snd_seq_client_info_t> info,
  ) {
    return _snd_seq_client_info_get_event_filter(
      info,
    );
  }

  late final _snd_seq_client_info_get_event_filterPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.UnsignedChar> Function(
                  ffi.Pointer<snd_seq_client_info_t>)>>(
      'snd_seq_client_info_get_event_filter');
  late final _snd_seq_client_info_get_event_filter =
      _snd_seq_client_info_get_event_filterPtr.asFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(
              ffi.Pointer<snd_seq_client_info_t>)>();

  int snd_seq_client_info_get_num_ports(
    ffi.Pointer<snd_seq_client_info_t> info,
  ) {
    return _snd_seq_client_info_get_num_ports(
      info,
    );
  }

  late final _snd_seq_client_info_get_num_portsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_seq_client_info_t>)>>(
      'snd_seq_client_info_get_num_ports');
  late final _snd_seq_client_info_get_num_ports =
      _snd_seq_client_info_get_num_portsPtr
          .asFunction<int Function(ffi.Pointer<snd_seq_client_info_t>)>();

  int snd_seq_client_info_get_event_lost(
    ffi.Pointer<snd_seq_client_info_t> info,
  ) {
    return _snd_seq_client_info_get_event_lost(
      info,
    );
  }

  late final _snd_seq_client_info_get_event_lostPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_seq_client_info_t>)>>(
      'snd_seq_client_info_get_event_lost');
  late final _snd_seq_client_info_get_event_lost =
      _snd_seq_client_info_get_event_lostPtr
          .asFunction<int Function(ffi.Pointer<snd_seq_client_info_t>)>();

  void snd_seq_client_info_set_client(
    ffi.Pointer<snd_seq_client_info_t> info,
    int client,
  ) {
    return _snd_seq_client_info_set_client(
      info,
      client,
    );
  }

  late final _snd_seq_client_info_set_clientPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_seq_client_info_t>,
              ffi.Int)>>('snd_seq_client_info_set_client');
  late final _snd_seq_client_info_set_client =
      _snd_seq_client_info_set_clientPtr
          .asFunction<void Function(ffi.Pointer<snd_seq_client_info_t>, int)>();

  void snd_seq_client_info_set_name(
    ffi.Pointer<snd_seq_client_info_t> info,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _snd_seq_client_info_set_name(
      info,
      name,
    );
  }

  late final _snd_seq_client_info_set_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_seq_client_info_t>,
              ffi.Pointer<ffi.Char>)>>('snd_seq_client_info_set_name');
  late final _snd_seq_client_info_set_name =
      _snd_seq_client_info_set_namePtr.asFunction<
          void Function(
              ffi.Pointer<snd_seq_client_info_t>, ffi.Pointer<ffi.Char>)>();

  void snd_seq_client_info_set_broadcast_filter(
    ffi.Pointer<snd_seq_client_info_t> info,
    int val,
  ) {
    return _snd_seq_client_info_set_broadcast_filter(
      info,
      val,
    );
  }

  late final _snd_seq_client_info_set_broadcast_filterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_seq_client_info_t>,
              ffi.Int)>>('snd_seq_client_info_set_broadcast_filter');
  late final _snd_seq_client_info_set_broadcast_filter =
      _snd_seq_client_info_set_broadcast_filterPtr
          .asFunction<void Function(ffi.Pointer<snd_seq_client_info_t>, int)>();

  void snd_seq_client_info_set_error_bounce(
    ffi.Pointer<snd_seq_client_info_t> info,
    int val,
  ) {
    return _snd_seq_client_info_set_error_bounce(
      info,
      val,
    );
  }

  late final _snd_seq_client_info_set_error_bouncePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_seq_client_info_t>,
              ffi.Int)>>('snd_seq_client_info_set_error_bounce');
  late final _snd_seq_client_info_set_error_bounce =
      _snd_seq_client_info_set_error_bouncePtr
          .asFunction<void Function(ffi.Pointer<snd_seq_client_info_t>, int)>();

  void snd_seq_client_info_set_event_filter(
    ffi.Pointer<snd_seq_client_info_t> info,
    ffi.Pointer<ffi.UnsignedChar> filter,
  ) {
    return _snd_seq_client_info_set_event_filter(
      info,
      filter,
    );
  }

  late final _snd_seq_client_info_set_event_filterPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<snd_seq_client_info_t>,
                  ffi.Pointer<ffi.UnsignedChar>)>>(
      'snd_seq_client_info_set_event_filter');
  late final _snd_seq_client_info_set_event_filter =
      _snd_seq_client_info_set_event_filterPtr.asFunction<
          void Function(ffi.Pointer<snd_seq_client_info_t>,
              ffi.Pointer<ffi.UnsignedChar>)>();

  void snd_seq_client_info_event_filter_clear(
    ffi.Pointer<snd_seq_client_info_t> info,
  ) {
    return _snd_seq_client_info_event_filter_clear(
      info,
    );
  }

  late final _snd_seq_client_info_event_filter_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<snd_seq_client_info_t>)>>(
      'snd_seq_client_info_event_filter_clear');
  late final _snd_seq_client_info_event_filter_clear =
      _snd_seq_client_info_event_filter_clearPtr
          .asFunction<void Function(ffi.Pointer<snd_seq_client_info_t>)>();

  void snd_seq_client_info_event_filter_add(
    ffi.Pointer<snd_seq_client_info_t> info,
    int event_type,
  ) {
    return _snd_seq_client_info_event_filter_add(
      info,
      event_type,
    );
  }

  late final _snd_seq_client_info_event_filter_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_seq_client_info_t>,
              ffi.Int)>>('snd_seq_client_info_event_filter_add');
  late final _snd_seq_client_info_event_filter_add =
      _snd_seq_client_info_event_filter_addPtr
          .asFunction<void Function(ffi.Pointer<snd_seq_client_info_t>, int)>();

  void snd_seq_client_info_event_filter_del(
    ffi.Pointer<snd_seq_client_info_t> info,
    int event_type,
  ) {
    return _snd_seq_client_info_event_filter_del(
      info,
      event_type,
    );
  }

  late final _snd_seq_client_info_event_filter_delPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_seq_client_info_t>,
              ffi.Int)>>('snd_seq_client_info_event_filter_del');
  late final _snd_seq_client_info_event_filter_del =
      _snd_seq_client_info_event_filter_delPtr
          .asFunction<void Function(ffi.Pointer<snd_seq_client_info_t>, int)>();

  int snd_seq_client_info_event_filter_check(
    ffi.Pointer<snd_seq_client_info_t> info,
    int event_type,
  ) {
    return _snd_seq_client_info_event_filter_check(
      info,
      event_type,
    );
  }

  late final _snd_seq_client_info_event_filter_checkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_seq_client_info_t>,
              ffi.Int)>>('snd_seq_client_info_event_filter_check');
  late final _snd_seq_client_info_event_filter_check =
      _snd_seq_client_info_event_filter_checkPtr
          .asFunction<int Function(ffi.Pointer<snd_seq_client_info_t>, int)>();

  int snd_seq_get_client_info(
    ffi.Pointer<snd_seq_t> handle,
    ffi.Pointer<snd_seq_client_info_t> info,
  ) {
    return _snd_seq_get_client_info(
      handle,
      info,
    );
  }

  late final _snd_seq_get_client_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_seq_t>,
              ffi.Pointer<snd_seq_client_info_t>)>>('snd_seq_get_client_info');
  late final _snd_seq_get_client_info = _snd_seq_get_client_infoPtr.asFunction<
      int Function(
          ffi.Pointer<snd_seq_t>, ffi.Pointer<snd_seq_client_info_t>)>();

  int snd_seq_get_any_client_info(
    ffi.Pointer<snd_seq_t> handle,
    int client,
    ffi.Pointer<snd_seq_client_info_t> info,
  ) {
    return _snd_seq_get_any_client_info(
      handle,
      client,
      info,
    );
  }

  late final _snd_seq_get_any_client_infoPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_seq_t>, ffi.Int,
                  ffi.Pointer<snd_seq_client_info_t>)>>(
      'snd_seq_get_any_client_info');
  late final _snd_seq_get_any_client_info =
      _snd_seq_get_any_client_infoPtr.asFunction<
          int Function(ffi.Pointer<snd_seq_t>, int,
              ffi.Pointer<snd_seq_client_info_t>)>();

  int snd_seq_set_client_info(
    ffi.Pointer<snd_seq_t> handle,
    ffi.Pointer<snd_seq_client_info_t> info,
  ) {
    return _snd_seq_set_client_info(
      handle,
      info,
    );
  }

  late final _snd_seq_set_client_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_seq_t>,
              ffi.Pointer<snd_seq_client_info_t>)>>('snd_seq_set_client_info');
  late final _snd_seq_set_client_info = _snd_seq_set_client_infoPtr.asFunction<
      int Function(
          ffi.Pointer<snd_seq_t>, ffi.Pointer<snd_seq_client_info_t>)>();

  int snd_seq_query_next_client(
    ffi.Pointer<snd_seq_t> handle,
    ffi.Pointer<snd_seq_client_info_t> info,
  ) {
    return _snd_seq_query_next_client(
      handle,
      info,
    );
  }

  late final _snd_seq_query_next_clientPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<snd_seq_t>, ffi.Pointer<snd_seq_client_info_t>)>>(
      'snd_seq_query_next_client');
  late final _snd_seq_query_next_client =
      _snd_seq_query_next_clientPtr.asFunction<
          int Function(
              ffi.Pointer<snd_seq_t>, ffi.Pointer<snd_seq_client_info_t>)>();

  int snd_seq_client_pool_sizeof() {
    return _snd_seq_client_pool_sizeof();
  }

  late final _snd_seq_client_pool_sizeofPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>(
          'snd_seq_client_pool_sizeof');
  late final _snd_seq_client_pool_sizeof =
      _snd_seq_client_pool_sizeofPtr.asFunction<int Function()>();

  int snd_seq_client_pool_malloc(
    ffi.Pointer<ffi.Pointer<snd_seq_client_pool_t>> ptr,
  ) {
    return _snd_seq_client_pool_malloc(
      ptr,
    );
  }

  late final _snd_seq_client_pool_mallocPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Pointer<snd_seq_client_pool_t>>)>>(
      'snd_seq_client_pool_malloc');
  late final _snd_seq_client_pool_malloc =
      _snd_seq_client_pool_mallocPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<snd_seq_client_pool_t>>)>();

  void snd_seq_client_pool_free(
    ffi.Pointer<snd_seq_client_pool_t> ptr,
  ) {
    return _snd_seq_client_pool_free(
      ptr,
    );
  }

  late final _snd_seq_client_pool_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<snd_seq_client_pool_t>)>>('snd_seq_client_pool_free');
  late final _snd_seq_client_pool_free = _snd_seq_client_pool_freePtr
      .asFunction<void Function(ffi.Pointer<snd_seq_client_pool_t>)>();

  void snd_seq_client_pool_copy(
    ffi.Pointer<snd_seq_client_pool_t> dst,
    ffi.Pointer<snd_seq_client_pool_t> src,
  ) {
    return _snd_seq_client_pool_copy(
      dst,
      src,
    );
  }

  late final _snd_seq_client_pool_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_seq_client_pool_t>,
              ffi.Pointer<snd_seq_client_pool_t>)>>('snd_seq_client_pool_copy');
  late final _snd_seq_client_pool_copy =
      _snd_seq_client_pool_copyPtr.asFunction<
          void Function(ffi.Pointer<snd_seq_client_pool_t>,
              ffi.Pointer<snd_seq_client_pool_t>)>();

  int snd_seq_client_pool_get_client(
    ffi.Pointer<snd_seq_client_pool_t> info,
  ) {
    return _snd_seq_client_pool_get_client(
      info,
    );
  }

  late final _snd_seq_client_pool_get_clientPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_seq_client_pool_t>)>>(
      'snd_seq_client_pool_get_client');
  late final _snd_seq_client_pool_get_client =
      _snd_seq_client_pool_get_clientPtr
          .asFunction<int Function(ffi.Pointer<snd_seq_client_pool_t>)>();

  int snd_seq_client_pool_get_output_pool(
    ffi.Pointer<snd_seq_client_pool_t> info,
  ) {
    return _snd_seq_client_pool_get_output_pool(
      info,
    );
  }

  late final _snd_seq_client_pool_get_output_poolPtr = _lookup<
          ffi.NativeFunction<
              ffi.Size Function(ffi.Pointer<snd_seq_client_pool_t>)>>(
      'snd_seq_client_pool_get_output_pool');
  late final _snd_seq_client_pool_get_output_pool =
      _snd_seq_client_pool_get_output_poolPtr
          .asFunction<int Function(ffi.Pointer<snd_seq_client_pool_t>)>();

  int snd_seq_client_pool_get_input_pool(
    ffi.Pointer<snd_seq_client_pool_t> info,
  ) {
    return _snd_seq_client_pool_get_input_pool(
      info,
    );
  }

  late final _snd_seq_client_pool_get_input_poolPtr = _lookup<
          ffi.NativeFunction<
              ffi.Size Function(ffi.Pointer<snd_seq_client_pool_t>)>>(
      'snd_seq_client_pool_get_input_pool');
  late final _snd_seq_client_pool_get_input_pool =
      _snd_seq_client_pool_get_input_poolPtr
          .asFunction<int Function(ffi.Pointer<snd_seq_client_pool_t>)>();

  int snd_seq_client_pool_get_output_room(
    ffi.Pointer<snd_seq_client_pool_t> info,
  ) {
    return _snd_seq_client_pool_get_output_room(
      info,
    );
  }

  late final _snd_seq_client_pool_get_output_roomPtr = _lookup<
          ffi.NativeFunction<
              ffi.Size Function(ffi.Pointer<snd_seq_client_pool_t>)>>(
      'snd_seq_client_pool_get_output_room');
  late final _snd_seq_client_pool_get_output_room =
      _snd_seq_client_pool_get_output_roomPtr
          .asFunction<int Function(ffi.Pointer<snd_seq_client_pool_t>)>();

  int snd_seq_client_pool_get_output_free(
    ffi.Pointer<snd_seq_client_pool_t> info,
  ) {
    return _snd_seq_client_pool_get_output_free(
      info,
    );
  }

  late final _snd_seq_client_pool_get_output_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Size Function(ffi.Pointer<snd_seq_client_pool_t>)>>(
      'snd_seq_client_pool_get_output_free');
  late final _snd_seq_client_pool_get_output_free =
      _snd_seq_client_pool_get_output_freePtr
          .asFunction<int Function(ffi.Pointer<snd_seq_client_pool_t>)>();

  int snd_seq_client_pool_get_input_free(
    ffi.Pointer<snd_seq_client_pool_t> info,
  ) {
    return _snd_seq_client_pool_get_input_free(
      info,
    );
  }

  late final _snd_seq_client_pool_get_input_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Size Function(ffi.Pointer<snd_seq_client_pool_t>)>>(
      'snd_seq_client_pool_get_input_free');
  late final _snd_seq_client_pool_get_input_free =
      _snd_seq_client_pool_get_input_freePtr
          .asFunction<int Function(ffi.Pointer<snd_seq_client_pool_t>)>();

  void snd_seq_client_pool_set_output_pool(
    ffi.Pointer<snd_seq_client_pool_t> info,
    int size,
  ) {
    return _snd_seq_client_pool_set_output_pool(
      info,
      size,
    );
  }

  late final _snd_seq_client_pool_set_output_poolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_seq_client_pool_t>,
              ffi.Size)>>('snd_seq_client_pool_set_output_pool');
  late final _snd_seq_client_pool_set_output_pool =
      _snd_seq_client_pool_set_output_poolPtr
          .asFunction<void Function(ffi.Pointer<snd_seq_client_pool_t>, int)>();

  void snd_seq_client_pool_set_input_pool(
    ffi.Pointer<snd_seq_client_pool_t> info,
    int size,
  ) {
    return _snd_seq_client_pool_set_input_pool(
      info,
      size,
    );
  }

  late final _snd_seq_client_pool_set_input_poolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_seq_client_pool_t>,
              ffi.Size)>>('snd_seq_client_pool_set_input_pool');
  late final _snd_seq_client_pool_set_input_pool =
      _snd_seq_client_pool_set_input_poolPtr
          .asFunction<void Function(ffi.Pointer<snd_seq_client_pool_t>, int)>();

  void snd_seq_client_pool_set_output_room(
    ffi.Pointer<snd_seq_client_pool_t> info,
    int size,
  ) {
    return _snd_seq_client_pool_set_output_room(
      info,
      size,
    );
  }

  late final _snd_seq_client_pool_set_output_roomPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_seq_client_pool_t>,
              ffi.Size)>>('snd_seq_client_pool_set_output_room');
  late final _snd_seq_client_pool_set_output_room =
      _snd_seq_client_pool_set_output_roomPtr
          .asFunction<void Function(ffi.Pointer<snd_seq_client_pool_t>, int)>();

  int snd_seq_get_client_pool(
    ffi.Pointer<snd_seq_t> handle,
    ffi.Pointer<snd_seq_client_pool_t> info,
  ) {
    return _snd_seq_get_client_pool(
      handle,
      info,
    );
  }

  late final _snd_seq_get_client_poolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_seq_t>,
              ffi.Pointer<snd_seq_client_pool_t>)>>('snd_seq_get_client_pool');
  late final _snd_seq_get_client_pool = _snd_seq_get_client_poolPtr.asFunction<
      int Function(
          ffi.Pointer<snd_seq_t>, ffi.Pointer<snd_seq_client_pool_t>)>();

  int snd_seq_set_client_pool(
    ffi.Pointer<snd_seq_t> handle,
    ffi.Pointer<snd_seq_client_pool_t> info,
  ) {
    return _snd_seq_set_client_pool(
      handle,
      info,
    );
  }

  late final _snd_seq_set_client_poolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_seq_t>,
              ffi.Pointer<snd_seq_client_pool_t>)>>('snd_seq_set_client_pool');
  late final _snd_seq_set_client_pool = _snd_seq_set_client_poolPtr.asFunction<
      int Function(
          ffi.Pointer<snd_seq_t>, ffi.Pointer<snd_seq_client_pool_t>)>();

  int snd_seq_port_info_sizeof() {
    return _snd_seq_port_info_sizeof();
  }

  late final _snd_seq_port_info_sizeofPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>(
          'snd_seq_port_info_sizeof');
  late final _snd_seq_port_info_sizeof =
      _snd_seq_port_info_sizeofPtr.asFunction<int Function()>();

  int snd_seq_port_info_malloc(
    ffi.Pointer<ffi.Pointer<snd_seq_port_info_t>> ptr,
  ) {
    return _snd_seq_port_info_malloc(
      ptr,
    );
  }

  late final _snd_seq_port_info_mallocPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Pointer<snd_seq_port_info_t>>)>>(
      'snd_seq_port_info_malloc');
  late final _snd_seq_port_info_malloc =
      _snd_seq_port_info_mallocPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<snd_seq_port_info_t>>)>();

  void snd_seq_port_info_free(
    ffi.Pointer<snd_seq_port_info_t> ptr,
  ) {
    return _snd_seq_port_info_free(
      ptr,
    );
  }

  late final _snd_seq_port_info_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<snd_seq_port_info_t>)>>('snd_seq_port_info_free');
  late final _snd_seq_port_info_free = _snd_seq_port_info_freePtr
      .asFunction<void Function(ffi.Pointer<snd_seq_port_info_t>)>();

  void snd_seq_port_info_copy(
    ffi.Pointer<snd_seq_port_info_t> dst,
    ffi.Pointer<snd_seq_port_info_t> src,
  ) {
    return _snd_seq_port_info_copy(
      dst,
      src,
    );
  }

  late final _snd_seq_port_info_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_seq_port_info_t>,
              ffi.Pointer<snd_seq_port_info_t>)>>('snd_seq_port_info_copy');
  late final _snd_seq_port_info_copy = _snd_seq_port_info_copyPtr.asFunction<
      void Function(ffi.Pointer<snd_seq_port_info_t>,
          ffi.Pointer<snd_seq_port_info_t>)>();

  int snd_seq_port_info_get_client(
    ffi.Pointer<snd_seq_port_info_t> info,
  ) {
    return _snd_seq_port_info_get_client(
      info,
    );
  }

  late final _snd_seq_port_info_get_clientPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_seq_port_info_t>)>>(
      'snd_seq_port_info_get_client');
  late final _snd_seq_port_info_get_client = _snd_seq_port_info_get_clientPtr
      .asFunction<int Function(ffi.Pointer<snd_seq_port_info_t>)>();

  int snd_seq_port_info_get_port(
    ffi.Pointer<snd_seq_port_info_t> info,
  ) {
    return _snd_seq_port_info_get_port(
      info,
    );
  }

  late final _snd_seq_port_info_get_portPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_seq_port_info_t>)>>('snd_seq_port_info_get_port');
  late final _snd_seq_port_info_get_port = _snd_seq_port_info_get_portPtr
      .asFunction<int Function(ffi.Pointer<snd_seq_port_info_t>)>();

  ffi.Pointer<snd_seq_addr_t> snd_seq_port_info_get_addr(
    ffi.Pointer<snd_seq_port_info_t> info,
  ) {
    return _snd_seq_port_info_get_addr(
      info,
    );
  }

  late final _snd_seq_port_info_get_addrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<snd_seq_addr_t> Function(
              ffi.Pointer<snd_seq_port_info_t>)>>('snd_seq_port_info_get_addr');
  late final _snd_seq_port_info_get_addr =
      _snd_seq_port_info_get_addrPtr.asFunction<
          ffi.Pointer<snd_seq_addr_t> Function(
              ffi.Pointer<snd_seq_port_info_t>)>();

  ffi.Pointer<ffi.Char> snd_seq_port_info_get_name(
    ffi.Pointer<snd_seq_port_info_t> info,
  ) {
    return _snd_seq_port_info_get_name(
      info,
    );
  }

  late final _snd_seq_port_info_get_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<snd_seq_port_info_t>)>>('snd_seq_port_info_get_name');
  late final _snd_seq_port_info_get_name =
      _snd_seq_port_info_get_namePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<snd_seq_port_info_t>)>();

  int snd_seq_port_info_get_capability(
    ffi.Pointer<snd_seq_port_info_t> info,
  ) {
    return _snd_seq_port_info_get_capability(
      info,
    );
  }

  late final _snd_seq_port_info_get_capabilityPtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<snd_seq_port_info_t>)>>(
      'snd_seq_port_info_get_capability');
  late final _snd_seq_port_info_get_capability =
      _snd_seq_port_info_get_capabilityPtr
          .asFunction<int Function(ffi.Pointer<snd_seq_port_info_t>)>();

  int snd_seq_port_info_get_type(
    ffi.Pointer<snd_seq_port_info_t> info,
  ) {
    return _snd_seq_port_info_get_type(
      info,
    );
  }

  late final _snd_seq_port_info_get_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<snd_seq_port_info_t>)>>('snd_seq_port_info_get_type');
  late final _snd_seq_port_info_get_type = _snd_seq_port_info_get_typePtr
      .asFunction<int Function(ffi.Pointer<snd_seq_port_info_t>)>();

  int snd_seq_port_info_get_midi_channels(
    ffi.Pointer<snd_seq_port_info_t> info,
  ) {
    return _snd_seq_port_info_get_midi_channels(
      info,
    );
  }

  late final _snd_seq_port_info_get_midi_channelsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_seq_port_info_t>)>>(
      'snd_seq_port_info_get_midi_channels');
  late final _snd_seq_port_info_get_midi_channels =
      _snd_seq_port_info_get_midi_channelsPtr
          .asFunction<int Function(ffi.Pointer<snd_seq_port_info_t>)>();

  int snd_seq_port_info_get_midi_voices(
    ffi.Pointer<snd_seq_port_info_t> info,
  ) {
    return _snd_seq_port_info_get_midi_voices(
      info,
    );
  }

  late final _snd_seq_port_info_get_midi_voicesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_seq_port_info_t>)>>(
      'snd_seq_port_info_get_midi_voices');
  late final _snd_seq_port_info_get_midi_voices =
      _snd_seq_port_info_get_midi_voicesPtr
          .asFunction<int Function(ffi.Pointer<snd_seq_port_info_t>)>();

  int snd_seq_port_info_get_synth_voices(
    ffi.Pointer<snd_seq_port_info_t> info,
  ) {
    return _snd_seq_port_info_get_synth_voices(
      info,
    );
  }

  late final _snd_seq_port_info_get_synth_voicesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_seq_port_info_t>)>>(
      'snd_seq_port_info_get_synth_voices');
  late final _snd_seq_port_info_get_synth_voices =
      _snd_seq_port_info_get_synth_voicesPtr
          .asFunction<int Function(ffi.Pointer<snd_seq_port_info_t>)>();

  int snd_seq_port_info_get_read_use(
    ffi.Pointer<snd_seq_port_info_t> info,
  ) {
    return _snd_seq_port_info_get_read_use(
      info,
    );
  }

  late final _snd_seq_port_info_get_read_usePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_seq_port_info_t>)>>(
      'snd_seq_port_info_get_read_use');
  late final _snd_seq_port_info_get_read_use =
      _snd_seq_port_info_get_read_usePtr
          .asFunction<int Function(ffi.Pointer<snd_seq_port_info_t>)>();

  int snd_seq_port_info_get_write_use(
    ffi.Pointer<snd_seq_port_info_t> info,
  ) {
    return _snd_seq_port_info_get_write_use(
      info,
    );
  }

  late final _snd_seq_port_info_get_write_usePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_seq_port_info_t>)>>(
      'snd_seq_port_info_get_write_use');
  late final _snd_seq_port_info_get_write_use =
      _snd_seq_port_info_get_write_usePtr
          .asFunction<int Function(ffi.Pointer<snd_seq_port_info_t>)>();

  int snd_seq_port_info_get_port_specified(
    ffi.Pointer<snd_seq_port_info_t> info,
  ) {
    return _snd_seq_port_info_get_port_specified(
      info,
    );
  }

  late final _snd_seq_port_info_get_port_specifiedPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_seq_port_info_t>)>>(
      'snd_seq_port_info_get_port_specified');
  late final _snd_seq_port_info_get_port_specified =
      _snd_seq_port_info_get_port_specifiedPtr
          .asFunction<int Function(ffi.Pointer<snd_seq_port_info_t>)>();

  int snd_seq_port_info_get_timestamping(
    ffi.Pointer<snd_seq_port_info_t> info,
  ) {
    return _snd_seq_port_info_get_timestamping(
      info,
    );
  }

  late final _snd_seq_port_info_get_timestampingPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_seq_port_info_t>)>>(
      'snd_seq_port_info_get_timestamping');
  late final _snd_seq_port_info_get_timestamping =
      _snd_seq_port_info_get_timestampingPtr
          .asFunction<int Function(ffi.Pointer<snd_seq_port_info_t>)>();

  int snd_seq_port_info_get_timestamp_real(
    ffi.Pointer<snd_seq_port_info_t> info,
  ) {
    return _snd_seq_port_info_get_timestamp_real(
      info,
    );
  }

  late final _snd_seq_port_info_get_timestamp_realPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_seq_port_info_t>)>>(
      'snd_seq_port_info_get_timestamp_real');
  late final _snd_seq_port_info_get_timestamp_real =
      _snd_seq_port_info_get_timestamp_realPtr
          .asFunction<int Function(ffi.Pointer<snd_seq_port_info_t>)>();

  int snd_seq_port_info_get_timestamp_queue(
    ffi.Pointer<snd_seq_port_info_t> info,
  ) {
    return _snd_seq_port_info_get_timestamp_queue(
      info,
    );
  }

  late final _snd_seq_port_info_get_timestamp_queuePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_seq_port_info_t>)>>(
      'snd_seq_port_info_get_timestamp_queue');
  late final _snd_seq_port_info_get_timestamp_queue =
      _snd_seq_port_info_get_timestamp_queuePtr
          .asFunction<int Function(ffi.Pointer<snd_seq_port_info_t>)>();

  void snd_seq_port_info_set_client(
    ffi.Pointer<snd_seq_port_info_t> info,
    int client,
  ) {
    return _snd_seq_port_info_set_client(
      info,
      client,
    );
  }

  late final _snd_seq_port_info_set_clientPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_seq_port_info_t>,
              ffi.Int)>>('snd_seq_port_info_set_client');
  late final _snd_seq_port_info_set_client = _snd_seq_port_info_set_clientPtr
      .asFunction<void Function(ffi.Pointer<snd_seq_port_info_t>, int)>();

  void snd_seq_port_info_set_port(
    ffi.Pointer<snd_seq_port_info_t> info,
    int port,
  ) {
    return _snd_seq_port_info_set_port(
      info,
      port,
    );
  }

  late final _snd_seq_port_info_set_portPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_seq_port_info_t>,
              ffi.Int)>>('snd_seq_port_info_set_port');
  late final _snd_seq_port_info_set_port = _snd_seq_port_info_set_portPtr
      .asFunction<void Function(ffi.Pointer<snd_seq_port_info_t>, int)>();

  void snd_seq_port_info_set_addr(
    ffi.Pointer<snd_seq_port_info_t> info,
    ffi.Pointer<snd_seq_addr_t> addr,
  ) {
    return _snd_seq_port_info_set_addr(
      info,
      addr,
    );
  }

  late final _snd_seq_port_info_set_addrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_seq_port_info_t>,
              ffi.Pointer<snd_seq_addr_t>)>>('snd_seq_port_info_set_addr');
  late final _snd_seq_port_info_set_addr =
      _snd_seq_port_info_set_addrPtr.asFunction<
          void Function(
              ffi.Pointer<snd_seq_port_info_t>, ffi.Pointer<snd_seq_addr_t>)>();

  void snd_seq_port_info_set_name(
    ffi.Pointer<snd_seq_port_info_t> info,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _snd_seq_port_info_set_name(
      info,
      name,
    );
  }

  late final _snd_seq_port_info_set_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_seq_port_info_t>,
              ffi.Pointer<ffi.Char>)>>('snd_seq_port_info_set_name');
  late final _snd_seq_port_info_set_name =
      _snd_seq_port_info_set_namePtr.asFunction<
          void Function(
              ffi.Pointer<snd_seq_port_info_t>, ffi.Pointer<ffi.Char>)>();

  void snd_seq_port_info_set_capability(
    ffi.Pointer<snd_seq_port_info_t> info,
    int capability,
  ) {
    return _snd_seq_port_info_set_capability(
      info,
      capability,
    );
  }

  late final _snd_seq_port_info_set_capabilityPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_seq_port_info_t>,
              ffi.UnsignedInt)>>('snd_seq_port_info_set_capability');
  late final _snd_seq_port_info_set_capability =
      _snd_seq_port_info_set_capabilityPtr
          .asFunction<void Function(ffi.Pointer<snd_seq_port_info_t>, int)>();

  void snd_seq_port_info_set_type(
    ffi.Pointer<snd_seq_port_info_t> info,
    int type,
  ) {
    return _snd_seq_port_info_set_type(
      info,
      type,
    );
  }

  late final _snd_seq_port_info_set_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_seq_port_info_t>,
              ffi.UnsignedInt)>>('snd_seq_port_info_set_type');
  late final _snd_seq_port_info_set_type = _snd_seq_port_info_set_typePtr
      .asFunction<void Function(ffi.Pointer<snd_seq_port_info_t>, int)>();

  void snd_seq_port_info_set_midi_channels(
    ffi.Pointer<snd_seq_port_info_t> info,
    int channels,
  ) {
    return _snd_seq_port_info_set_midi_channels(
      info,
      channels,
    );
  }

  late final _snd_seq_port_info_set_midi_channelsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_seq_port_info_t>,
              ffi.Int)>>('snd_seq_port_info_set_midi_channels');
  late final _snd_seq_port_info_set_midi_channels =
      _snd_seq_port_info_set_midi_channelsPtr
          .asFunction<void Function(ffi.Pointer<snd_seq_port_info_t>, int)>();

  void snd_seq_port_info_set_midi_voices(
    ffi.Pointer<snd_seq_port_info_t> info,
    int voices,
  ) {
    return _snd_seq_port_info_set_midi_voices(
      info,
      voices,
    );
  }

  late final _snd_seq_port_info_set_midi_voicesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_seq_port_info_t>,
              ffi.Int)>>('snd_seq_port_info_set_midi_voices');
  late final _snd_seq_port_info_set_midi_voices =
      _snd_seq_port_info_set_midi_voicesPtr
          .asFunction<void Function(ffi.Pointer<snd_seq_port_info_t>, int)>();

  void snd_seq_port_info_set_synth_voices(
    ffi.Pointer<snd_seq_port_info_t> info,
    int voices,
  ) {
    return _snd_seq_port_info_set_synth_voices(
      info,
      voices,
    );
  }

  late final _snd_seq_port_info_set_synth_voicesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_seq_port_info_t>,
              ffi.Int)>>('snd_seq_port_info_set_synth_voices');
  late final _snd_seq_port_info_set_synth_voices =
      _snd_seq_port_info_set_synth_voicesPtr
          .asFunction<void Function(ffi.Pointer<snd_seq_port_info_t>, int)>();

  void snd_seq_port_info_set_port_specified(
    ffi.Pointer<snd_seq_port_info_t> info,
    int val,
  ) {
    return _snd_seq_port_info_set_port_specified(
      info,
      val,
    );
  }

  late final _snd_seq_port_info_set_port_specifiedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_seq_port_info_t>,
              ffi.Int)>>('snd_seq_port_info_set_port_specified');
  late final _snd_seq_port_info_set_port_specified =
      _snd_seq_port_info_set_port_specifiedPtr
          .asFunction<void Function(ffi.Pointer<snd_seq_port_info_t>, int)>();

  void snd_seq_port_info_set_timestamping(
    ffi.Pointer<snd_seq_port_info_t> info,
    int enable,
  ) {
    return _snd_seq_port_info_set_timestamping(
      info,
      enable,
    );
  }

  late final _snd_seq_port_info_set_timestampingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_seq_port_info_t>,
              ffi.Int)>>('snd_seq_port_info_set_timestamping');
  late final _snd_seq_port_info_set_timestamping =
      _snd_seq_port_info_set_timestampingPtr
          .asFunction<void Function(ffi.Pointer<snd_seq_port_info_t>, int)>();

  void snd_seq_port_info_set_timestamp_real(
    ffi.Pointer<snd_seq_port_info_t> info,
    int realtime,
  ) {
    return _snd_seq_port_info_set_timestamp_real(
      info,
      realtime,
    );
  }

  late final _snd_seq_port_info_set_timestamp_realPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_seq_port_info_t>,
              ffi.Int)>>('snd_seq_port_info_set_timestamp_real');
  late final _snd_seq_port_info_set_timestamp_real =
      _snd_seq_port_info_set_timestamp_realPtr
          .asFunction<void Function(ffi.Pointer<snd_seq_port_info_t>, int)>();

  void snd_seq_port_info_set_timestamp_queue(
    ffi.Pointer<snd_seq_port_info_t> info,
    int queue,
  ) {
    return _snd_seq_port_info_set_timestamp_queue(
      info,
      queue,
    );
  }

  late final _snd_seq_port_info_set_timestamp_queuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_seq_port_info_t>,
              ffi.Int)>>('snd_seq_port_info_set_timestamp_queue');
  late final _snd_seq_port_info_set_timestamp_queue =
      _snd_seq_port_info_set_timestamp_queuePtr
          .asFunction<void Function(ffi.Pointer<snd_seq_port_info_t>, int)>();

  int snd_seq_create_port(
    ffi.Pointer<snd_seq_t> handle,
    ffi.Pointer<snd_seq_port_info_t> info,
  ) {
    return _snd_seq_create_port(
      handle,
      info,
    );
  }

  late final _snd_seq_create_portPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_seq_t>,
              ffi.Pointer<snd_seq_port_info_t>)>>('snd_seq_create_port');
  late final _snd_seq_create_port = _snd_seq_create_portPtr.asFunction<
      int Function(ffi.Pointer<snd_seq_t>, ffi.Pointer<snd_seq_port_info_t>)>();

  int snd_seq_delete_port(
    ffi.Pointer<snd_seq_t> handle,
    int port,
  ) {
    return _snd_seq_delete_port(
      handle,
      port,
    );
  }

  late final _snd_seq_delete_portPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_seq_t>, ffi.Int)>>('snd_seq_delete_port');
  late final _snd_seq_delete_port = _snd_seq_delete_portPtr
      .asFunction<int Function(ffi.Pointer<snd_seq_t>, int)>();

  int snd_seq_get_port_info(
    ffi.Pointer<snd_seq_t> handle,
    int port,
    ffi.Pointer<snd_seq_port_info_t> info,
  ) {
    return _snd_seq_get_port_info(
      handle,
      port,
      info,
    );
  }

  late final _snd_seq_get_port_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_seq_t>, ffi.Int,
              ffi.Pointer<snd_seq_port_info_t>)>>('snd_seq_get_port_info');
  late final _snd_seq_get_port_info = _snd_seq_get_port_infoPtr.asFunction<
      int Function(
          ffi.Pointer<snd_seq_t>, int, ffi.Pointer<snd_seq_port_info_t>)>();

  int snd_seq_get_any_port_info(
    ffi.Pointer<snd_seq_t> handle,
    int client,
    int port,
    ffi.Pointer<snd_seq_port_info_t> info,
  ) {
    return _snd_seq_get_any_port_info(
      handle,
      client,
      port,
      info,
    );
  }

  late final _snd_seq_get_any_port_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_seq_t>, ffi.Int, ffi.Int,
              ffi.Pointer<snd_seq_port_info_t>)>>('snd_seq_get_any_port_info');
  late final _snd_seq_get_any_port_info =
      _snd_seq_get_any_port_infoPtr.asFunction<
          int Function(ffi.Pointer<snd_seq_t>, int, int,
              ffi.Pointer<snd_seq_port_info_t>)>();

  int snd_seq_set_port_info(
    ffi.Pointer<snd_seq_t> handle,
    int port,
    ffi.Pointer<snd_seq_port_info_t> info,
  ) {
    return _snd_seq_set_port_info(
      handle,
      port,
      info,
    );
  }

  late final _snd_seq_set_port_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_seq_t>, ffi.Int,
              ffi.Pointer<snd_seq_port_info_t>)>>('snd_seq_set_port_info');
  late final _snd_seq_set_port_info = _snd_seq_set_port_infoPtr.asFunction<
      int Function(
          ffi.Pointer<snd_seq_t>, int, ffi.Pointer<snd_seq_port_info_t>)>();

  int snd_seq_query_next_port(
    ffi.Pointer<snd_seq_t> handle,
    ffi.Pointer<snd_seq_port_info_t> info,
  ) {
    return _snd_seq_query_next_port(
      handle,
      info,
    );
  }

  late final _snd_seq_query_next_portPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_seq_t>,
              ffi.Pointer<snd_seq_port_info_t>)>>('snd_seq_query_next_port');
  late final _snd_seq_query_next_port = _snd_seq_query_next_portPtr.asFunction<
      int Function(ffi.Pointer<snd_seq_t>, ffi.Pointer<snd_seq_port_info_t>)>();

  int snd_seq_port_subscribe_sizeof() {
    return _snd_seq_port_subscribe_sizeof();
  }

  late final _snd_seq_port_subscribe_sizeofPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>(
          'snd_seq_port_subscribe_sizeof');
  late final _snd_seq_port_subscribe_sizeof =
      _snd_seq_port_subscribe_sizeofPtr.asFunction<int Function()>();

  int snd_seq_port_subscribe_malloc(
    ffi.Pointer<ffi.Pointer<snd_seq_port_subscribe_t>> ptr,
  ) {
    return _snd_seq_port_subscribe_malloc(
      ptr,
    );
  }

  late final _snd_seq_port_subscribe_mallocPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Pointer<snd_seq_port_subscribe_t>>)>>(
      'snd_seq_port_subscribe_malloc');
  late final _snd_seq_port_subscribe_malloc =
      _snd_seq_port_subscribe_mallocPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<snd_seq_port_subscribe_t>>)>();

  void snd_seq_port_subscribe_free(
    ffi.Pointer<snd_seq_port_subscribe_t> ptr,
  ) {
    return _snd_seq_port_subscribe_free(
      ptr,
    );
  }

  late final _snd_seq_port_subscribe_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<snd_seq_port_subscribe_t>)>>(
      'snd_seq_port_subscribe_free');
  late final _snd_seq_port_subscribe_free = _snd_seq_port_subscribe_freePtr
      .asFunction<void Function(ffi.Pointer<snd_seq_port_subscribe_t>)>();

  void snd_seq_port_subscribe_copy(
    ffi.Pointer<snd_seq_port_subscribe_t> dst,
    ffi.Pointer<snd_seq_port_subscribe_t> src,
  ) {
    return _snd_seq_port_subscribe_copy(
      dst,
      src,
    );
  }

  late final _snd_seq_port_subscribe_copyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<snd_seq_port_subscribe_t>,
                  ffi.Pointer<snd_seq_port_subscribe_t>)>>(
      'snd_seq_port_subscribe_copy');
  late final _snd_seq_port_subscribe_copy =
      _snd_seq_port_subscribe_copyPtr.asFunction<
          void Function(ffi.Pointer<snd_seq_port_subscribe_t>,
              ffi.Pointer<snd_seq_port_subscribe_t>)>();

  ffi.Pointer<snd_seq_addr_t> snd_seq_port_subscribe_get_sender(
    ffi.Pointer<snd_seq_port_subscribe_t> info,
  ) {
    return _snd_seq_port_subscribe_get_sender(
      info,
    );
  }

  late final _snd_seq_port_subscribe_get_senderPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<snd_seq_addr_t> Function(
                  ffi.Pointer<snd_seq_port_subscribe_t>)>>(
      'snd_seq_port_subscribe_get_sender');
  late final _snd_seq_port_subscribe_get_sender =
      _snd_seq_port_subscribe_get_senderPtr.asFunction<
          ffi.Pointer<snd_seq_addr_t> Function(
              ffi.Pointer<snd_seq_port_subscribe_t>)>();

  ffi.Pointer<snd_seq_addr_t> snd_seq_port_subscribe_get_dest(
    ffi.Pointer<snd_seq_port_subscribe_t> info,
  ) {
    return _snd_seq_port_subscribe_get_dest(
      info,
    );
  }

  late final _snd_seq_port_subscribe_get_destPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<snd_seq_addr_t> Function(
                  ffi.Pointer<snd_seq_port_subscribe_t>)>>(
      'snd_seq_port_subscribe_get_dest');
  late final _snd_seq_port_subscribe_get_dest =
      _snd_seq_port_subscribe_get_destPtr.asFunction<
          ffi.Pointer<snd_seq_addr_t> Function(
              ffi.Pointer<snd_seq_port_subscribe_t>)>();

  int snd_seq_port_subscribe_get_queue(
    ffi.Pointer<snd_seq_port_subscribe_t> info,
  ) {
    return _snd_seq_port_subscribe_get_queue(
      info,
    );
  }

  late final _snd_seq_port_subscribe_get_queuePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_seq_port_subscribe_t>)>>(
      'snd_seq_port_subscribe_get_queue');
  late final _snd_seq_port_subscribe_get_queue =
      _snd_seq_port_subscribe_get_queuePtr
          .asFunction<int Function(ffi.Pointer<snd_seq_port_subscribe_t>)>();

  int snd_seq_port_subscribe_get_exclusive(
    ffi.Pointer<snd_seq_port_subscribe_t> info,
  ) {
    return _snd_seq_port_subscribe_get_exclusive(
      info,
    );
  }

  late final _snd_seq_port_subscribe_get_exclusivePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_seq_port_subscribe_t>)>>(
      'snd_seq_port_subscribe_get_exclusive');
  late final _snd_seq_port_subscribe_get_exclusive =
      _snd_seq_port_subscribe_get_exclusivePtr
          .asFunction<int Function(ffi.Pointer<snd_seq_port_subscribe_t>)>();

  int snd_seq_port_subscribe_get_time_update(
    ffi.Pointer<snd_seq_port_subscribe_t> info,
  ) {
    return _snd_seq_port_subscribe_get_time_update(
      info,
    );
  }

  late final _snd_seq_port_subscribe_get_time_updatePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_seq_port_subscribe_t>)>>(
      'snd_seq_port_subscribe_get_time_update');
  late final _snd_seq_port_subscribe_get_time_update =
      _snd_seq_port_subscribe_get_time_updatePtr
          .asFunction<int Function(ffi.Pointer<snd_seq_port_subscribe_t>)>();

  int snd_seq_port_subscribe_get_time_real(
    ffi.Pointer<snd_seq_port_subscribe_t> info,
  ) {
    return _snd_seq_port_subscribe_get_time_real(
      info,
    );
  }

  late final _snd_seq_port_subscribe_get_time_realPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_seq_port_subscribe_t>)>>(
      'snd_seq_port_subscribe_get_time_real');
  late final _snd_seq_port_subscribe_get_time_real =
      _snd_seq_port_subscribe_get_time_realPtr
          .asFunction<int Function(ffi.Pointer<snd_seq_port_subscribe_t>)>();

  void snd_seq_port_subscribe_set_sender(
    ffi.Pointer<snd_seq_port_subscribe_t> info,
    ffi.Pointer<snd_seq_addr_t> addr,
  ) {
    return _snd_seq_port_subscribe_set_sender(
      info,
      addr,
    );
  }

  late final _snd_seq_port_subscribe_set_senderPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<snd_seq_port_subscribe_t>,
                  ffi.Pointer<snd_seq_addr_t>)>>(
      'snd_seq_port_subscribe_set_sender');
  late final _snd_seq_port_subscribe_set_sender =
      _snd_seq_port_subscribe_set_senderPtr.asFunction<
          void Function(ffi.Pointer<snd_seq_port_subscribe_t>,
              ffi.Pointer<snd_seq_addr_t>)>();

  void snd_seq_port_subscribe_set_dest(
    ffi.Pointer<snd_seq_port_subscribe_t> info,
    ffi.Pointer<snd_seq_addr_t> addr,
  ) {
    return _snd_seq_port_subscribe_set_dest(
      info,
      addr,
    );
  }

  late final _snd_seq_port_subscribe_set_destPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_seq_port_subscribe_t>,
              ffi.Pointer<snd_seq_addr_t>)>>('snd_seq_port_subscribe_set_dest');
  late final _snd_seq_port_subscribe_set_dest =
      _snd_seq_port_subscribe_set_destPtr.asFunction<
          void Function(ffi.Pointer<snd_seq_port_subscribe_t>,
              ffi.Pointer<snd_seq_addr_t>)>();

  void snd_seq_port_subscribe_set_queue(
    ffi.Pointer<snd_seq_port_subscribe_t> info,
    int q,
  ) {
    return _snd_seq_port_subscribe_set_queue(
      info,
      q,
    );
  }

  late final _snd_seq_port_subscribe_set_queuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_seq_port_subscribe_t>,
              ffi.Int)>>('snd_seq_port_subscribe_set_queue');
  late final _snd_seq_port_subscribe_set_queue =
      _snd_seq_port_subscribe_set_queuePtr.asFunction<
          void Function(ffi.Pointer<snd_seq_port_subscribe_t>, int)>();

  void snd_seq_port_subscribe_set_exclusive(
    ffi.Pointer<snd_seq_port_subscribe_t> info,
    int val,
  ) {
    return _snd_seq_port_subscribe_set_exclusive(
      info,
      val,
    );
  }

  late final _snd_seq_port_subscribe_set_exclusivePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_seq_port_subscribe_t>,
              ffi.Int)>>('snd_seq_port_subscribe_set_exclusive');
  late final _snd_seq_port_subscribe_set_exclusive =
      _snd_seq_port_subscribe_set_exclusivePtr.asFunction<
          void Function(ffi.Pointer<snd_seq_port_subscribe_t>, int)>();

  void snd_seq_port_subscribe_set_time_update(
    ffi.Pointer<snd_seq_port_subscribe_t> info,
    int val,
  ) {
    return _snd_seq_port_subscribe_set_time_update(
      info,
      val,
    );
  }

  late final _snd_seq_port_subscribe_set_time_updatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_seq_port_subscribe_t>,
              ffi.Int)>>('snd_seq_port_subscribe_set_time_update');
  late final _snd_seq_port_subscribe_set_time_update =
      _snd_seq_port_subscribe_set_time_updatePtr.asFunction<
          void Function(ffi.Pointer<snd_seq_port_subscribe_t>, int)>();

  void snd_seq_port_subscribe_set_time_real(
    ffi.Pointer<snd_seq_port_subscribe_t> info,
    int val,
  ) {
    return _snd_seq_port_subscribe_set_time_real(
      info,
      val,
    );
  }

  late final _snd_seq_port_subscribe_set_time_realPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_seq_port_subscribe_t>,
              ffi.Int)>>('snd_seq_port_subscribe_set_time_real');
  late final _snd_seq_port_subscribe_set_time_real =
      _snd_seq_port_subscribe_set_time_realPtr.asFunction<
          void Function(ffi.Pointer<snd_seq_port_subscribe_t>, int)>();

  int snd_seq_get_port_subscription(
    ffi.Pointer<snd_seq_t> handle,
    ffi.Pointer<snd_seq_port_subscribe_t> sub,
  ) {
    return _snd_seq_get_port_subscription(
      handle,
      sub,
    );
  }

  late final _snd_seq_get_port_subscriptionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_seq_t>,
                  ffi.Pointer<snd_seq_port_subscribe_t>)>>(
      'snd_seq_get_port_subscription');
  late final _snd_seq_get_port_subscription =
      _snd_seq_get_port_subscriptionPtr.asFunction<
          int Function(
              ffi.Pointer<snd_seq_t>, ffi.Pointer<snd_seq_port_subscribe_t>)>();

  int snd_seq_subscribe_port(
    ffi.Pointer<snd_seq_t> handle,
    ffi.Pointer<snd_seq_port_subscribe_t> sub,
  ) {
    return _snd_seq_subscribe_port(
      handle,
      sub,
    );
  }

  late final _snd_seq_subscribe_portPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_seq_t>,
                  ffi.Pointer<snd_seq_port_subscribe_t>)>>(
      'snd_seq_subscribe_port');
  late final _snd_seq_subscribe_port = _snd_seq_subscribe_portPtr.asFunction<
      int Function(
          ffi.Pointer<snd_seq_t>, ffi.Pointer<snd_seq_port_subscribe_t>)>();

  int snd_seq_unsubscribe_port(
    ffi.Pointer<snd_seq_t> handle,
    ffi.Pointer<snd_seq_port_subscribe_t> sub,
  ) {
    return _snd_seq_unsubscribe_port(
      handle,
      sub,
    );
  }

  late final _snd_seq_unsubscribe_portPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_seq_t>,
                  ffi.Pointer<snd_seq_port_subscribe_t>)>>(
      'snd_seq_unsubscribe_port');
  late final _snd_seq_unsubscribe_port =
      _snd_seq_unsubscribe_portPtr.asFunction<
          int Function(
              ffi.Pointer<snd_seq_t>, ffi.Pointer<snd_seq_port_subscribe_t>)>();

  int snd_seq_query_subscribe_sizeof() {
    return _snd_seq_query_subscribe_sizeof();
  }

  late final _snd_seq_query_subscribe_sizeofPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>(
          'snd_seq_query_subscribe_sizeof');
  late final _snd_seq_query_subscribe_sizeof =
      _snd_seq_query_subscribe_sizeofPtr.asFunction<int Function()>();

  int snd_seq_query_subscribe_malloc(
    ffi.Pointer<ffi.Pointer<snd_seq_query_subscribe_t>> ptr,
  ) {
    return _snd_seq_query_subscribe_malloc(
      ptr,
    );
  }

  late final _snd_seq_query_subscribe_mallocPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Pointer<snd_seq_query_subscribe_t>>)>>(
      'snd_seq_query_subscribe_malloc');
  late final _snd_seq_query_subscribe_malloc =
      _snd_seq_query_subscribe_mallocPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<snd_seq_query_subscribe_t>>)>();

  void snd_seq_query_subscribe_free(
    ffi.Pointer<snd_seq_query_subscribe_t> ptr,
  ) {
    return _snd_seq_query_subscribe_free(
      ptr,
    );
  }

  late final _snd_seq_query_subscribe_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<snd_seq_query_subscribe_t>)>>(
      'snd_seq_query_subscribe_free');
  late final _snd_seq_query_subscribe_free = _snd_seq_query_subscribe_freePtr
      .asFunction<void Function(ffi.Pointer<snd_seq_query_subscribe_t>)>();

  void snd_seq_query_subscribe_copy(
    ffi.Pointer<snd_seq_query_subscribe_t> dst,
    ffi.Pointer<snd_seq_query_subscribe_t> src,
  ) {
    return _snd_seq_query_subscribe_copy(
      dst,
      src,
    );
  }

  late final _snd_seq_query_subscribe_copyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<snd_seq_query_subscribe_t>,
                  ffi.Pointer<snd_seq_query_subscribe_t>)>>(
      'snd_seq_query_subscribe_copy');
  late final _snd_seq_query_subscribe_copy =
      _snd_seq_query_subscribe_copyPtr.asFunction<
          void Function(ffi.Pointer<snd_seq_query_subscribe_t>,
              ffi.Pointer<snd_seq_query_subscribe_t>)>();

  int snd_seq_query_subscribe_get_client(
    ffi.Pointer<snd_seq_query_subscribe_t> info,
  ) {
    return _snd_seq_query_subscribe_get_client(
      info,
    );
  }

  late final _snd_seq_query_subscribe_get_clientPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_seq_query_subscribe_t>)>>(
      'snd_seq_query_subscribe_get_client');
  late final _snd_seq_query_subscribe_get_client =
      _snd_seq_query_subscribe_get_clientPtr
          .asFunction<int Function(ffi.Pointer<snd_seq_query_subscribe_t>)>();

  int snd_seq_query_subscribe_get_port(
    ffi.Pointer<snd_seq_query_subscribe_t> info,
  ) {
    return _snd_seq_query_subscribe_get_port(
      info,
    );
  }

  late final _snd_seq_query_subscribe_get_portPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_seq_query_subscribe_t>)>>(
      'snd_seq_query_subscribe_get_port');
  late final _snd_seq_query_subscribe_get_port =
      _snd_seq_query_subscribe_get_portPtr
          .asFunction<int Function(ffi.Pointer<snd_seq_query_subscribe_t>)>();

  ffi.Pointer<snd_seq_addr_t> snd_seq_query_subscribe_get_root(
    ffi.Pointer<snd_seq_query_subscribe_t> info,
  ) {
    return _snd_seq_query_subscribe_get_root(
      info,
    );
  }

  late final _snd_seq_query_subscribe_get_rootPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<snd_seq_addr_t> Function(
                  ffi.Pointer<snd_seq_query_subscribe_t>)>>(
      'snd_seq_query_subscribe_get_root');
  late final _snd_seq_query_subscribe_get_root =
      _snd_seq_query_subscribe_get_rootPtr.asFunction<
          ffi.Pointer<snd_seq_addr_t> Function(
              ffi.Pointer<snd_seq_query_subscribe_t>)>();

  int snd_seq_query_subscribe_get_type(
    ffi.Pointer<snd_seq_query_subscribe_t> info,
  ) {
    return _snd_seq_query_subscribe_get_type(
      info,
    );
  }

  late final _snd_seq_query_subscribe_get_typePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<snd_seq_query_subscribe_t>)>>(
      'snd_seq_query_subscribe_get_type');
  late final _snd_seq_query_subscribe_get_type =
      _snd_seq_query_subscribe_get_typePtr
          .asFunction<int Function(ffi.Pointer<snd_seq_query_subscribe_t>)>();

  int snd_seq_query_subscribe_get_index(
    ffi.Pointer<snd_seq_query_subscribe_t> info,
  ) {
    return _snd_seq_query_subscribe_get_index(
      info,
    );
  }

  late final _snd_seq_query_subscribe_get_indexPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_seq_query_subscribe_t>)>>(
      'snd_seq_query_subscribe_get_index');
  late final _snd_seq_query_subscribe_get_index =
      _snd_seq_query_subscribe_get_indexPtr
          .asFunction<int Function(ffi.Pointer<snd_seq_query_subscribe_t>)>();

  int snd_seq_query_subscribe_get_num_subs(
    ffi.Pointer<snd_seq_query_subscribe_t> info,
  ) {
    return _snd_seq_query_subscribe_get_num_subs(
      info,
    );
  }

  late final _snd_seq_query_subscribe_get_num_subsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_seq_query_subscribe_t>)>>(
      'snd_seq_query_subscribe_get_num_subs');
  late final _snd_seq_query_subscribe_get_num_subs =
      _snd_seq_query_subscribe_get_num_subsPtr
          .asFunction<int Function(ffi.Pointer<snd_seq_query_subscribe_t>)>();

  ffi.Pointer<snd_seq_addr_t> snd_seq_query_subscribe_get_addr(
    ffi.Pointer<snd_seq_query_subscribe_t> info,
  ) {
    return _snd_seq_query_subscribe_get_addr(
      info,
    );
  }

  late final _snd_seq_query_subscribe_get_addrPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<snd_seq_addr_t> Function(
                  ffi.Pointer<snd_seq_query_subscribe_t>)>>(
      'snd_seq_query_subscribe_get_addr');
  late final _snd_seq_query_subscribe_get_addr =
      _snd_seq_query_subscribe_get_addrPtr.asFunction<
          ffi.Pointer<snd_seq_addr_t> Function(
              ffi.Pointer<snd_seq_query_subscribe_t>)>();

  int snd_seq_query_subscribe_get_queue(
    ffi.Pointer<snd_seq_query_subscribe_t> info,
  ) {
    return _snd_seq_query_subscribe_get_queue(
      info,
    );
  }

  late final _snd_seq_query_subscribe_get_queuePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_seq_query_subscribe_t>)>>(
      'snd_seq_query_subscribe_get_queue');
  late final _snd_seq_query_subscribe_get_queue =
      _snd_seq_query_subscribe_get_queuePtr
          .asFunction<int Function(ffi.Pointer<snd_seq_query_subscribe_t>)>();

  int snd_seq_query_subscribe_get_exclusive(
    ffi.Pointer<snd_seq_query_subscribe_t> info,
  ) {
    return _snd_seq_query_subscribe_get_exclusive(
      info,
    );
  }

  late final _snd_seq_query_subscribe_get_exclusivePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_seq_query_subscribe_t>)>>(
      'snd_seq_query_subscribe_get_exclusive');
  late final _snd_seq_query_subscribe_get_exclusive =
      _snd_seq_query_subscribe_get_exclusivePtr
          .asFunction<int Function(ffi.Pointer<snd_seq_query_subscribe_t>)>();

  int snd_seq_query_subscribe_get_time_update(
    ffi.Pointer<snd_seq_query_subscribe_t> info,
  ) {
    return _snd_seq_query_subscribe_get_time_update(
      info,
    );
  }

  late final _snd_seq_query_subscribe_get_time_updatePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_seq_query_subscribe_t>)>>(
      'snd_seq_query_subscribe_get_time_update');
  late final _snd_seq_query_subscribe_get_time_update =
      _snd_seq_query_subscribe_get_time_updatePtr
          .asFunction<int Function(ffi.Pointer<snd_seq_query_subscribe_t>)>();

  int snd_seq_query_subscribe_get_time_real(
    ffi.Pointer<snd_seq_query_subscribe_t> info,
  ) {
    return _snd_seq_query_subscribe_get_time_real(
      info,
    );
  }

  late final _snd_seq_query_subscribe_get_time_realPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_seq_query_subscribe_t>)>>(
      'snd_seq_query_subscribe_get_time_real');
  late final _snd_seq_query_subscribe_get_time_real =
      _snd_seq_query_subscribe_get_time_realPtr
          .asFunction<int Function(ffi.Pointer<snd_seq_query_subscribe_t>)>();

  void snd_seq_query_subscribe_set_client(
    ffi.Pointer<snd_seq_query_subscribe_t> info,
    int client,
  ) {
    return _snd_seq_query_subscribe_set_client(
      info,
      client,
    );
  }

  late final _snd_seq_query_subscribe_set_clientPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_seq_query_subscribe_t>,
              ffi.Int)>>('snd_seq_query_subscribe_set_client');
  late final _snd_seq_query_subscribe_set_client =
      _snd_seq_query_subscribe_set_clientPtr.asFunction<
          void Function(ffi.Pointer<snd_seq_query_subscribe_t>, int)>();

  void snd_seq_query_subscribe_set_port(
    ffi.Pointer<snd_seq_query_subscribe_t> info,
    int port,
  ) {
    return _snd_seq_query_subscribe_set_port(
      info,
      port,
    );
  }

  late final _snd_seq_query_subscribe_set_portPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_seq_query_subscribe_t>,
              ffi.Int)>>('snd_seq_query_subscribe_set_port');
  late final _snd_seq_query_subscribe_set_port =
      _snd_seq_query_subscribe_set_portPtr.asFunction<
          void Function(ffi.Pointer<snd_seq_query_subscribe_t>, int)>();

  void snd_seq_query_subscribe_set_root(
    ffi.Pointer<snd_seq_query_subscribe_t> info,
    ffi.Pointer<snd_seq_addr_t> addr,
  ) {
    return _snd_seq_query_subscribe_set_root(
      info,
      addr,
    );
  }

  late final _snd_seq_query_subscribe_set_rootPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<snd_seq_query_subscribe_t>,
                  ffi.Pointer<snd_seq_addr_t>)>>(
      'snd_seq_query_subscribe_set_root');
  late final _snd_seq_query_subscribe_set_root =
      _snd_seq_query_subscribe_set_rootPtr.asFunction<
          void Function(ffi.Pointer<snd_seq_query_subscribe_t>,
              ffi.Pointer<snd_seq_addr_t>)>();

  void snd_seq_query_subscribe_set_type(
    ffi.Pointer<snd_seq_query_subscribe_t> info,
    int type,
  ) {
    return _snd_seq_query_subscribe_set_type(
      info,
      type,
    );
  }

  late final _snd_seq_query_subscribe_set_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_seq_query_subscribe_t>,
              ffi.Int32)>>('snd_seq_query_subscribe_set_type');
  late final _snd_seq_query_subscribe_set_type =
      _snd_seq_query_subscribe_set_typePtr.asFunction<
          void Function(ffi.Pointer<snd_seq_query_subscribe_t>, int)>();

  void snd_seq_query_subscribe_set_index(
    ffi.Pointer<snd_seq_query_subscribe_t> info,
    int _index,
  ) {
    return _snd_seq_query_subscribe_set_index(
      info,
      _index,
    );
  }

  late final _snd_seq_query_subscribe_set_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_seq_query_subscribe_t>,
              ffi.Int)>>('snd_seq_query_subscribe_set_index');
  late final _snd_seq_query_subscribe_set_index =
      _snd_seq_query_subscribe_set_indexPtr.asFunction<
          void Function(ffi.Pointer<snd_seq_query_subscribe_t>, int)>();

  int snd_seq_query_port_subscribers(
    ffi.Pointer<snd_seq_t> seq,
    ffi.Pointer<snd_seq_query_subscribe_t> subs,
  ) {
    return _snd_seq_query_port_subscribers(
      seq,
      subs,
    );
  }

  late final _snd_seq_query_port_subscribersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_seq_t>,
                  ffi.Pointer<snd_seq_query_subscribe_t>)>>(
      'snd_seq_query_port_subscribers');
  late final _snd_seq_query_port_subscribers =
      _snd_seq_query_port_subscribersPtr.asFunction<
          int Function(ffi.Pointer<snd_seq_t>,
              ffi.Pointer<snd_seq_query_subscribe_t>)>();

  int snd_seq_queue_info_sizeof() {
    return _snd_seq_queue_info_sizeof();
  }

  late final _snd_seq_queue_info_sizeofPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>(
          'snd_seq_queue_info_sizeof');
  late final _snd_seq_queue_info_sizeof =
      _snd_seq_queue_info_sizeofPtr.asFunction<int Function()>();

  int snd_seq_queue_info_malloc(
    ffi.Pointer<ffi.Pointer<snd_seq_queue_info_t>> ptr,
  ) {
    return _snd_seq_queue_info_malloc(
      ptr,
    );
  }

  late final _snd_seq_queue_info_mallocPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Pointer<snd_seq_queue_info_t>>)>>(
      'snd_seq_queue_info_malloc');
  late final _snd_seq_queue_info_malloc =
      _snd_seq_queue_info_mallocPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<snd_seq_queue_info_t>>)>();

  void snd_seq_queue_info_free(
    ffi.Pointer<snd_seq_queue_info_t> ptr,
  ) {
    return _snd_seq_queue_info_free(
      ptr,
    );
  }

  late final _snd_seq_queue_info_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<snd_seq_queue_info_t>)>>('snd_seq_queue_info_free');
  late final _snd_seq_queue_info_free = _snd_seq_queue_info_freePtr
      .asFunction<void Function(ffi.Pointer<snd_seq_queue_info_t>)>();

  void snd_seq_queue_info_copy(
    ffi.Pointer<snd_seq_queue_info_t> dst,
    ffi.Pointer<snd_seq_queue_info_t> src,
  ) {
    return _snd_seq_queue_info_copy(
      dst,
      src,
    );
  }

  late final _snd_seq_queue_info_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_seq_queue_info_t>,
              ffi.Pointer<snd_seq_queue_info_t>)>>('snd_seq_queue_info_copy');
  late final _snd_seq_queue_info_copy = _snd_seq_queue_info_copyPtr.asFunction<
      void Function(ffi.Pointer<snd_seq_queue_info_t>,
          ffi.Pointer<snd_seq_queue_info_t>)>();

  int snd_seq_queue_info_get_queue(
    ffi.Pointer<snd_seq_queue_info_t> info,
  ) {
    return _snd_seq_queue_info_get_queue(
      info,
    );
  }

  late final _snd_seq_queue_info_get_queuePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_seq_queue_info_t>)>>(
      'snd_seq_queue_info_get_queue');
  late final _snd_seq_queue_info_get_queue = _snd_seq_queue_info_get_queuePtr
      .asFunction<int Function(ffi.Pointer<snd_seq_queue_info_t>)>();

  ffi.Pointer<ffi.Char> snd_seq_queue_info_get_name(
    ffi.Pointer<snd_seq_queue_info_t> info,
  ) {
    return _snd_seq_queue_info_get_name(
      info,
    );
  }

  late final _snd_seq_queue_info_get_namePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<snd_seq_queue_info_t>)>>(
      'snd_seq_queue_info_get_name');
  late final _snd_seq_queue_info_get_name =
      _snd_seq_queue_info_get_namePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<snd_seq_queue_info_t>)>();

  int snd_seq_queue_info_get_owner(
    ffi.Pointer<snd_seq_queue_info_t> info,
  ) {
    return _snd_seq_queue_info_get_owner(
      info,
    );
  }

  late final _snd_seq_queue_info_get_ownerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_seq_queue_info_t>)>>(
      'snd_seq_queue_info_get_owner');
  late final _snd_seq_queue_info_get_owner = _snd_seq_queue_info_get_ownerPtr
      .asFunction<int Function(ffi.Pointer<snd_seq_queue_info_t>)>();

  int snd_seq_queue_info_get_locked(
    ffi.Pointer<snd_seq_queue_info_t> info,
  ) {
    return _snd_seq_queue_info_get_locked(
      info,
    );
  }

  late final _snd_seq_queue_info_get_lockedPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_seq_queue_info_t>)>>(
      'snd_seq_queue_info_get_locked');
  late final _snd_seq_queue_info_get_locked = _snd_seq_queue_info_get_lockedPtr
      .asFunction<int Function(ffi.Pointer<snd_seq_queue_info_t>)>();

  int snd_seq_queue_info_get_flags(
    ffi.Pointer<snd_seq_queue_info_t> info,
  ) {
    return _snd_seq_queue_info_get_flags(
      info,
    );
  }

  late final _snd_seq_queue_info_get_flagsPtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<snd_seq_queue_info_t>)>>(
      'snd_seq_queue_info_get_flags');
  late final _snd_seq_queue_info_get_flags = _snd_seq_queue_info_get_flagsPtr
      .asFunction<int Function(ffi.Pointer<snd_seq_queue_info_t>)>();

  void snd_seq_queue_info_set_name(
    ffi.Pointer<snd_seq_queue_info_t> info,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _snd_seq_queue_info_set_name(
      info,
      name,
    );
  }

  late final _snd_seq_queue_info_set_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_seq_queue_info_t>,
              ffi.Pointer<ffi.Char>)>>('snd_seq_queue_info_set_name');
  late final _snd_seq_queue_info_set_name =
      _snd_seq_queue_info_set_namePtr.asFunction<
          void Function(
              ffi.Pointer<snd_seq_queue_info_t>, ffi.Pointer<ffi.Char>)>();

  void snd_seq_queue_info_set_owner(
    ffi.Pointer<snd_seq_queue_info_t> info,
    int owner,
  ) {
    return _snd_seq_queue_info_set_owner(
      info,
      owner,
    );
  }

  late final _snd_seq_queue_info_set_ownerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_seq_queue_info_t>,
              ffi.Int)>>('snd_seq_queue_info_set_owner');
  late final _snd_seq_queue_info_set_owner = _snd_seq_queue_info_set_ownerPtr
      .asFunction<void Function(ffi.Pointer<snd_seq_queue_info_t>, int)>();

  void snd_seq_queue_info_set_locked(
    ffi.Pointer<snd_seq_queue_info_t> info,
    int locked,
  ) {
    return _snd_seq_queue_info_set_locked(
      info,
      locked,
    );
  }

  late final _snd_seq_queue_info_set_lockedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_seq_queue_info_t>,
              ffi.Int)>>('snd_seq_queue_info_set_locked');
  late final _snd_seq_queue_info_set_locked = _snd_seq_queue_info_set_lockedPtr
      .asFunction<void Function(ffi.Pointer<snd_seq_queue_info_t>, int)>();

  void snd_seq_queue_info_set_flags(
    ffi.Pointer<snd_seq_queue_info_t> info,
    int flags,
  ) {
    return _snd_seq_queue_info_set_flags(
      info,
      flags,
    );
  }

  late final _snd_seq_queue_info_set_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_seq_queue_info_t>,
              ffi.UnsignedInt)>>('snd_seq_queue_info_set_flags');
  late final _snd_seq_queue_info_set_flags = _snd_seq_queue_info_set_flagsPtr
      .asFunction<void Function(ffi.Pointer<snd_seq_queue_info_t>, int)>();

  int snd_seq_create_queue(
    ffi.Pointer<snd_seq_t> seq,
    ffi.Pointer<snd_seq_queue_info_t> info,
  ) {
    return _snd_seq_create_queue(
      seq,
      info,
    );
  }

  late final _snd_seq_create_queuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_seq_t>,
              ffi.Pointer<snd_seq_queue_info_t>)>>('snd_seq_create_queue');
  late final _snd_seq_create_queue = _snd_seq_create_queuePtr.asFunction<
      int Function(
          ffi.Pointer<snd_seq_t>, ffi.Pointer<snd_seq_queue_info_t>)>();

  int snd_seq_alloc_named_queue(
    ffi.Pointer<snd_seq_t> seq,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _snd_seq_alloc_named_queue(
      seq,
      name,
    );
  }

  late final _snd_seq_alloc_named_queuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_seq_t>,
              ffi.Pointer<ffi.Char>)>>('snd_seq_alloc_named_queue');
  late final _snd_seq_alloc_named_queue =
      _snd_seq_alloc_named_queuePtr.asFunction<
          int Function(ffi.Pointer<snd_seq_t>, ffi.Pointer<ffi.Char>)>();

  int snd_seq_alloc_queue(
    ffi.Pointer<snd_seq_t> handle,
  ) {
    return _snd_seq_alloc_queue(
      handle,
    );
  }

  late final _snd_seq_alloc_queuePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_seq_t>)>>(
          'snd_seq_alloc_queue');
  late final _snd_seq_alloc_queue = _snd_seq_alloc_queuePtr
      .asFunction<int Function(ffi.Pointer<snd_seq_t>)>();

  int snd_seq_free_queue(
    ffi.Pointer<snd_seq_t> handle,
    int q,
  ) {
    return _snd_seq_free_queue(
      handle,
      q,
    );
  }

  late final _snd_seq_free_queuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_seq_t>, ffi.Int)>>('snd_seq_free_queue');
  late final _snd_seq_free_queue = _snd_seq_free_queuePtr
      .asFunction<int Function(ffi.Pointer<snd_seq_t>, int)>();

  int snd_seq_get_queue_info(
    ffi.Pointer<snd_seq_t> seq,
    int q,
    ffi.Pointer<snd_seq_queue_info_t> info,
  ) {
    return _snd_seq_get_queue_info(
      seq,
      q,
      info,
    );
  }

  late final _snd_seq_get_queue_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_seq_t>, ffi.Int,
              ffi.Pointer<snd_seq_queue_info_t>)>>('snd_seq_get_queue_info');
  late final _snd_seq_get_queue_info = _snd_seq_get_queue_infoPtr.asFunction<
      int Function(
          ffi.Pointer<snd_seq_t>, int, ffi.Pointer<snd_seq_queue_info_t>)>();

  int snd_seq_set_queue_info(
    ffi.Pointer<snd_seq_t> seq,
    int q,
    ffi.Pointer<snd_seq_queue_info_t> info,
  ) {
    return _snd_seq_set_queue_info(
      seq,
      q,
      info,
    );
  }

  late final _snd_seq_set_queue_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_seq_t>, ffi.Int,
              ffi.Pointer<snd_seq_queue_info_t>)>>('snd_seq_set_queue_info');
  late final _snd_seq_set_queue_info = _snd_seq_set_queue_infoPtr.asFunction<
      int Function(
          ffi.Pointer<snd_seq_t>, int, ffi.Pointer<snd_seq_queue_info_t>)>();

  int snd_seq_query_named_queue(
    ffi.Pointer<snd_seq_t> seq,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _snd_seq_query_named_queue(
      seq,
      name,
    );
  }

  late final _snd_seq_query_named_queuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_seq_t>,
              ffi.Pointer<ffi.Char>)>>('snd_seq_query_named_queue');
  late final _snd_seq_query_named_queue =
      _snd_seq_query_named_queuePtr.asFunction<
          int Function(ffi.Pointer<snd_seq_t>, ffi.Pointer<ffi.Char>)>();

  int snd_seq_get_queue_usage(
    ffi.Pointer<snd_seq_t> handle,
    int q,
  ) {
    return _snd_seq_get_queue_usage(
      handle,
      q,
    );
  }

  late final _snd_seq_get_queue_usagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_seq_t>, ffi.Int)>>('snd_seq_get_queue_usage');
  late final _snd_seq_get_queue_usage = _snd_seq_get_queue_usagePtr
      .asFunction<int Function(ffi.Pointer<snd_seq_t>, int)>();

  int snd_seq_set_queue_usage(
    ffi.Pointer<snd_seq_t> handle,
    int q,
    int used,
  ) {
    return _snd_seq_set_queue_usage(
      handle,
      q,
      used,
    );
  }

  late final _snd_seq_set_queue_usagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_seq_t>, ffi.Int,
              ffi.Int)>>('snd_seq_set_queue_usage');
  late final _snd_seq_set_queue_usage = _snd_seq_set_queue_usagePtr
      .asFunction<int Function(ffi.Pointer<snd_seq_t>, int, int)>();

  int snd_seq_queue_status_sizeof() {
    return _snd_seq_queue_status_sizeof();
  }

  late final _snd_seq_queue_status_sizeofPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>(
          'snd_seq_queue_status_sizeof');
  late final _snd_seq_queue_status_sizeof =
      _snd_seq_queue_status_sizeofPtr.asFunction<int Function()>();

  int snd_seq_queue_status_malloc(
    ffi.Pointer<ffi.Pointer<snd_seq_queue_status_t>> ptr,
  ) {
    return _snd_seq_queue_status_malloc(
      ptr,
    );
  }

  late final _snd_seq_queue_status_mallocPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Pointer<snd_seq_queue_status_t>>)>>(
      'snd_seq_queue_status_malloc');
  late final _snd_seq_queue_status_malloc =
      _snd_seq_queue_status_mallocPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<snd_seq_queue_status_t>>)>();

  void snd_seq_queue_status_free(
    ffi.Pointer<snd_seq_queue_status_t> ptr,
  ) {
    return _snd_seq_queue_status_free(
      ptr,
    );
  }

  late final _snd_seq_queue_status_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<snd_seq_queue_status_t>)>>(
      'snd_seq_queue_status_free');
  late final _snd_seq_queue_status_free = _snd_seq_queue_status_freePtr
      .asFunction<void Function(ffi.Pointer<snd_seq_queue_status_t>)>();

  void snd_seq_queue_status_copy(
    ffi.Pointer<snd_seq_queue_status_t> dst,
    ffi.Pointer<snd_seq_queue_status_t> src,
  ) {
    return _snd_seq_queue_status_copy(
      dst,
      src,
    );
  }

  late final _snd_seq_queue_status_copyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<snd_seq_queue_status_t>,
                  ffi.Pointer<snd_seq_queue_status_t>)>>(
      'snd_seq_queue_status_copy');
  late final _snd_seq_queue_status_copy =
      _snd_seq_queue_status_copyPtr.asFunction<
          void Function(ffi.Pointer<snd_seq_queue_status_t>,
              ffi.Pointer<snd_seq_queue_status_t>)>();

  int snd_seq_queue_status_get_queue(
    ffi.Pointer<snd_seq_queue_status_t> info,
  ) {
    return _snd_seq_queue_status_get_queue(
      info,
    );
  }

  late final _snd_seq_queue_status_get_queuePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_seq_queue_status_t>)>>(
      'snd_seq_queue_status_get_queue');
  late final _snd_seq_queue_status_get_queue =
      _snd_seq_queue_status_get_queuePtr
          .asFunction<int Function(ffi.Pointer<snd_seq_queue_status_t>)>();

  int snd_seq_queue_status_get_events(
    ffi.Pointer<snd_seq_queue_status_t> info,
  ) {
    return _snd_seq_queue_status_get_events(
      info,
    );
  }

  late final _snd_seq_queue_status_get_eventsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_seq_queue_status_t>)>>(
      'snd_seq_queue_status_get_events');
  late final _snd_seq_queue_status_get_events =
      _snd_seq_queue_status_get_eventsPtr
          .asFunction<int Function(ffi.Pointer<snd_seq_queue_status_t>)>();

  int snd_seq_queue_status_get_tick_time(
    ffi.Pointer<snd_seq_queue_status_t> info,
  ) {
    return _snd_seq_queue_status_get_tick_time(
      info,
    );
  }

  late final _snd_seq_queue_status_get_tick_timePtr = _lookup<
          ffi.NativeFunction<
              snd_seq_tick_time_t Function(
                  ffi.Pointer<snd_seq_queue_status_t>)>>(
      'snd_seq_queue_status_get_tick_time');
  late final _snd_seq_queue_status_get_tick_time =
      _snd_seq_queue_status_get_tick_timePtr
          .asFunction<int Function(ffi.Pointer<snd_seq_queue_status_t>)>();

  ffi.Pointer<snd_seq_real_time_t> snd_seq_queue_status_get_real_time(
    ffi.Pointer<snd_seq_queue_status_t> info,
  ) {
    return _snd_seq_queue_status_get_real_time(
      info,
    );
  }

  late final _snd_seq_queue_status_get_real_timePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<snd_seq_real_time_t> Function(
                  ffi.Pointer<snd_seq_queue_status_t>)>>(
      'snd_seq_queue_status_get_real_time');
  late final _snd_seq_queue_status_get_real_time =
      _snd_seq_queue_status_get_real_timePtr.asFunction<
          ffi.Pointer<snd_seq_real_time_t> Function(
              ffi.Pointer<snd_seq_queue_status_t>)>();

  int snd_seq_queue_status_get_status(
    ffi.Pointer<snd_seq_queue_status_t> info,
  ) {
    return _snd_seq_queue_status_get_status(
      info,
    );
  }

  late final _snd_seq_queue_status_get_statusPtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<snd_seq_queue_status_t>)>>(
      'snd_seq_queue_status_get_status');
  late final _snd_seq_queue_status_get_status =
      _snd_seq_queue_status_get_statusPtr
          .asFunction<int Function(ffi.Pointer<snd_seq_queue_status_t>)>();

  int snd_seq_get_queue_status(
    ffi.Pointer<snd_seq_t> handle,
    int q,
    ffi.Pointer<snd_seq_queue_status_t> status,
  ) {
    return _snd_seq_get_queue_status(
      handle,
      q,
      status,
    );
  }

  late final _snd_seq_get_queue_statusPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_seq_t>, ffi.Int,
                  ffi.Pointer<snd_seq_queue_status_t>)>>(
      'snd_seq_get_queue_status');
  late final _snd_seq_get_queue_status =
      _snd_seq_get_queue_statusPtr.asFunction<
          int Function(ffi.Pointer<snd_seq_t>, int,
              ffi.Pointer<snd_seq_queue_status_t>)>();

  int snd_seq_queue_tempo_sizeof() {
    return _snd_seq_queue_tempo_sizeof();
  }

  late final _snd_seq_queue_tempo_sizeofPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>(
          'snd_seq_queue_tempo_sizeof');
  late final _snd_seq_queue_tempo_sizeof =
      _snd_seq_queue_tempo_sizeofPtr.asFunction<int Function()>();

  int snd_seq_queue_tempo_malloc(
    ffi.Pointer<ffi.Pointer<snd_seq_queue_tempo_t>> ptr,
  ) {
    return _snd_seq_queue_tempo_malloc(
      ptr,
    );
  }

  late final _snd_seq_queue_tempo_mallocPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Pointer<snd_seq_queue_tempo_t>>)>>(
      'snd_seq_queue_tempo_malloc');
  late final _snd_seq_queue_tempo_malloc =
      _snd_seq_queue_tempo_mallocPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<snd_seq_queue_tempo_t>>)>();

  void snd_seq_queue_tempo_free(
    ffi.Pointer<snd_seq_queue_tempo_t> ptr,
  ) {
    return _snd_seq_queue_tempo_free(
      ptr,
    );
  }

  late final _snd_seq_queue_tempo_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<snd_seq_queue_tempo_t>)>>('snd_seq_queue_tempo_free');
  late final _snd_seq_queue_tempo_free = _snd_seq_queue_tempo_freePtr
      .asFunction<void Function(ffi.Pointer<snd_seq_queue_tempo_t>)>();

  void snd_seq_queue_tempo_copy(
    ffi.Pointer<snd_seq_queue_tempo_t> dst,
    ffi.Pointer<snd_seq_queue_tempo_t> src,
  ) {
    return _snd_seq_queue_tempo_copy(
      dst,
      src,
    );
  }

  late final _snd_seq_queue_tempo_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_seq_queue_tempo_t>,
              ffi.Pointer<snd_seq_queue_tempo_t>)>>('snd_seq_queue_tempo_copy');
  late final _snd_seq_queue_tempo_copy =
      _snd_seq_queue_tempo_copyPtr.asFunction<
          void Function(ffi.Pointer<snd_seq_queue_tempo_t>,
              ffi.Pointer<snd_seq_queue_tempo_t>)>();

  int snd_seq_queue_tempo_get_queue(
    ffi.Pointer<snd_seq_queue_tempo_t> info,
  ) {
    return _snd_seq_queue_tempo_get_queue(
      info,
    );
  }

  late final _snd_seq_queue_tempo_get_queuePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_seq_queue_tempo_t>)>>(
      'snd_seq_queue_tempo_get_queue');
  late final _snd_seq_queue_tempo_get_queue = _snd_seq_queue_tempo_get_queuePtr
      .asFunction<int Function(ffi.Pointer<snd_seq_queue_tempo_t>)>();

  int snd_seq_queue_tempo_get_tempo(
    ffi.Pointer<snd_seq_queue_tempo_t> info,
  ) {
    return _snd_seq_queue_tempo_get_tempo(
      info,
    );
  }

  late final _snd_seq_queue_tempo_get_tempoPtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<snd_seq_queue_tempo_t>)>>(
      'snd_seq_queue_tempo_get_tempo');
  late final _snd_seq_queue_tempo_get_tempo = _snd_seq_queue_tempo_get_tempoPtr
      .asFunction<int Function(ffi.Pointer<snd_seq_queue_tempo_t>)>();

  int snd_seq_queue_tempo_get_ppq(
    ffi.Pointer<snd_seq_queue_tempo_t> info,
  ) {
    return _snd_seq_queue_tempo_get_ppq(
      info,
    );
  }

  late final _snd_seq_queue_tempo_get_ppqPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_seq_queue_tempo_t>)>>(
      'snd_seq_queue_tempo_get_ppq');
  late final _snd_seq_queue_tempo_get_ppq = _snd_seq_queue_tempo_get_ppqPtr
      .asFunction<int Function(ffi.Pointer<snd_seq_queue_tempo_t>)>();

  int snd_seq_queue_tempo_get_skew(
    ffi.Pointer<snd_seq_queue_tempo_t> info,
  ) {
    return _snd_seq_queue_tempo_get_skew(
      info,
    );
  }

  late final _snd_seq_queue_tempo_get_skewPtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<snd_seq_queue_tempo_t>)>>(
      'snd_seq_queue_tempo_get_skew');
  late final _snd_seq_queue_tempo_get_skew = _snd_seq_queue_tempo_get_skewPtr
      .asFunction<int Function(ffi.Pointer<snd_seq_queue_tempo_t>)>();

  int snd_seq_queue_tempo_get_skew_base(
    ffi.Pointer<snd_seq_queue_tempo_t> info,
  ) {
    return _snd_seq_queue_tempo_get_skew_base(
      info,
    );
  }

  late final _snd_seq_queue_tempo_get_skew_basePtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<snd_seq_queue_tempo_t>)>>(
      'snd_seq_queue_tempo_get_skew_base');
  late final _snd_seq_queue_tempo_get_skew_base =
      _snd_seq_queue_tempo_get_skew_basePtr
          .asFunction<int Function(ffi.Pointer<snd_seq_queue_tempo_t>)>();

  void snd_seq_queue_tempo_set_tempo(
    ffi.Pointer<snd_seq_queue_tempo_t> info,
    int tempo,
  ) {
    return _snd_seq_queue_tempo_set_tempo(
      info,
      tempo,
    );
  }

  late final _snd_seq_queue_tempo_set_tempoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_seq_queue_tempo_t>,
              ffi.UnsignedInt)>>('snd_seq_queue_tempo_set_tempo');
  late final _snd_seq_queue_tempo_set_tempo = _snd_seq_queue_tempo_set_tempoPtr
      .asFunction<void Function(ffi.Pointer<snd_seq_queue_tempo_t>, int)>();

  void snd_seq_queue_tempo_set_ppq(
    ffi.Pointer<snd_seq_queue_tempo_t> info,
    int ppq,
  ) {
    return _snd_seq_queue_tempo_set_ppq(
      info,
      ppq,
    );
  }

  late final _snd_seq_queue_tempo_set_ppqPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_seq_queue_tempo_t>,
              ffi.Int)>>('snd_seq_queue_tempo_set_ppq');
  late final _snd_seq_queue_tempo_set_ppq = _snd_seq_queue_tempo_set_ppqPtr
      .asFunction<void Function(ffi.Pointer<snd_seq_queue_tempo_t>, int)>();

  void snd_seq_queue_tempo_set_skew(
    ffi.Pointer<snd_seq_queue_tempo_t> info,
    int skew,
  ) {
    return _snd_seq_queue_tempo_set_skew(
      info,
      skew,
    );
  }

  late final _snd_seq_queue_tempo_set_skewPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_seq_queue_tempo_t>,
              ffi.UnsignedInt)>>('snd_seq_queue_tempo_set_skew');
  late final _snd_seq_queue_tempo_set_skew = _snd_seq_queue_tempo_set_skewPtr
      .asFunction<void Function(ffi.Pointer<snd_seq_queue_tempo_t>, int)>();

  void snd_seq_queue_tempo_set_skew_base(
    ffi.Pointer<snd_seq_queue_tempo_t> info,
    int base,
  ) {
    return _snd_seq_queue_tempo_set_skew_base(
      info,
      base,
    );
  }

  late final _snd_seq_queue_tempo_set_skew_basePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_seq_queue_tempo_t>,
              ffi.UnsignedInt)>>('snd_seq_queue_tempo_set_skew_base');
  late final _snd_seq_queue_tempo_set_skew_base =
      _snd_seq_queue_tempo_set_skew_basePtr
          .asFunction<void Function(ffi.Pointer<snd_seq_queue_tempo_t>, int)>();

  int snd_seq_get_queue_tempo(
    ffi.Pointer<snd_seq_t> handle,
    int q,
    ffi.Pointer<snd_seq_queue_tempo_t> tempo,
  ) {
    return _snd_seq_get_queue_tempo(
      handle,
      q,
      tempo,
    );
  }

  late final _snd_seq_get_queue_tempoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_seq_t>, ffi.Int,
              ffi.Pointer<snd_seq_queue_tempo_t>)>>('snd_seq_get_queue_tempo');
  late final _snd_seq_get_queue_tempo = _snd_seq_get_queue_tempoPtr.asFunction<
      int Function(
          ffi.Pointer<snd_seq_t>, int, ffi.Pointer<snd_seq_queue_tempo_t>)>();

  int snd_seq_set_queue_tempo(
    ffi.Pointer<snd_seq_t> handle,
    int q,
    ffi.Pointer<snd_seq_queue_tempo_t> tempo,
  ) {
    return _snd_seq_set_queue_tempo(
      handle,
      q,
      tempo,
    );
  }

  late final _snd_seq_set_queue_tempoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_seq_t>, ffi.Int,
              ffi.Pointer<snd_seq_queue_tempo_t>)>>('snd_seq_set_queue_tempo');
  late final _snd_seq_set_queue_tempo = _snd_seq_set_queue_tempoPtr.asFunction<
      int Function(
          ffi.Pointer<snd_seq_t>, int, ffi.Pointer<snd_seq_queue_tempo_t>)>();

  int snd_seq_queue_timer_sizeof() {
    return _snd_seq_queue_timer_sizeof();
  }

  late final _snd_seq_queue_timer_sizeofPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>(
          'snd_seq_queue_timer_sizeof');
  late final _snd_seq_queue_timer_sizeof =
      _snd_seq_queue_timer_sizeofPtr.asFunction<int Function()>();

  int snd_seq_queue_timer_malloc(
    ffi.Pointer<ffi.Pointer<snd_seq_queue_timer_t>> ptr,
  ) {
    return _snd_seq_queue_timer_malloc(
      ptr,
    );
  }

  late final _snd_seq_queue_timer_mallocPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Pointer<snd_seq_queue_timer_t>>)>>(
      'snd_seq_queue_timer_malloc');
  late final _snd_seq_queue_timer_malloc =
      _snd_seq_queue_timer_mallocPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<snd_seq_queue_timer_t>>)>();

  void snd_seq_queue_timer_free(
    ffi.Pointer<snd_seq_queue_timer_t> ptr,
  ) {
    return _snd_seq_queue_timer_free(
      ptr,
    );
  }

  late final _snd_seq_queue_timer_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<snd_seq_queue_timer_t>)>>('snd_seq_queue_timer_free');
  late final _snd_seq_queue_timer_free = _snd_seq_queue_timer_freePtr
      .asFunction<void Function(ffi.Pointer<snd_seq_queue_timer_t>)>();

  void snd_seq_queue_timer_copy(
    ffi.Pointer<snd_seq_queue_timer_t> dst,
    ffi.Pointer<snd_seq_queue_timer_t> src,
  ) {
    return _snd_seq_queue_timer_copy(
      dst,
      src,
    );
  }

  late final _snd_seq_queue_timer_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_seq_queue_timer_t>,
              ffi.Pointer<snd_seq_queue_timer_t>)>>('snd_seq_queue_timer_copy');
  late final _snd_seq_queue_timer_copy =
      _snd_seq_queue_timer_copyPtr.asFunction<
          void Function(ffi.Pointer<snd_seq_queue_timer_t>,
              ffi.Pointer<snd_seq_queue_timer_t>)>();

  int snd_seq_queue_timer_get_queue(
    ffi.Pointer<snd_seq_queue_timer_t> info,
  ) {
    return _snd_seq_queue_timer_get_queue(
      info,
    );
  }

  late final _snd_seq_queue_timer_get_queuePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_seq_queue_timer_t>)>>(
      'snd_seq_queue_timer_get_queue');
  late final _snd_seq_queue_timer_get_queue = _snd_seq_queue_timer_get_queuePtr
      .asFunction<int Function(ffi.Pointer<snd_seq_queue_timer_t>)>();

  int snd_seq_queue_timer_get_type(
    ffi.Pointer<snd_seq_queue_timer_t> info,
  ) {
    return _snd_seq_queue_timer_get_type(
      info,
    );
  }

  late final _snd_seq_queue_timer_get_typePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<snd_seq_queue_timer_t>)>>(
      'snd_seq_queue_timer_get_type');
  late final _snd_seq_queue_timer_get_type = _snd_seq_queue_timer_get_typePtr
      .asFunction<int Function(ffi.Pointer<snd_seq_queue_timer_t>)>();

  ffi.Pointer<snd_timer_id_t> snd_seq_queue_timer_get_id(
    ffi.Pointer<snd_seq_queue_timer_t> info,
  ) {
    return _snd_seq_queue_timer_get_id(
      info,
    );
  }

  late final _snd_seq_queue_timer_get_idPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<snd_timer_id_t> Function(
                  ffi.Pointer<snd_seq_queue_timer_t>)>>(
      'snd_seq_queue_timer_get_id');
  late final _snd_seq_queue_timer_get_id =
      _snd_seq_queue_timer_get_idPtr.asFunction<
          ffi.Pointer<snd_timer_id_t> Function(
              ffi.Pointer<snd_seq_queue_timer_t>)>();

  int snd_seq_queue_timer_get_resolution(
    ffi.Pointer<snd_seq_queue_timer_t> info,
  ) {
    return _snd_seq_queue_timer_get_resolution(
      info,
    );
  }

  late final _snd_seq_queue_timer_get_resolutionPtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<snd_seq_queue_timer_t>)>>(
      'snd_seq_queue_timer_get_resolution');
  late final _snd_seq_queue_timer_get_resolution =
      _snd_seq_queue_timer_get_resolutionPtr
          .asFunction<int Function(ffi.Pointer<snd_seq_queue_timer_t>)>();

  void snd_seq_queue_timer_set_type(
    ffi.Pointer<snd_seq_queue_timer_t> info,
    int type,
  ) {
    return _snd_seq_queue_timer_set_type(
      info,
      type,
    );
  }

  late final _snd_seq_queue_timer_set_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_seq_queue_timer_t>,
              ffi.Int32)>>('snd_seq_queue_timer_set_type');
  late final _snd_seq_queue_timer_set_type = _snd_seq_queue_timer_set_typePtr
      .asFunction<void Function(ffi.Pointer<snd_seq_queue_timer_t>, int)>();

  void snd_seq_queue_timer_set_id(
    ffi.Pointer<snd_seq_queue_timer_t> info,
    ffi.Pointer<snd_timer_id_t> id,
  ) {
    return _snd_seq_queue_timer_set_id(
      info,
      id,
    );
  }

  late final _snd_seq_queue_timer_set_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_seq_queue_timer_t>,
              ffi.Pointer<snd_timer_id_t>)>>('snd_seq_queue_timer_set_id');
  late final _snd_seq_queue_timer_set_id =
      _snd_seq_queue_timer_set_idPtr.asFunction<
          void Function(ffi.Pointer<snd_seq_queue_timer_t>,
              ffi.Pointer<snd_timer_id_t>)>();

  void snd_seq_queue_timer_set_resolution(
    ffi.Pointer<snd_seq_queue_timer_t> info,
    int resolution,
  ) {
    return _snd_seq_queue_timer_set_resolution(
      info,
      resolution,
    );
  }

  late final _snd_seq_queue_timer_set_resolutionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_seq_queue_timer_t>,
              ffi.UnsignedInt)>>('snd_seq_queue_timer_set_resolution');
  late final _snd_seq_queue_timer_set_resolution =
      _snd_seq_queue_timer_set_resolutionPtr
          .asFunction<void Function(ffi.Pointer<snd_seq_queue_timer_t>, int)>();

  int snd_seq_get_queue_timer(
    ffi.Pointer<snd_seq_t> handle,
    int q,
    ffi.Pointer<snd_seq_queue_timer_t> timer,
  ) {
    return _snd_seq_get_queue_timer(
      handle,
      q,
      timer,
    );
  }

  late final _snd_seq_get_queue_timerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_seq_t>, ffi.Int,
              ffi.Pointer<snd_seq_queue_timer_t>)>>('snd_seq_get_queue_timer');
  late final _snd_seq_get_queue_timer = _snd_seq_get_queue_timerPtr.asFunction<
      int Function(
          ffi.Pointer<snd_seq_t>, int, ffi.Pointer<snd_seq_queue_timer_t>)>();

  int snd_seq_set_queue_timer(
    ffi.Pointer<snd_seq_t> handle,
    int q,
    ffi.Pointer<snd_seq_queue_timer_t> timer,
  ) {
    return _snd_seq_set_queue_timer(
      handle,
      q,
      timer,
    );
  }

  late final _snd_seq_set_queue_timerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_seq_t>, ffi.Int,
              ffi.Pointer<snd_seq_queue_timer_t>)>>('snd_seq_set_queue_timer');
  late final _snd_seq_set_queue_timer = _snd_seq_set_queue_timerPtr.asFunction<
      int Function(
          ffi.Pointer<snd_seq_t>, int, ffi.Pointer<snd_seq_queue_timer_t>)>();

  int snd_seq_free_event(
    ffi.Pointer<snd_seq_event_t> ev,
  ) {
    return _snd_seq_free_event(
      ev,
    );
  }

  late final _snd_seq_free_eventPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_seq_event_t>)>>(
      'snd_seq_free_event');
  late final _snd_seq_free_event = _snd_seq_free_eventPtr
      .asFunction<int Function(ffi.Pointer<snd_seq_event_t>)>();

  int snd_seq_event_length(
    ffi.Pointer<snd_seq_event_t> ev,
  ) {
    return _snd_seq_event_length(
      ev,
    );
  }

  late final _snd_seq_event_lengthPtr = _lookup<
          ffi.NativeFunction<ssize_t Function(ffi.Pointer<snd_seq_event_t>)>>(
      'snd_seq_event_length');
  late final _snd_seq_event_length = _snd_seq_event_lengthPtr
      .asFunction<int Function(ffi.Pointer<snd_seq_event_t>)>();

  int snd_seq_event_output(
    ffi.Pointer<snd_seq_t> handle,
    ffi.Pointer<snd_seq_event_t> ev,
  ) {
    return _snd_seq_event_output(
      handle,
      ev,
    );
  }

  late final _snd_seq_event_outputPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_seq_t>,
              ffi.Pointer<snd_seq_event_t>)>>('snd_seq_event_output');
  late final _snd_seq_event_output = _snd_seq_event_outputPtr.asFunction<
      int Function(ffi.Pointer<snd_seq_t>, ffi.Pointer<snd_seq_event_t>)>();

  int snd_seq_event_output_buffer(
    ffi.Pointer<snd_seq_t> handle,
    ffi.Pointer<snd_seq_event_t> ev,
  ) {
    return _snd_seq_event_output_buffer(
      handle,
      ev,
    );
  }

  late final _snd_seq_event_output_bufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_seq_t>,
              ffi.Pointer<snd_seq_event_t>)>>('snd_seq_event_output_buffer');
  late final _snd_seq_event_output_buffer =
      _snd_seq_event_output_bufferPtr.asFunction<
          int Function(ffi.Pointer<snd_seq_t>, ffi.Pointer<snd_seq_event_t>)>();

  int snd_seq_event_output_direct(
    ffi.Pointer<snd_seq_t> handle,
    ffi.Pointer<snd_seq_event_t> ev,
  ) {
    return _snd_seq_event_output_direct(
      handle,
      ev,
    );
  }

  late final _snd_seq_event_output_directPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_seq_t>,
              ffi.Pointer<snd_seq_event_t>)>>('snd_seq_event_output_direct');
  late final _snd_seq_event_output_direct =
      _snd_seq_event_output_directPtr.asFunction<
          int Function(ffi.Pointer<snd_seq_t>, ffi.Pointer<snd_seq_event_t>)>();

  int snd_seq_event_input(
    ffi.Pointer<snd_seq_t> handle,
    ffi.Pointer<ffi.Pointer<snd_seq_event_t>> ev,
  ) {
    return _snd_seq_event_input(
      handle,
      ev,
    );
  }

  late final _snd_seq_event_inputPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_seq_t>,
                  ffi.Pointer<ffi.Pointer<snd_seq_event_t>>)>>(
      'snd_seq_event_input');
  late final _snd_seq_event_input = _snd_seq_event_inputPtr.asFunction<
      int Function(
          ffi.Pointer<snd_seq_t>, ffi.Pointer<ffi.Pointer<snd_seq_event_t>>)>();

  int snd_seq_event_input_pending(
    ffi.Pointer<snd_seq_t> seq,
    int fetch_sequencer,
  ) {
    return _snd_seq_event_input_pending(
      seq,
      fetch_sequencer,
    );
  }

  late final _snd_seq_event_input_pendingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_seq_t>, ffi.Int)>>('snd_seq_event_input_pending');
  late final _snd_seq_event_input_pending = _snd_seq_event_input_pendingPtr
      .asFunction<int Function(ffi.Pointer<snd_seq_t>, int)>();

  int snd_seq_drain_output(
    ffi.Pointer<snd_seq_t> handle,
  ) {
    return _snd_seq_drain_output(
      handle,
    );
  }

  late final _snd_seq_drain_outputPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_seq_t>)>>(
          'snd_seq_drain_output');
  late final _snd_seq_drain_output = _snd_seq_drain_outputPtr
      .asFunction<int Function(ffi.Pointer<snd_seq_t>)>();

  int snd_seq_event_output_pending(
    ffi.Pointer<snd_seq_t> seq,
  ) {
    return _snd_seq_event_output_pending(
      seq,
    );
  }

  late final _snd_seq_event_output_pendingPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_seq_t>)>>(
          'snd_seq_event_output_pending');
  late final _snd_seq_event_output_pending = _snd_seq_event_output_pendingPtr
      .asFunction<int Function(ffi.Pointer<snd_seq_t>)>();

  int snd_seq_extract_output(
    ffi.Pointer<snd_seq_t> handle,
    ffi.Pointer<ffi.Pointer<snd_seq_event_t>> ev,
  ) {
    return _snd_seq_extract_output(
      handle,
      ev,
    );
  }

  late final _snd_seq_extract_outputPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_seq_t>,
                  ffi.Pointer<ffi.Pointer<snd_seq_event_t>>)>>(
      'snd_seq_extract_output');
  late final _snd_seq_extract_output = _snd_seq_extract_outputPtr.asFunction<
      int Function(
          ffi.Pointer<snd_seq_t>, ffi.Pointer<ffi.Pointer<snd_seq_event_t>>)>();

  int snd_seq_drop_output(
    ffi.Pointer<snd_seq_t> handle,
  ) {
    return _snd_seq_drop_output(
      handle,
    );
  }

  late final _snd_seq_drop_outputPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_seq_t>)>>(
          'snd_seq_drop_output');
  late final _snd_seq_drop_output = _snd_seq_drop_outputPtr
      .asFunction<int Function(ffi.Pointer<snd_seq_t>)>();

  int snd_seq_drop_output_buffer(
    ffi.Pointer<snd_seq_t> handle,
  ) {
    return _snd_seq_drop_output_buffer(
      handle,
    );
  }

  late final _snd_seq_drop_output_bufferPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_seq_t>)>>(
          'snd_seq_drop_output_buffer');
  late final _snd_seq_drop_output_buffer = _snd_seq_drop_output_bufferPtr
      .asFunction<int Function(ffi.Pointer<snd_seq_t>)>();

  int snd_seq_drop_input(
    ffi.Pointer<snd_seq_t> handle,
  ) {
    return _snd_seq_drop_input(
      handle,
    );
  }

  late final _snd_seq_drop_inputPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_seq_t>)>>(
          'snd_seq_drop_input');
  late final _snd_seq_drop_input =
      _snd_seq_drop_inputPtr.asFunction<int Function(ffi.Pointer<snd_seq_t>)>();

  int snd_seq_drop_input_buffer(
    ffi.Pointer<snd_seq_t> handle,
  ) {
    return _snd_seq_drop_input_buffer(
      handle,
    );
  }

  late final _snd_seq_drop_input_bufferPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_seq_t>)>>(
          'snd_seq_drop_input_buffer');
  late final _snd_seq_drop_input_buffer = _snd_seq_drop_input_bufferPtr
      .asFunction<int Function(ffi.Pointer<snd_seq_t>)>();

  int snd_seq_remove_events_sizeof() {
    return _snd_seq_remove_events_sizeof();
  }

  late final _snd_seq_remove_events_sizeofPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>(
          'snd_seq_remove_events_sizeof');
  late final _snd_seq_remove_events_sizeof =
      _snd_seq_remove_events_sizeofPtr.asFunction<int Function()>();

  int snd_seq_remove_events_malloc(
    ffi.Pointer<ffi.Pointer<snd_seq_remove_events_t>> ptr,
  ) {
    return _snd_seq_remove_events_malloc(
      ptr,
    );
  }

  late final _snd_seq_remove_events_mallocPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Pointer<snd_seq_remove_events_t>>)>>(
      'snd_seq_remove_events_malloc');
  late final _snd_seq_remove_events_malloc =
      _snd_seq_remove_events_mallocPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<snd_seq_remove_events_t>>)>();

  void snd_seq_remove_events_free(
    ffi.Pointer<snd_seq_remove_events_t> ptr,
  ) {
    return _snd_seq_remove_events_free(
      ptr,
    );
  }

  late final _snd_seq_remove_events_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<snd_seq_remove_events_t>)>>(
      'snd_seq_remove_events_free');
  late final _snd_seq_remove_events_free = _snd_seq_remove_events_freePtr
      .asFunction<void Function(ffi.Pointer<snd_seq_remove_events_t>)>();

  void snd_seq_remove_events_copy(
    ffi.Pointer<snd_seq_remove_events_t> dst,
    ffi.Pointer<snd_seq_remove_events_t> src,
  ) {
    return _snd_seq_remove_events_copy(
      dst,
      src,
    );
  }

  late final _snd_seq_remove_events_copyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<snd_seq_remove_events_t>,
                  ffi.Pointer<snd_seq_remove_events_t>)>>(
      'snd_seq_remove_events_copy');
  late final _snd_seq_remove_events_copy =
      _snd_seq_remove_events_copyPtr.asFunction<
          void Function(ffi.Pointer<snd_seq_remove_events_t>,
              ffi.Pointer<snd_seq_remove_events_t>)>();

  int snd_seq_remove_events_get_condition(
    ffi.Pointer<snd_seq_remove_events_t> info,
  ) {
    return _snd_seq_remove_events_get_condition(
      info,
    );
  }

  late final _snd_seq_remove_events_get_conditionPtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<snd_seq_remove_events_t>)>>(
      'snd_seq_remove_events_get_condition');
  late final _snd_seq_remove_events_get_condition =
      _snd_seq_remove_events_get_conditionPtr
          .asFunction<int Function(ffi.Pointer<snd_seq_remove_events_t>)>();

  int snd_seq_remove_events_get_queue(
    ffi.Pointer<snd_seq_remove_events_t> info,
  ) {
    return _snd_seq_remove_events_get_queue(
      info,
    );
  }

  late final _snd_seq_remove_events_get_queuePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_seq_remove_events_t>)>>(
      'snd_seq_remove_events_get_queue');
  late final _snd_seq_remove_events_get_queue =
      _snd_seq_remove_events_get_queuePtr
          .asFunction<int Function(ffi.Pointer<snd_seq_remove_events_t>)>();

  ffi.Pointer<snd_seq_timestamp_t> snd_seq_remove_events_get_time(
    ffi.Pointer<snd_seq_remove_events_t> info,
  ) {
    return _snd_seq_remove_events_get_time(
      info,
    );
  }

  late final _snd_seq_remove_events_get_timePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<snd_seq_timestamp_t> Function(
                  ffi.Pointer<snd_seq_remove_events_t>)>>(
      'snd_seq_remove_events_get_time');
  late final _snd_seq_remove_events_get_time =
      _snd_seq_remove_events_get_timePtr.asFunction<
          ffi.Pointer<snd_seq_timestamp_t> Function(
              ffi.Pointer<snd_seq_remove_events_t>)>();

  ffi.Pointer<snd_seq_addr_t> snd_seq_remove_events_get_dest(
    ffi.Pointer<snd_seq_remove_events_t> info,
  ) {
    return _snd_seq_remove_events_get_dest(
      info,
    );
  }

  late final _snd_seq_remove_events_get_destPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<snd_seq_addr_t> Function(
                  ffi.Pointer<snd_seq_remove_events_t>)>>(
      'snd_seq_remove_events_get_dest');
  late final _snd_seq_remove_events_get_dest =
      _snd_seq_remove_events_get_destPtr.asFunction<
          ffi.Pointer<snd_seq_addr_t> Function(
              ffi.Pointer<snd_seq_remove_events_t>)>();

  int snd_seq_remove_events_get_channel(
    ffi.Pointer<snd_seq_remove_events_t> info,
  ) {
    return _snd_seq_remove_events_get_channel(
      info,
    );
  }

  late final _snd_seq_remove_events_get_channelPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_seq_remove_events_t>)>>(
      'snd_seq_remove_events_get_channel');
  late final _snd_seq_remove_events_get_channel =
      _snd_seq_remove_events_get_channelPtr
          .asFunction<int Function(ffi.Pointer<snd_seq_remove_events_t>)>();

  int snd_seq_remove_events_get_event_type(
    ffi.Pointer<snd_seq_remove_events_t> info,
  ) {
    return _snd_seq_remove_events_get_event_type(
      info,
    );
  }

  late final _snd_seq_remove_events_get_event_typePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_seq_remove_events_t>)>>(
      'snd_seq_remove_events_get_event_type');
  late final _snd_seq_remove_events_get_event_type =
      _snd_seq_remove_events_get_event_typePtr
          .asFunction<int Function(ffi.Pointer<snd_seq_remove_events_t>)>();

  int snd_seq_remove_events_get_tag(
    ffi.Pointer<snd_seq_remove_events_t> info,
  ) {
    return _snd_seq_remove_events_get_tag(
      info,
    );
  }

  late final _snd_seq_remove_events_get_tagPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<snd_seq_remove_events_t>)>>(
      'snd_seq_remove_events_get_tag');
  late final _snd_seq_remove_events_get_tag = _snd_seq_remove_events_get_tagPtr
      .asFunction<int Function(ffi.Pointer<snd_seq_remove_events_t>)>();

  void snd_seq_remove_events_set_condition(
    ffi.Pointer<snd_seq_remove_events_t> info,
    int flags,
  ) {
    return _snd_seq_remove_events_set_condition(
      info,
      flags,
    );
  }

  late final _snd_seq_remove_events_set_conditionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_seq_remove_events_t>,
              ffi.UnsignedInt)>>('snd_seq_remove_events_set_condition');
  late final _snd_seq_remove_events_set_condition =
      _snd_seq_remove_events_set_conditionPtr.asFunction<
          void Function(ffi.Pointer<snd_seq_remove_events_t>, int)>();

  void snd_seq_remove_events_set_queue(
    ffi.Pointer<snd_seq_remove_events_t> info,
    int queue,
  ) {
    return _snd_seq_remove_events_set_queue(
      info,
      queue,
    );
  }

  late final _snd_seq_remove_events_set_queuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_seq_remove_events_t>,
              ffi.Int)>>('snd_seq_remove_events_set_queue');
  late final _snd_seq_remove_events_set_queue =
      _snd_seq_remove_events_set_queuePtr.asFunction<
          void Function(ffi.Pointer<snd_seq_remove_events_t>, int)>();

  void snd_seq_remove_events_set_time(
    ffi.Pointer<snd_seq_remove_events_t> info,
    ffi.Pointer<snd_seq_timestamp_t> time,
  ) {
    return _snd_seq_remove_events_set_time(
      info,
      time,
    );
  }

  late final _snd_seq_remove_events_set_timePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<snd_seq_remove_events_t>,
                  ffi.Pointer<snd_seq_timestamp_t>)>>(
      'snd_seq_remove_events_set_time');
  late final _snd_seq_remove_events_set_time =
      _snd_seq_remove_events_set_timePtr.asFunction<
          void Function(ffi.Pointer<snd_seq_remove_events_t>,
              ffi.Pointer<snd_seq_timestamp_t>)>();

  void snd_seq_remove_events_set_dest(
    ffi.Pointer<snd_seq_remove_events_t> info,
    ffi.Pointer<snd_seq_addr_t> addr,
  ) {
    return _snd_seq_remove_events_set_dest(
      info,
      addr,
    );
  }

  late final _snd_seq_remove_events_set_destPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_seq_remove_events_t>,
              ffi.Pointer<snd_seq_addr_t>)>>('snd_seq_remove_events_set_dest');
  late final _snd_seq_remove_events_set_dest =
      _snd_seq_remove_events_set_destPtr.asFunction<
          void Function(ffi.Pointer<snd_seq_remove_events_t>,
              ffi.Pointer<snd_seq_addr_t>)>();

  void snd_seq_remove_events_set_channel(
    ffi.Pointer<snd_seq_remove_events_t> info,
    int channel,
  ) {
    return _snd_seq_remove_events_set_channel(
      info,
      channel,
    );
  }

  late final _snd_seq_remove_events_set_channelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_seq_remove_events_t>,
              ffi.Int)>>('snd_seq_remove_events_set_channel');
  late final _snd_seq_remove_events_set_channel =
      _snd_seq_remove_events_set_channelPtr.asFunction<
          void Function(ffi.Pointer<snd_seq_remove_events_t>, int)>();

  void snd_seq_remove_events_set_event_type(
    ffi.Pointer<snd_seq_remove_events_t> info,
    int type,
  ) {
    return _snd_seq_remove_events_set_event_type(
      info,
      type,
    );
  }

  late final _snd_seq_remove_events_set_event_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_seq_remove_events_t>,
              ffi.Int)>>('snd_seq_remove_events_set_event_type');
  late final _snd_seq_remove_events_set_event_type =
      _snd_seq_remove_events_set_event_typePtr.asFunction<
          void Function(ffi.Pointer<snd_seq_remove_events_t>, int)>();

  void snd_seq_remove_events_set_tag(
    ffi.Pointer<snd_seq_remove_events_t> info,
    int tag,
  ) {
    return _snd_seq_remove_events_set_tag(
      info,
      tag,
    );
  }

  late final _snd_seq_remove_events_set_tagPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_seq_remove_events_t>,
              ffi.Int)>>('snd_seq_remove_events_set_tag');
  late final _snd_seq_remove_events_set_tag = _snd_seq_remove_events_set_tagPtr
      .asFunction<void Function(ffi.Pointer<snd_seq_remove_events_t>, int)>();

  int snd_seq_remove_events(
    ffi.Pointer<snd_seq_t> handle,
    ffi.Pointer<snd_seq_remove_events_t> info,
  ) {
    return _snd_seq_remove_events(
      handle,
      info,
    );
  }

  late final _snd_seq_remove_eventsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_seq_t>,
              ffi.Pointer<snd_seq_remove_events_t>)>>('snd_seq_remove_events');
  late final _snd_seq_remove_events = _snd_seq_remove_eventsPtr.asFunction<
      int Function(
          ffi.Pointer<snd_seq_t>, ffi.Pointer<snd_seq_remove_events_t>)>();

  void snd_seq_set_bit(
    int nr,
    ffi.Pointer<ffi.Void> array,
  ) {
    return _snd_seq_set_bit(
      nr,
      array,
    );
  }

  late final _snd_seq_set_bitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int, ffi.Pointer<ffi.Void>)>>('snd_seq_set_bit');
  late final _snd_seq_set_bit = _snd_seq_set_bitPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>)>();

  void snd_seq_unset_bit(
    int nr,
    ffi.Pointer<ffi.Void> array,
  ) {
    return _snd_seq_unset_bit(
      nr,
      array,
    );
  }

  late final _snd_seq_unset_bitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int, ffi.Pointer<ffi.Void>)>>('snd_seq_unset_bit');
  late final _snd_seq_unset_bit = _snd_seq_unset_bitPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>)>();

  int snd_seq_change_bit(
    int nr,
    ffi.Pointer<ffi.Void> array,
  ) {
    return _snd_seq_change_bit(
      nr,
      array,
    );
  }

  late final _snd_seq_change_bitPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Void>)>>(
      'snd_seq_change_bit');
  late final _snd_seq_change_bit = _snd_seq_change_bitPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Void>)>();

  int snd_seq_get_bit(
    int nr,
    ffi.Pointer<ffi.Void> array,
  ) {
    return _snd_seq_get_bit(
      nr,
      array,
    );
  }

  late final _snd_seq_get_bitPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Void>)>>(
      'snd_seq_get_bit');
  late final _snd_seq_get_bit = _snd_seq_get_bitPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Void>)>();

  late final ffi.Pointer<ffi.Pointer<ffi.UnsignedInt>> _snd_seq_event_types =
      _lookup<ffi.Pointer<ffi.UnsignedInt>>('snd_seq_event_types');

  ffi.Pointer<ffi.UnsignedInt> get snd_seq_event_types =>
      _snd_seq_event_types.value;

  set snd_seq_event_types(ffi.Pointer<ffi.UnsignedInt> value) =>
      _snd_seq_event_types.value = value;

  int snd_seq_control_queue(
    ffi.Pointer<snd_seq_t> seq,
    int q,
    int type,
    int value,
    ffi.Pointer<snd_seq_event_t> ev,
  ) {
    return _snd_seq_control_queue(
      seq,
      q,
      type,
      value,
      ev,
    );
  }

  late final _snd_seq_control_queuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_seq_t>, ffi.Int, ffi.Int, ffi.Int,
              ffi.Pointer<snd_seq_event_t>)>>('snd_seq_control_queue');
  late final _snd_seq_control_queue = _snd_seq_control_queuePtr.asFunction<
      int Function(ffi.Pointer<snd_seq_t>, int, int, int,
          ffi.Pointer<snd_seq_event_t>)>();

  int snd_seq_create_simple_port(
    ffi.Pointer<snd_seq_t> seq,
    ffi.Pointer<ffi.Char> name,
    int caps,
    int type,
  ) {
    return _snd_seq_create_simple_port(
      seq,
      name,
      caps,
      type,
    );
  }

  late final _snd_seq_create_simple_portPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_seq_t>, ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt, ffi.UnsignedInt)>>('snd_seq_create_simple_port');
  late final _snd_seq_create_simple_port =
      _snd_seq_create_simple_portPtr.asFunction<
          int Function(
              ffi.Pointer<snd_seq_t>, ffi.Pointer<ffi.Char>, int, int)>();

  int snd_seq_delete_simple_port(
    ffi.Pointer<snd_seq_t> seq,
    int port,
  ) {
    return _snd_seq_delete_simple_port(
      seq,
      port,
    );
  }

  late final _snd_seq_delete_simple_portPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<snd_seq_t>, ffi.Int)>>('snd_seq_delete_simple_port');
  late final _snd_seq_delete_simple_port = _snd_seq_delete_simple_portPtr
      .asFunction<int Function(ffi.Pointer<snd_seq_t>, int)>();

  int snd_seq_connect_from(
    ffi.Pointer<snd_seq_t> seq,
    int my_port,
    int src_client,
    int src_port,
  ) {
    return _snd_seq_connect_from(
      seq,
      my_port,
      src_client,
      src_port,
    );
  }

  late final _snd_seq_connect_fromPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_seq_t>, ffi.Int, ffi.Int,
              ffi.Int)>>('snd_seq_connect_from');
  late final _snd_seq_connect_from = _snd_seq_connect_fromPtr
      .asFunction<int Function(ffi.Pointer<snd_seq_t>, int, int, int)>();

  int snd_seq_connect_to(
    ffi.Pointer<snd_seq_t> seq,
    int my_port,
    int dest_client,
    int dest_port,
  ) {
    return _snd_seq_connect_to(
      seq,
      my_port,
      dest_client,
      dest_port,
    );
  }

  late final _snd_seq_connect_toPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_seq_t>, ffi.Int, ffi.Int,
              ffi.Int)>>('snd_seq_connect_to');
  late final _snd_seq_connect_to = _snd_seq_connect_toPtr
      .asFunction<int Function(ffi.Pointer<snd_seq_t>, int, int, int)>();

  int snd_seq_disconnect_from(
    ffi.Pointer<snd_seq_t> seq,
    int my_port,
    int src_client,
    int src_port,
  ) {
    return _snd_seq_disconnect_from(
      seq,
      my_port,
      src_client,
      src_port,
    );
  }

  late final _snd_seq_disconnect_fromPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_seq_t>, ffi.Int, ffi.Int,
              ffi.Int)>>('snd_seq_disconnect_from');
  late final _snd_seq_disconnect_from = _snd_seq_disconnect_fromPtr
      .asFunction<int Function(ffi.Pointer<snd_seq_t>, int, int, int)>();

  int snd_seq_disconnect_to(
    ffi.Pointer<snd_seq_t> seq,
    int my_port,
    int dest_client,
    int dest_port,
  ) {
    return _snd_seq_disconnect_to(
      seq,
      my_port,
      dest_client,
      dest_port,
    );
  }

  late final _snd_seq_disconnect_toPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_seq_t>, ffi.Int, ffi.Int,
              ffi.Int)>>('snd_seq_disconnect_to');
  late final _snd_seq_disconnect_to = _snd_seq_disconnect_toPtr
      .asFunction<int Function(ffi.Pointer<snd_seq_t>, int, int, int)>();

  int snd_seq_set_client_name(
    ffi.Pointer<snd_seq_t> seq,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _snd_seq_set_client_name(
      seq,
      name,
    );
  }

  late final _snd_seq_set_client_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_seq_t>,
              ffi.Pointer<ffi.Char>)>>('snd_seq_set_client_name');
  late final _snd_seq_set_client_name = _snd_seq_set_client_namePtr.asFunction<
      int Function(ffi.Pointer<snd_seq_t>, ffi.Pointer<ffi.Char>)>();

  int snd_seq_set_client_event_filter(
    ffi.Pointer<snd_seq_t> seq,
    int event_type,
  ) {
    return _snd_seq_set_client_event_filter(
      seq,
      event_type,
    );
  }

  late final _snd_seq_set_client_event_filterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_seq_t>,
              ffi.Int)>>('snd_seq_set_client_event_filter');
  late final _snd_seq_set_client_event_filter =
      _snd_seq_set_client_event_filterPtr
          .asFunction<int Function(ffi.Pointer<snd_seq_t>, int)>();

  int snd_seq_set_client_pool_output(
    ffi.Pointer<snd_seq_t> seq,
    int size,
  ) {
    return _snd_seq_set_client_pool_output(
      seq,
      size,
    );
  }

  late final _snd_seq_set_client_pool_outputPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_seq_t>,
              ffi.Size)>>('snd_seq_set_client_pool_output');
  late final _snd_seq_set_client_pool_output =
      _snd_seq_set_client_pool_outputPtr
          .asFunction<int Function(ffi.Pointer<snd_seq_t>, int)>();

  int snd_seq_set_client_pool_output_room(
    ffi.Pointer<snd_seq_t> seq,
    int size,
  ) {
    return _snd_seq_set_client_pool_output_room(
      seq,
      size,
    );
  }

  late final _snd_seq_set_client_pool_output_roomPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_seq_t>,
              ffi.Size)>>('snd_seq_set_client_pool_output_room');
  late final _snd_seq_set_client_pool_output_room =
      _snd_seq_set_client_pool_output_roomPtr
          .asFunction<int Function(ffi.Pointer<snd_seq_t>, int)>();

  int snd_seq_set_client_pool_input(
    ffi.Pointer<snd_seq_t> seq,
    int size,
  ) {
    return _snd_seq_set_client_pool_input(
      seq,
      size,
    );
  }

  late final _snd_seq_set_client_pool_inputPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_seq_t>,
              ffi.Size)>>('snd_seq_set_client_pool_input');
  late final _snd_seq_set_client_pool_input = _snd_seq_set_client_pool_inputPtr
      .asFunction<int Function(ffi.Pointer<snd_seq_t>, int)>();

  int snd_seq_sync_output_queue(
    ffi.Pointer<snd_seq_t> seq,
  ) {
    return _snd_seq_sync_output_queue(
      seq,
    );
  }

  late final _snd_seq_sync_output_queuePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_seq_t>)>>(
          'snd_seq_sync_output_queue');
  late final _snd_seq_sync_output_queue = _snd_seq_sync_output_queuePtr
      .asFunction<int Function(ffi.Pointer<snd_seq_t>)>();

  int snd_seq_parse_address(
    ffi.Pointer<snd_seq_t> seq,
    ffi.Pointer<snd_seq_addr_t> addr,
    ffi.Pointer<ffi.Char> str,
  ) {
    return _snd_seq_parse_address(
      seq,
      addr,
      str,
    );
  }

  late final _snd_seq_parse_addressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_seq_t>, ffi.Pointer<snd_seq_addr_t>,
              ffi.Pointer<ffi.Char>)>>('snd_seq_parse_address');
  late final _snd_seq_parse_address = _snd_seq_parse_addressPtr.asFunction<
      int Function(ffi.Pointer<snd_seq_t>, ffi.Pointer<snd_seq_addr_t>,
          ffi.Pointer<ffi.Char>)>();

  int snd_seq_reset_pool_output(
    ffi.Pointer<snd_seq_t> seq,
  ) {
    return _snd_seq_reset_pool_output(
      seq,
    );
  }

  late final _snd_seq_reset_pool_outputPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_seq_t>)>>(
          'snd_seq_reset_pool_output');
  late final _snd_seq_reset_pool_output = _snd_seq_reset_pool_outputPtr
      .asFunction<int Function(ffi.Pointer<snd_seq_t>)>();

  int snd_seq_reset_pool_input(
    ffi.Pointer<snd_seq_t> seq,
  ) {
    return _snd_seq_reset_pool_input(
      seq,
    );
  }

  late final _snd_seq_reset_pool_inputPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_seq_t>)>>(
          'snd_seq_reset_pool_input');
  late final _snd_seq_reset_pool_input = _snd_seq_reset_pool_inputPtr
      .asFunction<int Function(ffi.Pointer<snd_seq_t>)>();

  int snd_midi_event_new(
    int bufsize,
    ffi.Pointer<ffi.Pointer<snd_midi_event_t>> rdev,
  ) {
    return _snd_midi_event_new(
      bufsize,
      rdev,
    );
  }

  late final _snd_midi_event_newPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Size, ffi.Pointer<ffi.Pointer<snd_midi_event_t>>)>>(
      'snd_midi_event_new');
  late final _snd_midi_event_new = _snd_midi_event_newPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Pointer<snd_midi_event_t>>)>();

  int snd_midi_event_resize_buffer(
    ffi.Pointer<snd_midi_event_t> dev,
    int bufsize,
  ) {
    return _snd_midi_event_resize_buffer(
      dev,
      bufsize,
    );
  }

  late final _snd_midi_event_resize_bufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_midi_event_t>,
              ffi.Size)>>('snd_midi_event_resize_buffer');
  late final _snd_midi_event_resize_buffer = _snd_midi_event_resize_bufferPtr
      .asFunction<int Function(ffi.Pointer<snd_midi_event_t>, int)>();

  void snd_midi_event_free(
    ffi.Pointer<snd_midi_event_t> dev,
  ) {
    return _snd_midi_event_free(
      dev,
    );
  }

  late final _snd_midi_event_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<snd_midi_event_t>)>>(
      'snd_midi_event_free');
  late final _snd_midi_event_free = _snd_midi_event_freePtr
      .asFunction<void Function(ffi.Pointer<snd_midi_event_t>)>();

  void snd_midi_event_init(
    ffi.Pointer<snd_midi_event_t> dev,
  ) {
    return _snd_midi_event_init(
      dev,
    );
  }

  late final _snd_midi_event_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<snd_midi_event_t>)>>(
      'snd_midi_event_init');
  late final _snd_midi_event_init = _snd_midi_event_initPtr
      .asFunction<void Function(ffi.Pointer<snd_midi_event_t>)>();

  void snd_midi_event_reset_encode(
    ffi.Pointer<snd_midi_event_t> dev,
  ) {
    return _snd_midi_event_reset_encode(
      dev,
    );
  }

  late final _snd_midi_event_reset_encodePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<snd_midi_event_t>)>>(
      'snd_midi_event_reset_encode');
  late final _snd_midi_event_reset_encode = _snd_midi_event_reset_encodePtr
      .asFunction<void Function(ffi.Pointer<snd_midi_event_t>)>();

  void snd_midi_event_reset_decode(
    ffi.Pointer<snd_midi_event_t> dev,
  ) {
    return _snd_midi_event_reset_decode(
      dev,
    );
  }

  late final _snd_midi_event_reset_decodePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<snd_midi_event_t>)>>(
      'snd_midi_event_reset_decode');
  late final _snd_midi_event_reset_decode = _snd_midi_event_reset_decodePtr
      .asFunction<void Function(ffi.Pointer<snd_midi_event_t>)>();

  void snd_midi_event_no_status(
    ffi.Pointer<snd_midi_event_t> dev,
    int on1,
  ) {
    return _snd_midi_event_no_status(
      dev,
      on1,
    );
  }

  late final _snd_midi_event_no_statusPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_midi_event_t>,
              ffi.Int)>>('snd_midi_event_no_status');
  late final _snd_midi_event_no_status = _snd_midi_event_no_statusPtr
      .asFunction<void Function(ffi.Pointer<snd_midi_event_t>, int)>();

  int snd_midi_event_encode(
    ffi.Pointer<snd_midi_event_t> dev,
    ffi.Pointer<ffi.UnsignedChar> buf,
    int count,
    ffi.Pointer<snd_seq_event_t> ev,
  ) {
    return _snd_midi_event_encode(
      dev,
      buf,
      count,
      ev,
    );
  }

  late final _snd_midi_event_encodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(
              ffi.Pointer<snd_midi_event_t>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Long,
              ffi.Pointer<snd_seq_event_t>)>>('snd_midi_event_encode');
  late final _snd_midi_event_encode = _snd_midi_event_encodePtr.asFunction<
      int Function(ffi.Pointer<snd_midi_event_t>, ffi.Pointer<ffi.UnsignedChar>,
          int, ffi.Pointer<snd_seq_event_t>)>();

  int snd_midi_event_encode_byte(
    ffi.Pointer<snd_midi_event_t> dev,
    int c,
    ffi.Pointer<snd_seq_event_t> ev,
  ) {
    return _snd_midi_event_encode_byte(
      dev,
      c,
      ev,
    );
  }

  late final _snd_midi_event_encode_bytePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_midi_event_t>, ffi.Int,
              ffi.Pointer<snd_seq_event_t>)>>('snd_midi_event_encode_byte');
  late final _snd_midi_event_encode_byte =
      _snd_midi_event_encode_bytePtr.asFunction<
          int Function(ffi.Pointer<snd_midi_event_t>, int,
              ffi.Pointer<snd_seq_event_t>)>();

  int snd_midi_event_decode(
    ffi.Pointer<snd_midi_event_t> dev,
    ffi.Pointer<ffi.UnsignedChar> buf,
    int count,
    ffi.Pointer<snd_seq_event_t> ev,
  ) {
    return _snd_midi_event_decode(
      dev,
      buf,
      count,
      ev,
    );
  }

  late final _snd_midi_event_decodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(
              ffi.Pointer<snd_midi_event_t>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Long,
              ffi.Pointer<snd_seq_event_t>)>>('snd_midi_event_decode');
  late final _snd_midi_event_decode = _snd_midi_event_decodePtr.asFunction<
      int Function(ffi.Pointer<snd_midi_event_t>, ffi.Pointer<ffi.UnsignedChar>,
          int, ffi.Pointer<snd_seq_event_t>)>();
}

final class _fsid_t_ extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int> _val_;
}

typedef __off_t = ffi.Long;
typedef ssize_t = __ssize_t;
typedef __ssize_t = ffi.Long;
typedef __useconds_t = ffi.UnsignedInt;
typedef __uid_t = ffi.UnsignedInt;
typedef __gid_t = ffi.UnsignedInt;
typedef __pid_t = ffi.Int;

final class _mbstate_t_ extends ffi.Struct {
  @ffi.Int()
  external int _count_;

  external UnnamedUnion1 _value_;
}

final class UnnamedUnion1 extends ffi.Union {
  @ffi.UnsignedInt()
  external int _wch_;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> _wchb_;
}

final class G_fpos_t_ extends ffi.Struct {
  @__off_t()
  external int _pos_;

  external _mbstate_t_ _state_;
}

final class G_fpos64_t_ extends ffi.Struct {
  @__off64_t()
  external int _pos_;

  external _mbstate_t_ _state_;
}

typedef __off64_t = ffi.Long;

final class IO_FILE_ extends ffi.Struct {
  @ffi.Int()
  external int flags_;

  external ffi.Pointer<ffi.Char> IO_read_ptr_;

  external ffi.Pointer<ffi.Char> IO_read_end_;

  external ffi.Pointer<ffi.Char> IO_read_base_;

  external ffi.Pointer<ffi.Char> IO_write_base_;

  external ffi.Pointer<ffi.Char> IO_write_ptr_;

  external ffi.Pointer<ffi.Char> IO_write_end_;

  external ffi.Pointer<ffi.Char> IO_buf_base_;

  external ffi.Pointer<ffi.Char> IO_buf_end_;

  external ffi.Pointer<ffi.Char> IO_save_base_;

  external ffi.Pointer<ffi.Char> IO_backup_base_;

  external ffi.Pointer<ffi.Char> IO_save_end_;

  external ffi.Pointer<IO_marker_> markers_;

  external ffi.Pointer<IO_FILE_> chain_;

  @ffi.Int()
  external int fileno_;

  @ffi.Int()
  external int flags2_;

  @__off_t()
  external int old_offset_;

  @ffi.UnsignedShort()
  external int cur_column_;

  @ffi.SignedChar()
  external int vtable_offset_;

  @ffi.Array.multi([1])
  external ffi.Array<ffi.Char> shortbuf_;

  external ffi.Pointer<_IO_lock_t> lock_;

  @__off64_t()
  external int offset_;

  external ffi.Pointer<IO_codecvt_> codecvt_;

  external ffi.Pointer<IO_wide_data_> wide_data_;

  external ffi.Pointer<IO_FILE_> freeres_list_;

  external ffi.Pointer<ffi.Void> freeres_buf_;

  @ffi.Size()
  external int _pad5_;

  @ffi.Int()
  external int mode_;

  @ffi.Array.multi([20])
  external ffi.Array<ffi.Char> unused2_;
}

final class IO_marker_ extends ffi.Opaque {}

typedef _IO_lock_t = ffi.Void;

final class IO_codecvt_ extends ffi.Opaque {}

final class IO_wide_data_ extends ffi.Opaque {}

typedef FILE = IO_FILE_;

final class _va_list_tag_ extends ffi.Struct {
  @ffi.UnsignedInt()
  external int gp_offset;

  @ffi.UnsignedInt()
  external int fp_offset;

  external ffi.Pointer<ffi.Void> overflow_arg_area;

  external ffi.Pointer<ffi.Void> reg_save_area;
}

typedef fpos_t = __fpos_t;
typedef __fpos_t = G_fpos_t_;

final class div_t extends ffi.Struct {
  @ffi.Int()
  external int quot;

  @ffi.Int()
  external int rem;
}

final class ldiv_t extends ffi.Struct {
  @ffi.Long()
  external int quot;

  @ffi.Long()
  external int rem;
}

final class lldiv_t extends ffi.Struct {
  @ffi.LongLong()
  external int quot;

  @ffi.LongLong()
  external int rem;
}

final class _sigset_t_ extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.UnsignedLong> _val_;
}

final class timeval extends ffi.Struct {
  @__time_t()
  external int tv_sec;

  @__suseconds_t()
  external int tv_usec;
}

typedef __time_t = ffi.Long;
typedef __suseconds_t = ffi.Long;

final class timespec extends ffi.Struct {
  @__time_t()
  external int tv_sec;

  @__syscall_slong_t()
  external int tv_nsec;
}

typedef __syscall_slong_t = ffi.Long;

final class fd_set extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__fd_mask> _fds_bits_;
}

typedef __fd_mask = ffi.Long;

final class __atomic_wide_counter extends ffi.Union {
  @ffi.UnsignedLongLong()
  external int _value64_;

  external UnnamedStruct1 _value32_;
}

final class UnnamedStruct1 extends ffi.Struct {
  @ffi.UnsignedInt()
  external int _low_;

  @ffi.UnsignedInt()
  external int _high_;
}

final class _pthread_internal_list_ extends ffi.Struct {
  external ffi.Pointer<_pthread_internal_list_> _prev_;

  external ffi.Pointer<_pthread_internal_list_> _next_;
}

final class _pthread_internal_slist_ extends ffi.Struct {
  external ffi.Pointer<_pthread_internal_slist_> _next_;
}

final class _pthread_mutex_s_ extends ffi.Struct {
  @ffi.Int()
  external int _lock_;

  @ffi.UnsignedInt()
  external int _count_;

  @ffi.Int()
  external int _owner_;

  @ffi.UnsignedInt()
  external int _nusers_;

  @ffi.Int()
  external int _kind_;

  @ffi.Short()
  external int _spins_;

  @ffi.Short()
  external int _elision_;

  external __pthread_list_t _list_;
}

typedef __pthread_list_t = _pthread_internal_list_;

final class _pthread_rwlock_arch_t_ extends ffi.Struct {
  @ffi.UnsignedInt()
  external int _readers_;

  @ffi.UnsignedInt()
  external int _writers_;

  @ffi.UnsignedInt()
  external int _wrphase_futex_;

  @ffi.UnsignedInt()
  external int _writers_futex_;

  @ffi.UnsignedInt()
  external int _pad3_;

  @ffi.UnsignedInt()
  external int _pad4_;

  @ffi.Int()
  external int _cur_writer_;

  @ffi.Int()
  external int _shared_;

  @ffi.SignedChar()
  external int _rwelision_;

  @ffi.Array.multi([7])
  external ffi.Array<ffi.UnsignedChar> _pad1_;

  @ffi.UnsignedLong()
  external int _pad2_;

  @ffi.UnsignedInt()
  external int _flags_;
}

final class _pthread_cond_s_ extends ffi.Struct {
  external __atomic_wide_counter _wseq_;

  external __atomic_wide_counter _g1_start_;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> _g_refs_;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> _g_size_;

  @ffi.UnsignedInt()
  external int _g1_orig_size_;

  @ffi.UnsignedInt()
  external int _wrefs_;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> _g_signals_;
}

final class _once_flag_ extends ffi.Struct {
  @ffi.Int()
  external int _data_;
}

final class pthread_mutexattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> _size_;

  @ffi.Int()
  external int _align_;
}

final class pthread_condattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> _size_;

  @ffi.Int()
  external int _align_;
}

final class pthread_attr_t extends ffi.Union {
  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> _size_;

  @ffi.Long()
  external int _align_;
}

final class pthread_mutex_t extends ffi.Union {
  external _pthread_mutex_s_ _data_;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Char> _size_;

  @ffi.Long()
  external int _align_;
}

final class pthread_cond_t extends ffi.Union {
  external _pthread_cond_s_ _data_;

  @ffi.Array.multi([48])
  external ffi.Array<ffi.Char> _size_;

  @ffi.LongLong()
  external int _align_;
}

final class pthread_rwlock_t extends ffi.Union {
  external _pthread_rwlock_arch_t_ _data_;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> _size_;

  @ffi.Long()
  external int _align_;
}

final class pthread_rwlockattr_t extends ffi.Union {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> _size_;

  @ffi.Long()
  external int _align_;
}

final class pthread_barrier_t extends ffi.Union {
  @ffi.Array.multi([32])
  external ffi.Array<ffi.Char> _size_;

  @ffi.Long()
  external int _align_;
}

final class pthread_barrierattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> _size_;

  @ffi.Int()
  external int _align_;
}

final class random_data extends ffi.Struct {
  external ffi.Pointer<ffi.Int32> fptr;

  external ffi.Pointer<ffi.Int32> rptr;

  external ffi.Pointer<ffi.Int32> state;

  @ffi.Int()
  external int rand_type;

  @ffi.Int()
  external int rand_deg;

  @ffi.Int()
  external int rand_sep;

  external ffi.Pointer<ffi.Int32> end_ptr;
}

final class drand48_data extends ffi.Struct {
  @ffi.Array.multi([3])
  external ffi.Array<ffi.UnsignedShort> _x_;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.UnsignedShort> _old_x_;

  @ffi.UnsignedShort()
  external int _c_;

  @ffi.UnsignedShort()
  external int _init_;

  @ffi.UnsignedLongLong()
  external int _a_;
}

typedef __compar_fn_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;

final class _locale_struct_ extends ffi.Struct {
  @ffi.Array.multi([13])
  external ffi.Array<ffi.Pointer<_locale_data_>> _locales_;

  external ffi.Pointer<ffi.UnsignedShort> _ctype_b_;

  external ffi.Pointer<ffi.Int> _ctype_tolower_;

  external ffi.Pointer<ffi.Int> _ctype_toupper_;

  @ffi.Array.multi([13])
  external ffi.Array<ffi.Pointer<ffi.Char>> _names_;
}

final class _locale_data_ extends ffi.Opaque {}

typedef locale_t = __locale_t;
typedef __locale_t = ffi.Pointer<_locale_struct_>;

final class flock extends ffi.Struct {
  @ffi.Short()
  external int l_type;

  @ffi.Short()
  external int l_whence;

  @__off_t()
  external int l_start;

  @__off_t()
  external int l_len;

  @__pid_t()
  external int l_pid;
}

final class stat extends ffi.Struct {
  @__dev_t()
  external int st_dev;

  @__ino_t()
  external int st_ino;

  @__nlink_t()
  external int st_nlink;

  @__mode_t()
  external int st_mode;

  @__uid_t()
  external int st_uid;

  @__gid_t()
  external int st_gid;

  @ffi.Int()
  external int _pad0_;

  @__dev_t()
  external int st_rdev;

  @__off_t()
  external int st_size;

  @__blksize_t()
  external int st_blksize;

  @__blkcnt_t()
  external int st_blocks;

  external timespec st_atim;

  external timespec st_mtim;

  external timespec st_ctim;

  @ffi.Array.multi([3])
  external ffi.Array<__syscall_slong_t> _glibc_reserved_;
}

typedef __dev_t = ffi.UnsignedLong;
typedef __ino_t = ffi.UnsignedLong;
typedef __nlink_t = ffi.UnsignedLong;
typedef __mode_t = ffi.UnsignedInt;
typedef __blksize_t = ffi.Long;
typedef __blkcnt_t = ffi.Long;
typedef mode_t = __mode_t;
typedef off_t = __off_t;

final class pollfd extends ffi.Struct {
  @ffi.Int()
  external int fd;

  @ffi.Short()
  external int events;

  @ffi.Short()
  external int revents;
}

typedef nfds_t = ffi.UnsignedLong;

final class tm extends ffi.Struct {
  @ffi.Int()
  external int tm_sec;

  @ffi.Int()
  external int tm_min;

  @ffi.Int()
  external int tm_hour;

  @ffi.Int()
  external int tm_mday;

  @ffi.Int()
  external int tm_mon;

  @ffi.Int()
  external int tm_year;

  @ffi.Int()
  external int tm_wday;

  @ffi.Int()
  external int tm_yday;

  @ffi.Int()
  external int tm_isdst;

  @ffi.Long()
  external int tm_gmtoff;

  external ffi.Pointer<ffi.Char> tm_zone;
}

final class itimerspec extends ffi.Struct {
  external timespec it_interval;

  external timespec it_value;
}

final class sigevent extends ffi.Opaque {}

typedef clock_t = __clock_t;
typedef __clock_t = ffi.Long;
typedef time_t = __time_t;
typedef clockid_t = __clockid_t;
typedef __clockid_t = ffi.Int;
typedef pid_t = __pid_t;
typedef timer_t = __timer_t;
typedef __timer_t = ffi.Pointer<ffi.Void>;

final class snd_dlsym_link extends ffi.Struct {
  external ffi.Pointer<snd_dlsym_link> next;

  external ffi.Pointer<ffi.Char> dlsym_name;

  external ffi.Pointer<ffi.Void> dlsym_ptr;
}

final class snd_async_handler_ extends ffi.Opaque {}

typedef snd_async_handler_t = snd_async_handler_;
typedef snd_async_callback_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<snd_async_handler_t> handler)>>;

final class snd_shm_area extends ffi.Opaque {}

final class snd_input_ extends ffi.Opaque {}

abstract class _snd_input_type {
  static const int SND_INPUT_STDIO = 0;
  static const int SND_INPUT_BUFFER = 1;
}

typedef snd_input_t = snd_input_;

final class snd_output_ extends ffi.Opaque {}

abstract class _snd_output_type {
  static const int SND_OUTPUT_STDIO = 0;
  static const int SND_OUTPUT_BUFFER = 1;
}

typedef snd_output_t = snd_output_;
typedef snd_lib_error_handler_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<ffi.Char> file,
            ffi.Int line,
            ffi.Pointer<ffi.Char> function,
            ffi.Int err,
            ffi.Pointer<ffi.Char> fmt)>>;
typedef snd_local_error_handler_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<ffi.Char> file,
            ffi.Int line,
            ffi.Pointer<ffi.Char> func,
            ffi.Int err,
            ffi.Pointer<ffi.Char> fmt,
            ffi.Pointer<_va_list_tag_> arg)>>;

abstract class _snd_config_type {
  static const int SND_CONFIG_TYPE_INTEGER = 0;
  static const int SND_CONFIG_TYPE_INTEGER64 = 1;
  static const int SND_CONFIG_TYPE_REAL = 2;
  static const int SND_CONFIG_TYPE_STRING = 3;
  static const int SND_CONFIG_TYPE_POINTER = 4;
  static const int SND_CONFIG_TYPE_COMPOUND = 1024;
}

final class snd_config_ extends ffi.Opaque {}

final class snd_config_iterator_ extends ffi.Opaque {}

final class snd_config_update_ extends ffi.Opaque {}

typedef snd_config_t = snd_config_;
typedef snd_config_update_t = snd_config_update_;
typedef snd_config_expand_fcn_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(ffi.Pointer<ffi.Pointer<snd_config_t>> dst,
            ffi.Pointer<ffi.Char> s, ffi.Pointer<ffi.Void> private_data)>>;
typedef snd_config_iterator_t = ffi.Pointer<snd_config_iterator_>;

final class snd_devname extends ffi.Struct {
  external ffi.Pointer<ffi.Char> name;

  external ffi.Pointer<ffi.Char> comment;

  external ffi.Pointer<snd_devname_t> next;
}

typedef snd_devname_t = snd_devname;

final class snd_pcm_info_ extends ffi.Opaque {}

final class snd_pcm_hw_params_ extends ffi.Opaque {}

final class snd_pcm_sw_params_ extends ffi.Opaque {}

final class snd_pcm_status_ extends ffi.Opaque {}

final class snd_pcm_access_mask_ extends ffi.Opaque {}

final class snd_pcm_format_mask_ extends ffi.Opaque {}

final class snd_pcm_subformat_mask_ extends ffi.Opaque {}

abstract class _snd_pcm_class {
  static const int SND_PCM_CLASS_GENERIC = 0;
  static const int SND_PCM_CLASS_MULTI = 1;
  static const int SND_PCM_CLASS_MODEM = 2;
  static const int SND_PCM_CLASS_DIGITIZER = 3;
  static const int SND_PCM_CLASS_LAST = 3;
}

abstract class _snd_pcm_subclass {
  static const int SND_PCM_SUBCLASS_GENERIC_MIX = 0;
  static const int SND_PCM_SUBCLASS_MULTI_MIX = 1;
  static const int SND_PCM_SUBCLASS_LAST = 1;
}

abstract class _snd_pcm_stream {
  static const int SND_PCM_STREAM_PLAYBACK = 0;
  static const int SND_PCM_STREAM_CAPTURE = 1;
  static const int SND_PCM_STREAM_LAST = 1;
}

abstract class _snd_pcm_access {
  static const int SND_PCM_ACCESS_MMAP_INTERLEAVED = 0;
  static const int SND_PCM_ACCESS_MMAP_NONINTERLEAVED = 1;
  static const int SND_PCM_ACCESS_MMAP_COMPLEX = 2;
  static const int SND_PCM_ACCESS_RW_INTERLEAVED = 3;
  static const int SND_PCM_ACCESS_RW_NONINTERLEAVED = 4;
  static const int SND_PCM_ACCESS_LAST = 4;
}

abstract class _snd_pcm_format {
  static const int SND_PCM_FORMAT_UNKNOWN = -1;
  static const int SND_PCM_FORMAT_S8 = 0;
  static const int SND_PCM_FORMAT_U8 = 1;
  static const int SND_PCM_FORMAT_S16_LE = 2;
  static const int SND_PCM_FORMAT_S16_BE = 3;
  static const int SND_PCM_FORMAT_U16_LE = 4;
  static const int SND_PCM_FORMAT_U16_BE = 5;
  static const int SND_PCM_FORMAT_S24_LE = 6;
  static const int SND_PCM_FORMAT_S24_BE = 7;
  static const int SND_PCM_FORMAT_U24_LE = 8;
  static const int SND_PCM_FORMAT_U24_BE = 9;
  static const int SND_PCM_FORMAT_S32_LE = 10;
  static const int SND_PCM_FORMAT_S32_BE = 11;
  static const int SND_PCM_FORMAT_U32_LE = 12;
  static const int SND_PCM_FORMAT_U32_BE = 13;
  static const int SND_PCM_FORMAT_FLOAT_LE = 14;
  static const int SND_PCM_FORMAT_FLOAT_BE = 15;
  static const int SND_PCM_FORMAT_FLOAT64_LE = 16;
  static const int SND_PCM_FORMAT_FLOAT64_BE = 17;
  static const int SND_PCM_FORMAT_IEC958_SUBFRAME_LE = 18;
  static const int SND_PCM_FORMAT_IEC958_SUBFRAME_BE = 19;
  static const int SND_PCM_FORMAT_MU_LAW = 20;
  static const int SND_PCM_FORMAT_A_LAW = 21;
  static const int SND_PCM_FORMAT_IMA_ADPCM = 22;
  static const int SND_PCM_FORMAT_MPEG = 23;
  static const int SND_PCM_FORMAT_GSM = 24;
  static const int SND_PCM_FORMAT_S20_LE = 25;
  static const int SND_PCM_FORMAT_S20_BE = 26;
  static const int SND_PCM_FORMAT_U20_LE = 27;
  static const int SND_PCM_FORMAT_U20_BE = 28;
  static const int SND_PCM_FORMAT_SPECIAL = 31;
  static const int SND_PCM_FORMAT_S24_3LE = 32;
  static const int SND_PCM_FORMAT_S24_3BE = 33;
  static const int SND_PCM_FORMAT_U24_3LE = 34;
  static const int SND_PCM_FORMAT_U24_3BE = 35;
  static const int SND_PCM_FORMAT_S20_3LE = 36;
  static const int SND_PCM_FORMAT_S20_3BE = 37;
  static const int SND_PCM_FORMAT_U20_3LE = 38;
  static const int SND_PCM_FORMAT_U20_3BE = 39;
  static const int SND_PCM_FORMAT_S18_3LE = 40;
  static const int SND_PCM_FORMAT_S18_3BE = 41;
  static const int SND_PCM_FORMAT_U18_3LE = 42;
  static const int SND_PCM_FORMAT_U18_3BE = 43;
  static const int SND_PCM_FORMAT_G723_24 = 44;
  static const int SND_PCM_FORMAT_G723_24_1B = 45;
  static const int SND_PCM_FORMAT_G723_40 = 46;
  static const int SND_PCM_FORMAT_G723_40_1B = 47;
  static const int SND_PCM_FORMAT_DSD_U8 = 48;
  static const int SND_PCM_FORMAT_DSD_U16_LE = 49;
  static const int SND_PCM_FORMAT_DSD_U32_LE = 50;
  static const int SND_PCM_FORMAT_DSD_U16_BE = 51;
  static const int SND_PCM_FORMAT_DSD_U32_BE = 52;
  static const int SND_PCM_FORMAT_LAST = 52;
  static const int SND_PCM_FORMAT_S16 = 2;
  static const int SND_PCM_FORMAT_U16 = 4;
  static const int SND_PCM_FORMAT_S24 = 6;
  static const int SND_PCM_FORMAT_U24 = 8;
  static const int SND_PCM_FORMAT_S32 = 10;
  static const int SND_PCM_FORMAT_U32 = 12;
  static const int SND_PCM_FORMAT_FLOAT = 14;
  static const int SND_PCM_FORMAT_FLOAT64 = 16;
  static const int SND_PCM_FORMAT_IEC958_SUBFRAME = 18;
  static const int SND_PCM_FORMAT_S20 = 25;
  static const int SND_PCM_FORMAT_U20 = 27;
}

abstract class _snd_pcm_subformat {
  static const int SND_PCM_SUBFORMAT_STD = 0;
  static const int SND_PCM_SUBFORMAT_LAST = 0;
}

abstract class _snd_pcm_state {
  static const int SND_PCM_STATE_OPEN = 0;
  static const int SND_PCM_STATE_SETUP = 1;
  static const int SND_PCM_STATE_PREPARED = 2;
  static const int SND_PCM_STATE_RUNNING = 3;
  static const int SND_PCM_STATE_XRUN = 4;
  static const int SND_PCM_STATE_DRAINING = 5;
  static const int SND_PCM_STATE_PAUSED = 6;
  static const int SND_PCM_STATE_SUSPENDED = 7;
  static const int SND_PCM_STATE_DISCONNECTED = 8;
  static const int SND_PCM_STATE_LAST = 8;
  static const int SND_PCM_STATE_PRIVATE1 = 1024;
}

abstract class _snd_pcm_start {
  static const int SND_PCM_START_DATA = 0;
  static const int SND_PCM_START_EXPLICIT = 1;
  static const int SND_PCM_START_LAST = 1;
}

abstract class _snd_pcm_xrun {
  static const int SND_PCM_XRUN_NONE = 0;
  static const int SND_PCM_XRUN_STOP = 1;
  static const int SND_PCM_XRUN_LAST = 1;
}

abstract class _snd_pcm_tstamp {
  static const int SND_PCM_TSTAMP_NONE = 0;
  static const int SND_PCM_TSTAMP_ENABLE = 1;
  static const int SND_PCM_TSTAMP_MMAP = 1;
  static const int SND_PCM_TSTAMP_LAST = 1;
}

abstract class _snd_pcm_tstamp_type {
  static const int SND_PCM_TSTAMP_TYPE_GETTIMEOFDAY = 0;
  static const int SND_PCM_TSTAMP_TYPE_MONOTONIC = 1;
  static const int SND_PCM_TSTAMP_TYPE_MONOTONIC_RAW = 2;
  static const int SND_PCM_TSTAMP_TYPE_LAST = 2;
}

abstract class _snd_pcm_audio_tstamp_type {
  static const int SND_PCM_AUDIO_TSTAMP_TYPE_COMPAT = 0;
  static const int SND_PCM_AUDIO_TSTAMP_TYPE_DEFAULT = 1;
  static const int SND_PCM_AUDIO_TSTAMP_TYPE_LINK = 2;
  static const int SND_PCM_AUDIO_TSTAMP_TYPE_LINK_ABSOLUTE = 3;
  static const int SND_PCM_AUDIO_TSTAMP_TYPE_LINK_ESTIMATED = 4;
  static const int SND_PCM_AUDIO_TSTAMP_TYPE_LINK_SYNCHRONIZED = 5;
  static const int SND_PCM_AUDIO_TSTAMP_TYPE_LAST = 5;
}

final class snd_pcm_audio_tstamp_config_ extends ffi.Opaque {}

final class snd_pcm_audio_tstamp_report_ extends ffi.Opaque {}

final class snd_pcm_ extends ffi.Opaque {}

abstract class _snd_pcm_type {
  static const int SND_PCM_TYPE_HW = 0;
  static const int SND_PCM_TYPE_HOOKS = 1;
  static const int SND_PCM_TYPE_MULTI = 2;
  static const int SND_PCM_TYPE_FILE = 3;
  static const int SND_PCM_TYPE_NULL = 4;
  static const int SND_PCM_TYPE_SHM = 5;
  static const int SND_PCM_TYPE_INET = 6;
  static const int SND_PCM_TYPE_COPY = 7;
  static const int SND_PCM_TYPE_LINEAR = 8;
  static const int SND_PCM_TYPE_ALAW = 9;
  static const int SND_PCM_TYPE_MULAW = 10;
  static const int SND_PCM_TYPE_ADPCM = 11;
  static const int SND_PCM_TYPE_RATE = 12;
  static const int SND_PCM_TYPE_ROUTE = 13;
  static const int SND_PCM_TYPE_PLUG = 14;
  static const int SND_PCM_TYPE_SHARE = 15;
  static const int SND_PCM_TYPE_METER = 16;
  static const int SND_PCM_TYPE_MIX = 17;
  static const int SND_PCM_TYPE_DROUTE = 18;
  static const int SND_PCM_TYPE_LBSERVER = 19;
  static const int SND_PCM_TYPE_LINEAR_FLOAT = 20;
  static const int SND_PCM_TYPE_LADSPA = 21;
  static const int SND_PCM_TYPE_DMIX = 22;
  static const int SND_PCM_TYPE_JACK = 23;
  static const int SND_PCM_TYPE_DSNOOP = 24;
  static const int SND_PCM_TYPE_DSHARE = 25;
  static const int SND_PCM_TYPE_IEC958 = 26;
  static const int SND_PCM_TYPE_SOFTVOL = 27;
  static const int SND_PCM_TYPE_IOPLUG = 28;
  static const int SND_PCM_TYPE_EXTPLUG = 29;
  static const int SND_PCM_TYPE_MMAP_EMUL = 30;
  static const int SND_PCM_TYPE_LAST = 30;
}

final class snd_pcm_channel_area_ extends ffi.Struct {
  external ffi.Pointer<ffi.Void> addr;

  @ffi.UnsignedInt()
  external int first;

  @ffi.UnsignedInt()
  external int step;
}

final class _snd_pcm_sync_id extends ffi.Union {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.UnsignedChar> id;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.UnsignedShort> id16;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.UnsignedInt> id32;
}

final class snd_pcm_scope_ extends ffi.Opaque {}

typedef snd_pcm_t = snd_pcm_;
typedef snd_pcm_info_t = snd_pcm_info_;
typedef snd_pcm_hw_params_t = snd_pcm_hw_params_;
typedef snd_pcm_sw_params_t = snd_pcm_sw_params_;
typedef snd_pcm_status_t = snd_pcm_status_;
typedef snd_pcm_sframes_t = ffi.Long;
typedef snd_pcm_uframes_t = ffi.UnsignedLong;
typedef snd_htimestamp_t = timespec;

abstract class snd_pcm_chmap_type {
  static const int SND_CHMAP_TYPE_NONE = 0;
  static const int SND_CHMAP_TYPE_FIXED = 1;
  static const int SND_CHMAP_TYPE_VAR = 2;
  static const int SND_CHMAP_TYPE_PAIRED = 3;
  static const int SND_CHMAP_TYPE_LAST = 3;
}

abstract class snd_pcm_chmap_position {
  static const int SND_CHMAP_UNKNOWN = 0;
  static const int SND_CHMAP_NA = 1;
  static const int SND_CHMAP_MONO = 2;
  static const int SND_CHMAP_FL = 3;
  static const int SND_CHMAP_FR = 4;
  static const int SND_CHMAP_RL = 5;
  static const int SND_CHMAP_RR = 6;
  static const int SND_CHMAP_FC = 7;
  static const int SND_CHMAP_LFE = 8;
  static const int SND_CHMAP_SL = 9;
  static const int SND_CHMAP_SR = 10;
  static const int SND_CHMAP_RC = 11;
  static const int SND_CHMAP_FLC = 12;
  static const int SND_CHMAP_FRC = 13;
  static const int SND_CHMAP_RLC = 14;
  static const int SND_CHMAP_RRC = 15;
  static const int SND_CHMAP_FLW = 16;
  static const int SND_CHMAP_FRW = 17;
  static const int SND_CHMAP_FLH = 18;
  static const int SND_CHMAP_FCH = 19;
  static const int SND_CHMAP_FRH = 20;
  static const int SND_CHMAP_TC = 21;
  static const int SND_CHMAP_TFL = 22;
  static const int SND_CHMAP_TFR = 23;
  static const int SND_CHMAP_TFC = 24;
  static const int SND_CHMAP_TRL = 25;
  static const int SND_CHMAP_TRR = 26;
  static const int SND_CHMAP_TRC = 27;
  static const int SND_CHMAP_TFLC = 28;
  static const int SND_CHMAP_TFRC = 29;
  static const int SND_CHMAP_TSL = 30;
  static const int SND_CHMAP_TSR = 31;
  static const int SND_CHMAP_LLFE = 32;
  static const int SND_CHMAP_RLFE = 33;
  static const int SND_CHMAP_BC = 34;
  static const int SND_CHMAP_BLC = 35;
  static const int SND_CHMAP_BRC = 36;
  static const int SND_CHMAP_LAST = 36;
}

final class snd_pcm_chmap extends ffi.Opaque {}

final class snd_pcm_chmap_query extends ffi.Opaque {}

typedef snd_pcm_chmap_query_t = snd_pcm_chmap_query;
typedef snd_pcm_chmap_t = snd_pcm_chmap;
typedef snd_pcm_sync_id_t = _snd_pcm_sync_id;
typedef snd_pcm_access_mask_t = snd_pcm_access_mask_;
typedef snd_pcm_format_mask_t = snd_pcm_format_mask_;
typedef snd_pcm_subformat_mask_t = snd_pcm_subformat_mask_;
typedef snd_timestamp_t = timeval;
typedef snd_pcm_audio_tstamp_report_t = snd_pcm_audio_tstamp_report_;
typedef snd_pcm_audio_tstamp_config_t = snd_pcm_audio_tstamp_config_;
typedef snd_pcm_channel_area_t = snd_pcm_channel_area_;

abstract class _snd_pcm_hook_type {
  static const int SND_PCM_HOOK_TYPE_HW_PARAMS = 0;
  static const int SND_PCM_HOOK_TYPE_HW_FREE = 1;
  static const int SND_PCM_HOOK_TYPE_CLOSE = 2;
  static const int SND_PCM_HOOK_TYPE_LAST = 2;
}

final class snd_pcm_hook_ extends ffi.Opaque {}

typedef snd_pcm_hook_t = snd_pcm_hook_;
typedef snd_pcm_hook_func_t = ffi.Pointer<
    ffi.NativeFunction<ffi.Int Function(ffi.Pointer<snd_pcm_hook_t> hook)>>;

final class snd_pcm_scope_ops_ extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<snd_pcm_scope_t> scope)>> enable;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_pcm_scope_t> scope)>> disable;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_pcm_scope_t> scope)>> start;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_pcm_scope_t> scope)>> stop;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_pcm_scope_t> scope)>> update;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_pcm_scope_t> scope)>> reset;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<snd_pcm_scope_t> scope)>> close;
}

typedef snd_pcm_scope_t = snd_pcm_scope_;
typedef snd_pcm_scope_ops_t = snd_pcm_scope_ops_;

abstract class _snd_spcm_latency {
  static const int SND_SPCM_LATENCY_STANDARD = 0;
  static const int SND_SPCM_LATENCY_MEDIUM = 1;
  static const int SND_SPCM_LATENCY_REALTIME = 2;
}

abstract class _snd_spcm_xrun_type {
  static const int SND_SPCM_XRUN_IGNORE = 0;
  static const int SND_SPCM_XRUN_STOP = 1;
}

abstract class _snd_spcm_duplex_type {
  static const int SND_SPCM_DUPLEX_LIBERAL = 0;
  static const int SND_SPCM_DUPLEX_PEDANTIC = 1;
}

final class snd_rawmidi_info_ extends ffi.Opaque {}

final class snd_rawmidi_params_ extends ffi.Opaque {}

final class snd_rawmidi_status_ extends ffi.Opaque {}

abstract class _snd_rawmidi_stream {
  static const int SND_RAWMIDI_STREAM_OUTPUT = 0;
  static const int SND_RAWMIDI_STREAM_INPUT = 1;
  static const int SND_RAWMIDI_STREAM_LAST = 1;
}

final class snd_rawmidi_ extends ffi.Opaque {}

abstract class _snd_rawmidi_type {
  static const int SND_RAWMIDI_TYPE_HW = 0;
  static const int SND_RAWMIDI_TYPE_SHM = 1;
  static const int SND_RAWMIDI_TYPE_INET = 2;
  static const int SND_RAWMIDI_TYPE_VIRTUAL = 3;
}

abstract class _snd_rawmidi_clock {
  static const int SND_RAWMIDI_CLOCK_NONE = 0;
  static const int SND_RAWMIDI_CLOCK_REALTIME = 1;
  static const int SND_RAWMIDI_CLOCK_MONOTONIC = 2;
  static const int SND_RAWMIDI_CLOCK_MONOTONIC_RAW = 3;
}

abstract class _snd_rawmidi_read_mode {
  static const int SND_RAWMIDI_READ_STANDARD = 0;
  static const int SND_RAWMIDI_READ_TSTAMP = 1;
}

typedef snd_rawmidi_t = snd_rawmidi_;
typedef snd_rawmidi_info_t = snd_rawmidi_info_;
typedef snd_rawmidi_params_t = snd_rawmidi_params_;
typedef snd_rawmidi_status_t = snd_rawmidi_status_;

final class snd_timer_id_ extends ffi.Opaque {}

final class snd_timer_ginfo_ extends ffi.Opaque {}

final class snd_timer_gparams_ extends ffi.Opaque {}

final class snd_timer_gstatus_ extends ffi.Opaque {}

final class snd_timer_info_ extends ffi.Opaque {}

final class snd_timer_params_ extends ffi.Opaque {}

final class snd_timer_status_ extends ffi.Opaque {}

abstract class _snd_timer_class {
  static const int SND_TIMER_CLASS_NONE = -1;
  static const int SND_TIMER_CLASS_SLAVE = 0;
  static const int SND_TIMER_CLASS_GLOBAL = 1;
  static const int SND_TIMER_CLASS_CARD = 2;
  static const int SND_TIMER_CLASS_PCM = 3;
  static const int SND_TIMER_CLASS_LAST = 3;
}

abstract class _snd_timer_slave_class {
  static const int SND_TIMER_SCLASS_NONE = 0;
  static const int SND_TIMER_SCLASS_APPLICATION = 1;
  static const int SND_TIMER_SCLASS_SEQUENCER = 2;
  static const int SND_TIMER_SCLASS_OSS_SEQUENCER = 3;
  static const int SND_TIMER_SCLASS_LAST = 3;
}

abstract class _snd_timer_event {
  static const int SND_TIMER_EVENT_RESOLUTION = 0;
  static const int SND_TIMER_EVENT_TICK = 1;
  static const int SND_TIMER_EVENT_START = 2;
  static const int SND_TIMER_EVENT_STOP = 3;
  static const int SND_TIMER_EVENT_CONTINUE = 4;
  static const int SND_TIMER_EVENT_PAUSE = 5;
  static const int SND_TIMER_EVENT_EARLY = 6;
  static const int SND_TIMER_EVENT_SUSPEND = 7;
  static const int SND_TIMER_EVENT_RESUME = 8;
  static const int SND_TIMER_EVENT_MSTART = 12;
  static const int SND_TIMER_EVENT_MSTOP = 13;
  static const int SND_TIMER_EVENT_MCONTINUE = 14;
  static const int SND_TIMER_EVENT_MPAUSE = 15;
  static const int SND_TIMER_EVENT_MSUSPEND = 17;
  static const int SND_TIMER_EVENT_MRESUME = 18;
}

final class snd_timer_read_ extends ffi.Struct {
  @ffi.UnsignedInt()
  external int resolution;

  @ffi.UnsignedInt()
  external int ticks;
}

final class snd_timer_tread_ extends ffi.Struct {
  @ffi.Int32()
  external int event;

  external snd_htimestamp_t tstamp;

  @ffi.UnsignedInt()
  external int val;
}

abstract class _snd_timer_type {
  static const int SND_TIMER_TYPE_HW = 0;
  static const int SND_TIMER_TYPE_SHM = 1;
  static const int SND_TIMER_TYPE_INET = 2;
}

final class snd_timer_query_ extends ffi.Opaque {}

final class snd_timer_ extends ffi.Opaque {}

typedef snd_timer_query_t = snd_timer_query_;
typedef snd_timer_id_t = snd_timer_id_;
typedef snd_timer_ginfo_t = snd_timer_ginfo_;
typedef snd_timer_gparams_t = snd_timer_gparams_;
typedef snd_timer_gstatus_t = snd_timer_gstatus_;
typedef snd_timer_t = snd_timer_;
typedef snd_timer_info_t = snd_timer_info_;
typedef snd_timer_params_t = snd_timer_params_;
typedef snd_timer_status_t = snd_timer_status_;

final class snd_hwdep_info_ extends ffi.Opaque {}

final class snd_hwdep_dsp_status_ extends ffi.Opaque {}

final class snd_hwdep_dsp_image_ extends ffi.Opaque {}

abstract class _snd_hwdep_iface {
  static const int SND_HWDEP_IFACE_OPL2 = 0;
  static const int SND_HWDEP_IFACE_OPL3 = 1;
  static const int SND_HWDEP_IFACE_OPL4 = 2;
  static const int SND_HWDEP_IFACE_SB16CSP = 3;
  static const int SND_HWDEP_IFACE_EMU10K1 = 4;
  static const int SND_HWDEP_IFACE_YSS225 = 5;
  static const int SND_HWDEP_IFACE_ICS2115 = 6;
  static const int SND_HWDEP_IFACE_SSCAPE = 7;
  static const int SND_HWDEP_IFACE_VX = 8;
  static const int SND_HWDEP_IFACE_MIXART = 9;
  static const int SND_HWDEP_IFACE_USX2Y = 10;
  static const int SND_HWDEP_IFACE_EMUX_WAVETABLE = 11;
  static const int SND_HWDEP_IFACE_BLUETOOTH = 12;
  static const int SND_HWDEP_IFACE_USX2Y_PCM = 13;
  static const int SND_HWDEP_IFACE_PCXHR = 14;
  static const int SND_HWDEP_IFACE_SB_RC = 15;
  static const int SND_HWDEP_IFACE_HDA = 16;
  static const int SND_HWDEP_IFACE_USB_STREAM = 17;
  static const int SND_HWDEP_IFACE_FW_DICE = 18;
  static const int SND_HWDEP_IFACE_FW_FIREWORKS = 19;
  static const int SND_HWDEP_IFACE_FW_BEBOB = 20;
  static const int SND_HWDEP_IFACE_FW_OXFW = 21;
  static const int SND_HWDEP_IFACE_FW_DIGI00X = 22;
  static const int SND_HWDEP_IFACE_FW_TASCAM = 23;
  static const int SND_HWDEP_IFACE_LINE6 = 24;
  static const int SND_HWDEP_IFACE_FW_MOTU = 25;
  static const int SND_HWDEP_IFACE_FW_FIREFACE = 26;
  static const int SND_HWDEP_IFACE_LAST = 26;
}

abstract class _snd_hwdep_type {
  static const int SND_HWDEP_TYPE_HW = 0;
  static const int SND_HWDEP_TYPE_SHM = 1;
  static const int SND_HWDEP_TYPE_INET = 2;
}

final class snd_hwdep_ extends ffi.Opaque {}

typedef snd_hwdep_t = snd_hwdep_;
typedef snd_hwdep_info_t = snd_hwdep_info_;
typedef snd_hwdep_dsp_status_t = snd_hwdep_dsp_status_;
typedef snd_hwdep_dsp_image_t = snd_hwdep_dsp_image_;

final class snd_aes_iec958 extends ffi.Struct {
  @ffi.Array.multi([24])
  external ffi.Array<ffi.UnsignedChar> status;

  @ffi.Array.multi([147])
  external ffi.Array<ffi.UnsignedChar> subcode;

  @ffi.UnsignedChar()
  external int pad;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.UnsignedChar> dig_subframe;
}

final class snd_ctl_card_info_ extends ffi.Opaque {}

final class snd_ctl_elem_id_ extends ffi.Opaque {}

final class snd_ctl_elem_list_ extends ffi.Opaque {}

final class snd_ctl_elem_info_ extends ffi.Opaque {}

final class snd_ctl_elem_value_ extends ffi.Opaque {}

final class snd_ctl_event_ extends ffi.Opaque {}

abstract class _snd_ctl_elem_type {
  static const int SND_CTL_ELEM_TYPE_NONE = 0;
  static const int SND_CTL_ELEM_TYPE_BOOLEAN = 1;
  static const int SND_CTL_ELEM_TYPE_INTEGER = 2;
  static const int SND_CTL_ELEM_TYPE_ENUMERATED = 3;
  static const int SND_CTL_ELEM_TYPE_BYTES = 4;
  static const int SND_CTL_ELEM_TYPE_IEC958 = 5;
  static const int SND_CTL_ELEM_TYPE_INTEGER64 = 6;
  static const int SND_CTL_ELEM_TYPE_LAST = 6;
}

abstract class _snd_ctl_elem_iface {
  static const int SND_CTL_ELEM_IFACE_CARD = 0;
  static const int SND_CTL_ELEM_IFACE_HWDEP = 1;
  static const int SND_CTL_ELEM_IFACE_MIXER = 2;
  static const int SND_CTL_ELEM_IFACE_PCM = 3;
  static const int SND_CTL_ELEM_IFACE_RAWMIDI = 4;
  static const int SND_CTL_ELEM_IFACE_TIMER = 5;
  static const int SND_CTL_ELEM_IFACE_SEQUENCER = 6;
  static const int SND_CTL_ELEM_IFACE_LAST = 6;
}

abstract class _snd_ctl_event_type {
  static const int SND_CTL_EVENT_ELEM = 0;
  static const int SND_CTL_EVENT_LAST = 0;
}

abstract class _snd_ctl_type {
  static const int SND_CTL_TYPE_HW = 0;
  static const int SND_CTL_TYPE_SHM = 1;
  static const int SND_CTL_TYPE_INET = 2;
  static const int SND_CTL_TYPE_EXT = 3;
  static const int SND_CTL_TYPE_REMAP = 4;
}

final class snd_ctl_ extends ffi.Opaque {}

final class snd_sctl_ extends ffi.Opaque {}

typedef snd_ctl_t = snd_ctl_;
typedef snd_ctl_card_info_t = snd_ctl_card_info_;
typedef snd_ctl_elem_list_t = snd_ctl_elem_list_;
typedef snd_ctl_elem_info_t = snd_ctl_elem_info_;
typedef snd_ctl_elem_value_t = snd_ctl_elem_value_;
typedef snd_ctl_elem_id_t = snd_ctl_elem_id_;
typedef snd_ctl_event_t = snd_ctl_event_;
typedef snd_aes_iec958_t = snd_aes_iec958;

final class snd_hctl_elem_ extends ffi.Opaque {}

final class snd_hctl_ extends ffi.Opaque {}

typedef snd_hctl_elem_t = snd_hctl_elem_;
typedef snd_hctl_t = snd_hctl_;
typedef snd_hctl_compare_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(
            ffi.Pointer<snd_hctl_elem_t> e1, ffi.Pointer<snd_hctl_elem_t> e2)>>;
typedef snd_hctl_callback_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(ffi.Pointer<snd_hctl_t> hctl, ffi.UnsignedInt mask,
            ffi.Pointer<snd_hctl_elem_t> elem)>>;
typedef snd_hctl_elem_callback_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(
            ffi.Pointer<snd_hctl_elem_t> elem, ffi.UnsignedInt mask)>>;
typedef snd_sctl_t = snd_sctl_;

final class snd_mixer_ extends ffi.Opaque {}

final class snd_mixer_class_ extends ffi.Opaque {}

final class snd_mixer_elem_ extends ffi.Opaque {}

abstract class _snd_mixer_elem_type {
  static const int SND_MIXER_ELEM_SIMPLE = 0;
  static const int SND_MIXER_ELEM_LAST = 0;
}

typedef snd_mixer_t = snd_mixer_;
typedef snd_mixer_elem_t = snd_mixer_elem_;
typedef snd_mixer_compare_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(ffi.Pointer<snd_mixer_elem_t> e1,
            ffi.Pointer<snd_mixer_elem_t> e2)>>;
typedef snd_mixer_callback_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(ffi.Pointer<snd_mixer_t> ctl, ffi.UnsignedInt mask,
            ffi.Pointer<snd_mixer_elem_t> elem)>>;
typedef snd_mixer_class_t = snd_mixer_class_;
typedef snd_mixer_elem_callback_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(
            ffi.Pointer<snd_mixer_elem_t> elem, ffi.UnsignedInt mask)>>;
typedef snd_mixer_event_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(
            ffi.Pointer<snd_mixer_class_t> class_,
            ffi.UnsignedInt mask,
            ffi.Pointer<snd_hctl_elem_t> helem,
            ffi.Pointer<snd_mixer_elem_t> melem)>>;

abstract class _snd_mixer_selem_channel_id {
  static const int SND_MIXER_SCHN_UNKNOWN = -1;
  static const int SND_MIXER_SCHN_FRONT_LEFT = 0;
  static const int SND_MIXER_SCHN_FRONT_RIGHT = 1;
  static const int SND_MIXER_SCHN_REAR_LEFT = 2;
  static const int SND_MIXER_SCHN_REAR_RIGHT = 3;
  static const int SND_MIXER_SCHN_FRONT_CENTER = 4;
  static const int SND_MIXER_SCHN_WOOFER = 5;
  static const int SND_MIXER_SCHN_SIDE_LEFT = 6;
  static const int SND_MIXER_SCHN_SIDE_RIGHT = 7;
  static const int SND_MIXER_SCHN_REAR_CENTER = 8;
  static const int SND_MIXER_SCHN_LAST = 31;
  static const int SND_MIXER_SCHN_MONO = 0;
}

abstract class snd_mixer_selem_regopt_abstract {
  static const int SND_MIXER_SABSTRACT_NONE = 0;
  static const int SND_MIXER_SABSTRACT_BASIC = 1;
}

final class snd_mixer_selem_regopt extends ffi.Struct {
  @ffi.Int()
  external int ver;

  @ffi.Int32()
  external int abstract1;

  external ffi.Pointer<ffi.Char> device;

  external ffi.Pointer<snd_pcm_t> playback_pcm;

  external ffi.Pointer<snd_pcm_t> capture_pcm;
}

final class snd_mixer_selem_id_ extends ffi.Opaque {}

typedef snd_mixer_selem_id_t = snd_mixer_selem_id_;

abstract class snd_seq_event_type {
  static const int SND_SEQ_EVENT_SYSTEM = 0;
  static const int SND_SEQ_EVENT_RESULT = 1;
  static const int SND_SEQ_EVENT_NOTE = 5;
  static const int SND_SEQ_EVENT_NOTEON = 6;
  static const int SND_SEQ_EVENT_NOTEOFF = 7;
  static const int SND_SEQ_EVENT_KEYPRESS = 8;
  static const int SND_SEQ_EVENT_CONTROLLER = 10;
  static const int SND_SEQ_EVENT_PGMCHANGE = 11;
  static const int SND_SEQ_EVENT_CHANPRESS = 12;
  static const int SND_SEQ_EVENT_PITCHBEND = 13;
  static const int SND_SEQ_EVENT_CONTROL14 = 14;
  static const int SND_SEQ_EVENT_NONREGPARAM = 15;
  static const int SND_SEQ_EVENT_REGPARAM = 16;
  static const int SND_SEQ_EVENT_SONGPOS = 20;
  static const int SND_SEQ_EVENT_SONGSEL = 21;
  static const int SND_SEQ_EVENT_QFRAME = 22;
  static const int SND_SEQ_EVENT_TIMESIGN = 23;
  static const int SND_SEQ_EVENT_KEYSIGN = 24;
  static const int SND_SEQ_EVENT_START = 30;
  static const int SND_SEQ_EVENT_CONTINUE = 31;
  static const int SND_SEQ_EVENT_STOP = 32;
  static const int SND_SEQ_EVENT_SETPOS_TICK = 33;
  static const int SND_SEQ_EVENT_SETPOS_TIME = 34;
  static const int SND_SEQ_EVENT_TEMPO = 35;
  static const int SND_SEQ_EVENT_CLOCK = 36;
  static const int SND_SEQ_EVENT_TICK = 37;
  static const int SND_SEQ_EVENT_QUEUE_SKEW = 38;
  static const int SND_SEQ_EVENT_SYNC_POS = 39;
  static const int SND_SEQ_EVENT_TUNE_REQUEST = 40;
  static const int SND_SEQ_EVENT_RESET = 41;
  static const int SND_SEQ_EVENT_SENSING = 42;
  static const int SND_SEQ_EVENT_ECHO = 50;
  static const int SND_SEQ_EVENT_OSS = 51;
  static const int SND_SEQ_EVENT_CLIENT_START = 60;
  static const int SND_SEQ_EVENT_CLIENT_EXIT = 61;
  static const int SND_SEQ_EVENT_CLIENT_CHANGE = 62;
  static const int SND_SEQ_EVENT_PORT_START = 63;
  static const int SND_SEQ_EVENT_PORT_EXIT = 64;
  static const int SND_SEQ_EVENT_PORT_CHANGE = 65;
  static const int SND_SEQ_EVENT_PORT_SUBSCRIBED = 66;
  static const int SND_SEQ_EVENT_PORT_UNSUBSCRIBED = 67;
  static const int SND_SEQ_EVENT_USR0 = 90;
  static const int SND_SEQ_EVENT_USR1 = 91;
  static const int SND_SEQ_EVENT_USR2 = 92;
  static const int SND_SEQ_EVENT_USR3 = 93;
  static const int SND_SEQ_EVENT_USR4 = 94;
  static const int SND_SEQ_EVENT_USR5 = 95;
  static const int SND_SEQ_EVENT_USR6 = 96;
  static const int SND_SEQ_EVENT_USR7 = 97;
  static const int SND_SEQ_EVENT_USR8 = 98;
  static const int SND_SEQ_EVENT_USR9 = 99;
  static const int SND_SEQ_EVENT_SYSEX = 130;
  static const int SND_SEQ_EVENT_BOUNCE = 131;
  static const int SND_SEQ_EVENT_USR_VAR0 = 135;
  static const int SND_SEQ_EVENT_USR_VAR1 = 136;
  static const int SND_SEQ_EVENT_USR_VAR2 = 137;
  static const int SND_SEQ_EVENT_USR_VAR3 = 138;
  static const int SND_SEQ_EVENT_USR_VAR4 = 139;
  static const int SND_SEQ_EVENT_NONE = 255;
}

final class snd_seq_addr extends ffi.Struct {
  @ffi.UnsignedChar()
  external int client;

  @ffi.UnsignedChar()
  external int port;
}

final class snd_seq_connect extends ffi.Struct {
  external snd_seq_addr_t sender;

  external snd_seq_addr_t dest;
}

typedef snd_seq_addr_t = snd_seq_addr;

final class snd_seq_real_time extends ffi.Struct {
  @ffi.UnsignedInt()
  external int tv_sec;

  @ffi.UnsignedInt()
  external int tv_nsec;
}

final class snd_seq_timestamp extends ffi.Union {
  @snd_seq_tick_time_t()
  external int tick;

  external snd_seq_real_time time;
}

typedef snd_seq_tick_time_t = ffi.UnsignedInt;

final class snd_seq_ev_note extends ffi.Struct {
  @ffi.UnsignedChar()
  external int channel;

  @ffi.UnsignedChar()
  external int note;

  @ffi.UnsignedChar()
  external int velocity;

  @ffi.UnsignedChar()
  external int off_velocity;

  @ffi.UnsignedInt()
  external int duration;
}

final class snd_seq_ev_ctrl extends ffi.Struct {
  @ffi.UnsignedChar()
  external int channel;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.UnsignedChar> unused;

  @ffi.UnsignedInt()
  external int param;

  @ffi.Int()
  external int value;
}

final class snd_seq_ev_raw8 extends ffi.Struct {
  @ffi.Array.multi([12])
  external ffi.Array<ffi.UnsignedChar> d;
}

final class snd_seq_ev_raw32 extends ffi.Struct {
  @ffi.Array.multi([3])
  external ffi.Array<ffi.UnsignedInt> d;
}

@ffi.Packed(1)
final class snd_seq_ev_ext extends ffi.Struct {
  @ffi.UnsignedInt()
  external int len;

  external ffi.Pointer<ffi.Void> ptr;
}

final class snd_seq_result extends ffi.Struct {
  @ffi.Int()
  external int event;

  @ffi.Int()
  external int result;
}

final class snd_seq_queue_skew extends ffi.Struct {
  @ffi.UnsignedInt()
  external int value;

  @ffi.UnsignedInt()
  external int base;
}

final class snd_seq_ev_queue_control extends ffi.Struct {
  @ffi.UnsignedChar()
  external int queue;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.UnsignedChar> unused;

  external UnnamedUnion2 param;
}

final class UnnamedUnion2 extends ffi.Union {
  @ffi.Int()
  external int value;

  external snd_seq_timestamp_t time;

  @ffi.UnsignedInt()
  external int position;

  external snd_seq_queue_skew_t skew;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> d32;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.UnsignedChar> d8;
}

typedef snd_seq_timestamp_t = snd_seq_timestamp;
typedef snd_seq_queue_skew_t = snd_seq_queue_skew;

final class snd_seq_event extends ffi.Struct {
  @snd_seq_event_type_t()
  external int type;

  @ffi.UnsignedChar()
  external int flags;

  @ffi.UnsignedChar()
  external int tag;

  @ffi.UnsignedChar()
  external int queue;

  external snd_seq_timestamp_t time;

  external snd_seq_addr_t source;

  external snd_seq_addr_t dest;

  external UnnamedUnion3 data;
}

typedef snd_seq_event_type_t = ffi.UnsignedChar;

final class UnnamedUnion3 extends ffi.Union {
  external snd_seq_ev_note_t note;

  external snd_seq_ev_ctrl_t control;

  external snd_seq_ev_raw8_t raw8;

  external snd_seq_ev_raw32_t raw32;

  external snd_seq_ev_ext_t ext;

  external snd_seq_ev_queue_control_t queue;

  external snd_seq_timestamp_t time;

  external snd_seq_addr_t addr;

  external snd_seq_connect_t connect;

  external snd_seq_result_t result;
}

typedef snd_seq_ev_note_t = snd_seq_ev_note;
typedef snd_seq_ev_ctrl_t = snd_seq_ev_ctrl;
typedef snd_seq_ev_raw8_t = snd_seq_ev_raw8;
typedef snd_seq_ev_raw32_t = snd_seq_ev_raw32;
typedef snd_seq_ev_ext_t = snd_seq_ev_ext;
typedef snd_seq_ev_queue_control_t = snd_seq_ev_queue_control;
typedef snd_seq_connect_t = snd_seq_connect;
typedef snd_seq_result_t = snd_seq_result;

final class snd_seq_ extends ffi.Opaque {}

abstract class _snd_seq_type {
  static const int SND_SEQ_TYPE_HW = 0;
  static const int SND_SEQ_TYPE_SHM = 1;
  static const int SND_SEQ_TYPE_INET = 2;
}

typedef snd_seq_t = snd_seq_;

final class snd_seq_system_info_ extends ffi.Opaque {}

typedef snd_seq_system_info_t = snd_seq_system_info_;

final class snd_seq_client_info_ extends ffi.Opaque {}

abstract class snd_seq_client_type {
  static const int SND_SEQ_USER_CLIENT = 1;
  static const int SND_SEQ_KERNEL_CLIENT = 2;
}

typedef snd_seq_client_info_t = snd_seq_client_info_;

final class snd_seq_client_pool_ extends ffi.Opaque {}

typedef snd_seq_client_pool_t = snd_seq_client_pool_;

final class snd_seq_port_info_ extends ffi.Opaque {}

typedef snd_seq_port_info_t = snd_seq_port_info_;

final class snd_seq_port_subscribe_ extends ffi.Opaque {}

typedef snd_seq_port_subscribe_t = snd_seq_port_subscribe_;

final class snd_seq_query_subscribe_ extends ffi.Opaque {}

abstract class snd_seq_query_subs_type_t {
  static const int SND_SEQ_QUERY_SUBS_READ = 0;
  static const int SND_SEQ_QUERY_SUBS_WRITE = 1;
}

typedef snd_seq_query_subscribe_t = snd_seq_query_subscribe_;

final class snd_seq_queue_info_ extends ffi.Opaque {}

final class snd_seq_queue_status_ extends ffi.Opaque {}

final class snd_seq_queue_tempo_ extends ffi.Opaque {}

final class snd_seq_queue_timer_ extends ffi.Opaque {}

typedef snd_seq_queue_info_t = snd_seq_queue_info_;
typedef snd_seq_queue_status_t = snd_seq_queue_status_;
typedef snd_seq_real_time_t = snd_seq_real_time;
typedef snd_seq_queue_tempo_t = snd_seq_queue_tempo_;

abstract class snd_seq_queue_timer_type_t {
  static const int SND_SEQ_TIMER_ALSA = 0;
  static const int SND_SEQ_TIMER_MIDI_CLOCK = 1;
  static const int SND_SEQ_TIMER_MIDI_TICK = 2;
}

typedef snd_seq_queue_timer_t = snd_seq_queue_timer_;
typedef snd_seq_event_t = snd_seq_event;

final class snd_seq_remove_events_ extends ffi.Opaque {}

typedef snd_seq_remove_events_t = snd_seq_remove_events_;

final class snd_midi_event extends ffi.Opaque {}

typedef snd_midi_event_t = snd_midi_event;

const int _PC_LINK_MAX = 0;

const int _PC_MAX_CANON = 1;

const int _PC_MAX_INPUT = 2;

const int _PC_NAME_MAX = 3;

const int _PC_PATH_MAX = 4;

const int _PC_PIPE_BUF = 5;

const int _PC_CHOWN_RESTRICTED = 6;

const int _PC_NO_TRUNC = 7;

const int _PC_VDISABLE = 8;

const int _PC_SYNC_IO = 9;

const int _PC_ASYNC_IO = 10;

const int _PC_PRIO_IO = 11;

const int _PC_SOCK_MAXBUF = 12;

const int _PC_FILESIZEBITS = 13;

const int _PC_REC_INCR_XFER_SIZE = 14;

const int _PC_REC_MAX_XFER_SIZE = 15;

const int _PC_REC_MIN_XFER_SIZE = 16;

const int _PC_REC_XFER_ALIGN = 17;

const int _PC_ALLOC_SIZE_MIN = 18;

const int _PC_SYMLINK_MAX = 19;

const int _PC_2_SYMLINKS = 20;

const int _SC_ARG_MAX = 0;

const int _SC_CHILD_MAX = 1;

const int _SC_CLK_TCK = 2;

const int _SC_NGROUPS_MAX = 3;

const int _SC_OPEN_MAX = 4;

const int _SC_STREAM_MAX = 5;

const int _SC_TZNAME_MAX = 6;

const int _SC_JOB_CONTROL = 7;

const int _SC_SAVED_IDS = 8;

const int _SC_REALTIME_SIGNALS = 9;

const int _SC_PRIORITY_SCHEDULING = 10;

const int _SC_TIMERS = 11;

const int _SC_ASYNCHRONOUS_IO = 12;

const int _SC_PRIORITIZED_IO = 13;

const int _SC_SYNCHRONIZED_IO = 14;

const int _SC_FSYNC = 15;

const int _SC_MAPPED_FILES = 16;

const int _SC_MEMLOCK = 17;

const int _SC_MEMLOCK_RANGE = 18;

const int _SC_MEMORY_PROTECTION = 19;

const int _SC_MESSAGE_PASSING = 20;

const int _SC_SEMAPHORES = 21;

const int _SC_SHARED_MEMORY_OBJECTS = 22;

const int _SC_AIO_LISTIO_MAX = 23;

const int _SC_AIO_MAX = 24;

const int _SC_AIO_PRIO_DELTA_MAX = 25;

const int _SC_DELAYTIMER_MAX = 26;

const int _SC_MQ_OPEN_MAX = 27;

const int _SC_MQ_PRIO_MAX = 28;

const int _SC_VERSION = 29;

const int _SC_PAGESIZE = 30;

const int _SC_RTSIG_MAX = 31;

const int _SC_SEM_NSEMS_MAX = 32;

const int _SC_SEM_VALUE_MAX = 33;

const int _SC_SIGQUEUE_MAX = 34;

const int _SC_TIMER_MAX = 35;

const int _SC_BC_BASE_MAX = 36;

const int _SC_BC_DIM_MAX = 37;

const int _SC_BC_SCALE_MAX = 38;

const int _SC_BC_STRING_MAX = 39;

const int _SC_COLL_WEIGHTS_MAX = 40;

const int _SC_EQUIV_CLASS_MAX = 41;

const int _SC_EXPR_NEST_MAX = 42;

const int _SC_LINE_MAX = 43;

const int _SC_RE_DUP_MAX = 44;

const int _SC_CHARCLASS_NAME_MAX = 45;

const int _SC_2_VERSION = 46;

const int _SC_2_C_BIND = 47;

const int _SC_2_C_DEV = 48;

const int _SC_2_FORT_DEV = 49;

const int _SC_2_FORT_RUN = 50;

const int _SC_2_SW_DEV = 51;

const int _SC_2_LOCALEDEF = 52;

const int _SC_PII = 53;

const int _SC_PII_XTI = 54;

const int _SC_PII_SOCKET = 55;

const int _SC_PII_INTERNET = 56;

const int _SC_PII_OSI = 57;

const int _SC_POLL = 58;

const int _SC_SELECT = 59;

const int _SC_UIO_MAXIOV = 60;

const int _SC_IOV_MAX = 60;

const int _SC_PII_INTERNET_STREAM = 61;

const int _SC_PII_INTERNET_DGRAM = 62;

const int _SC_PII_OSI_COTS = 63;

const int _SC_PII_OSI_CLTS = 64;

const int _SC_PII_OSI_M = 65;

const int _SC_T_IOV_MAX = 66;

const int _SC_THREADS = 67;

const int _SC_THREAD_SAFE_FUNCTIONS = 68;

const int _SC_GETGR_R_SIZE_MAX = 69;

const int _SC_GETPW_R_SIZE_MAX = 70;

const int _SC_LOGIN_NAME_MAX = 71;

const int _SC_TTY_NAME_MAX = 72;

const int _SC_THREAD_DESTRUCTOR_ITERATIONS = 73;

const int _SC_THREAD_KEYS_MAX = 74;

const int _SC_THREAD_STACK_MIN = 75;

const int _SC_THREAD_THREADS_MAX = 76;

const int _SC_THREAD_ATTR_STACKADDR = 77;

const int _SC_THREAD_ATTR_STACKSIZE = 78;

const int _SC_THREAD_PRIORITY_SCHEDULING = 79;

const int _SC_THREAD_PRIO_INHERIT = 80;

const int _SC_THREAD_PRIO_PROTECT = 81;

const int _SC_THREAD_PROCESS_SHARED = 82;

const int _SC_NPROCESSORS_CONF = 83;

const int _SC_NPROCESSORS_ONLN = 84;

const int _SC_PHYS_PAGES = 85;

const int _SC_AVPHYS_PAGES = 86;

const int _SC_ATEXIT_MAX = 87;

const int _SC_PASS_MAX = 88;

const int _SC_XOPEN_VERSION = 89;

const int _SC_XOPEN_XCU_VERSION = 90;

const int _SC_XOPEN_UNIX = 91;

const int _SC_XOPEN_CRYPT = 92;

const int _SC_XOPEN_ENH_I18N = 93;

const int _SC_XOPEN_SHM = 94;

const int _SC_2_CHAR_TERM = 95;

const int _SC_2_C_VERSION = 96;

const int _SC_2_UPE = 97;

const int _SC_XOPEN_XPG2 = 98;

const int _SC_XOPEN_XPG3 = 99;

const int _SC_XOPEN_XPG4 = 100;

const int _SC_CHAR_BIT = 101;

const int _SC_CHAR_MAX = 102;

const int _SC_CHAR_MIN = 103;

const int _SC_INT_MAX = 104;

const int _SC_INT_MIN = 105;

const int _SC_LONG_BIT = 106;

const int _SC_WORD_BIT = 107;

const int _SC_MB_LEN_MAX = 108;

const int _SC_NZERO = 109;

const int _SC_SSIZE_MAX = 110;

const int _SC_SCHAR_MAX = 111;

const int _SC_SCHAR_MIN = 112;

const int _SC_SHRT_MAX = 113;

const int _SC_SHRT_MIN = 114;

const int _SC_UCHAR_MAX = 115;

const int _SC_UINT_MAX = 116;

const int _SC_ULONG_MAX = 117;

const int _SC_USHRT_MAX = 118;

const int _SC_NL_ARGMAX = 119;

const int _SC_NL_LANGMAX = 120;

const int _SC_NL_MSGMAX = 121;

const int _SC_NL_NMAX = 122;

const int _SC_NL_SETMAX = 123;

const int _SC_NL_TEXTMAX = 124;

const int _SC_XBS5_ILP32_OFF32 = 125;

const int _SC_XBS5_ILP32_OFFBIG = 126;

const int _SC_XBS5_LP64_OFF64 = 127;

const int _SC_XBS5_LPBIG_OFFBIG = 128;

const int _SC_XOPEN_LEGACY = 129;

const int _SC_XOPEN_REALTIME = 130;

const int _SC_XOPEN_REALTIME_THREADS = 131;

const int _SC_ADVISORY_INFO = 132;

const int _SC_BARRIERS = 133;

const int _SC_BASE = 134;

const int _SC_C_LANG_SUPPORT = 135;

const int _SC_C_LANG_SUPPORT_R = 136;

const int _SC_CLOCK_SELECTION = 137;

const int _SC_CPUTIME = 138;

const int _SC_THREAD_CPUTIME = 139;

const int _SC_DEVICE_IO = 140;

const int _SC_DEVICE_SPECIFIC = 141;

const int _SC_DEVICE_SPECIFIC_R = 142;

const int _SC_FD_MGMT = 143;

const int _SC_FIFO = 144;

const int _SC_PIPE = 145;

const int _SC_FILE_ATTRIBUTES = 146;

const int _SC_FILE_LOCKING = 147;

const int _SC_FILE_SYSTEM = 148;

const int _SC_MONOTONIC_CLOCK = 149;

const int _SC_MULTI_PROCESS = 150;

const int _SC_SINGLE_PROCESS = 151;

const int _SC_NETWORKING = 152;

const int _SC_READER_WRITER_LOCKS = 153;

const int _SC_SPIN_LOCKS = 154;

const int _SC_REGEXP = 155;

const int _SC_REGEX_VERSION = 156;

const int _SC_SHELL = 157;

const int _SC_SIGNALS = 158;

const int _SC_SPAWN = 159;

const int _SC_SPORADIC_SERVER = 160;

const int _SC_THREAD_SPORADIC_SERVER = 161;

const int _SC_SYSTEM_DATABASE = 162;

const int _SC_SYSTEM_DATABASE_R = 163;

const int _SC_TIMEOUTS = 164;

const int _SC_TYPED_MEMORY_OBJECTS = 165;

const int _SC_USER_GROUPS = 166;

const int _SC_USER_GROUPS_R = 167;

const int _SC_2_PBS = 168;

const int _SC_2_PBS_ACCOUNTING = 169;

const int _SC_2_PBS_LOCATE = 170;

const int _SC_2_PBS_MESSAGE = 171;

const int _SC_2_PBS_TRACK = 172;

const int _SC_SYMLOOP_MAX = 173;

const int _SC_STREAMS = 174;

const int _SC_2_PBS_CHECKPOINT = 175;

const int _SC_V6_ILP32_OFF32 = 176;

const int _SC_V6_ILP32_OFFBIG = 177;

const int _SC_V6_LP64_OFF64 = 178;

const int _SC_V6_LPBIG_OFFBIG = 179;

const int _SC_HOST_NAME_MAX = 180;

const int _SC_TRACE = 181;

const int _SC_TRACE_EVENT_FILTER = 182;

const int _SC_TRACE_INHERIT = 183;

const int _SC_TRACE_LOG = 184;

const int _SC_LEVEL1_ICACHE_SIZE = 185;

const int _SC_LEVEL1_ICACHE_ASSOC = 186;

const int _SC_LEVEL1_ICACHE_LINESIZE = 187;

const int _SC_LEVEL1_DCACHE_SIZE = 188;

const int _SC_LEVEL1_DCACHE_ASSOC = 189;

const int _SC_LEVEL1_DCACHE_LINESIZE = 190;

const int _SC_LEVEL2_CACHE_SIZE = 191;

const int _SC_LEVEL2_CACHE_ASSOC = 192;

const int _SC_LEVEL2_CACHE_LINESIZE = 193;

const int _SC_LEVEL3_CACHE_SIZE = 194;

const int _SC_LEVEL3_CACHE_ASSOC = 195;

const int _SC_LEVEL3_CACHE_LINESIZE = 196;

const int _SC_LEVEL4_CACHE_SIZE = 197;

const int _SC_LEVEL4_CACHE_ASSOC = 198;

const int _SC_LEVEL4_CACHE_LINESIZE = 199;

const int _SC_IPV6 = 235;

const int _SC_RAW_SOCKETS = 236;

const int _SC_V7_ILP32_OFF32 = 237;

const int _SC_V7_ILP32_OFFBIG = 238;

const int _SC_V7_LP64_OFF64 = 239;

const int _SC_V7_LPBIG_OFFBIG = 240;

const int _SC_SS_REPL_MAX = 241;

const int _SC_TRACE_EVENT_NAME_MAX = 242;

const int _SC_TRACE_NAME_MAX = 243;

const int _SC_TRACE_SYS_MAX = 244;

const int _SC_TRACE_USER_EVENT_MAX = 245;

const int _SC_XOPEN_STREAMS = 246;

const int _SC_THREAD_ROBUST_PRIO_INHERIT = 247;

const int _SC_THREAD_ROBUST_PRIO_PROTECT = 248;

const int _SC_MINSIGSTKSZ = 249;

const int _SC_SIGSTKSZ = 250;

const int _CS_PATH = 0;

const int _CS_V6_WIDTH_RESTRICTED_ENVS = 1;

const int _CS_GNU_LIBC_VERSION = 2;

const int _CS_GNU_LIBPTHREAD_VERSION = 3;

const int _CS_V5_WIDTH_RESTRICTED_ENVS = 4;

const int _CS_V7_WIDTH_RESTRICTED_ENVS = 5;

const int _CS_LFS_CFLAGS = 1000;

const int _CS_LFS_LDFLAGS = 1001;

const int _CS_LFS_LIBS = 1002;

const int _CS_LFS_LINTFLAGS = 1003;

const int _CS_LFS64_CFLAGS = 1004;

const int _CS_LFS64_LDFLAGS = 1005;

const int _CS_LFS64_LIBS = 1006;

const int _CS_LFS64_LINTFLAGS = 1007;

const int _CS_XBS5_ILP32_OFF32_CFLAGS = 1100;

const int _CS_XBS5_ILP32_OFF32_LDFLAGS = 1101;

const int _CS_XBS5_ILP32_OFF32_LIBS = 1102;

const int _CS_XBS5_ILP32_OFF32_LINTFLAGS = 1103;

const int _CS_XBS5_ILP32_OFFBIG_CFLAGS = 1104;

const int _CS_XBS5_ILP32_OFFBIG_LDFLAGS = 1105;

const int _CS_XBS5_ILP32_OFFBIG_LIBS = 1106;

const int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS = 1107;

const int _CS_XBS5_LP64_OFF64_CFLAGS = 1108;

const int _CS_XBS5_LP64_OFF64_LDFLAGS = 1109;

const int _CS_XBS5_LP64_OFF64_LIBS = 1110;

const int _CS_XBS5_LP64_OFF64_LINTFLAGS = 1111;

const int _CS_XBS5_LPBIG_OFFBIG_CFLAGS = 1112;

const int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS = 1113;

const int _CS_XBS5_LPBIG_OFFBIG_LIBS = 1114;

const int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS = 1115;

const int _CS_POSIX_V6_ILP32_OFF32_CFLAGS = 1116;

const int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS = 1117;

const int _CS_POSIX_V6_ILP32_OFF32_LIBS = 1118;

const int _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS = 1119;

const int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS = 1120;

const int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS = 1121;

const int _CS_POSIX_V6_ILP32_OFFBIG_LIBS = 1122;

const int _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS = 1123;

const int _CS_POSIX_V6_LP64_OFF64_CFLAGS = 1124;

const int _CS_POSIX_V6_LP64_OFF64_LDFLAGS = 1125;

const int _CS_POSIX_V6_LP64_OFF64_LIBS = 1126;

const int _CS_POSIX_V6_LP64_OFF64_LINTFLAGS = 1127;

const int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS = 1128;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS = 1129;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS = 1130;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS = 1131;

const int _CS_POSIX_V7_ILP32_OFF32_CFLAGS = 1132;

const int _CS_POSIX_V7_ILP32_OFF32_LDFLAGS = 1133;

const int _CS_POSIX_V7_ILP32_OFF32_LIBS = 1134;

const int _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS = 1135;

const int _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS = 1136;

const int _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS = 1137;

const int _CS_POSIX_V7_ILP32_OFFBIG_LIBS = 1138;

const int _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS = 1139;

const int _CS_POSIX_V7_LP64_OFF64_CFLAGS = 1140;

const int _CS_POSIX_V7_LP64_OFF64_LDFLAGS = 1141;

const int _CS_POSIX_V7_LP64_OFF64_LIBS = 1142;

const int _CS_POSIX_V7_LP64_OFF64_LINTFLAGS = 1143;

const int _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS = 1144;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS = 1145;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LIBS = 1146;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS = 1147;

const int _CS_V6_ENV = 1148;

const int _CS_V7_ENV = 1149;

const int SND_SEQ_EVFLG_RESULT = 0;

const int SND_SEQ_EVFLG_NOTE = 1;

const int SND_SEQ_EVFLG_CONTROL = 2;

const int SND_SEQ_EVFLG_QUEUE = 3;

const int SND_SEQ_EVFLG_SYSTEM = 4;

const int SND_SEQ_EVFLG_MESSAGE = 5;

const int SND_SEQ_EVFLG_CONNECTION = 6;

const int SND_SEQ_EVFLG_SAMPLE = 7;

const int SND_SEQ_EVFLG_USERS = 8;

const int SND_SEQ_EVFLG_INSTR = 9;

const int SND_SEQ_EVFLG_QUOTE = 10;

const int SND_SEQ_EVFLG_NONE = 11;

const int SND_SEQ_EVFLG_RAW = 12;

const int SND_SEQ_EVFLG_FIXED = 13;

const int SND_SEQ_EVFLG_VARIABLE = 14;

const int SND_SEQ_EVFLG_VARUSR = 15;

const int SND_SEQ_EVFLG_NOTE_ONEARG = 0;

const int SND_SEQ_EVFLG_NOTE_TWOARG = 1;

const int SND_SEQ_EVFLG_QUEUE_NOARG = 0;

const int SND_SEQ_EVFLG_QUEUE_TICK = 1;

const int SND_SEQ_EVFLG_QUEUE_TIME = 2;

const int SND_SEQ_EVFLG_QUEUE_VALUE = 3;

const int _UNISTD_H = 1;

const int _FEATURES_H = 1;

const int _DEFAULT_SOURCE = 1;

const int __GLIBC_USE_ISOC2X = 1;

const int __USE_ISOC11 = 1;

const int __USE_ISOC99 = 1;

const int __USE_ISOC95 = 1;

const int _POSIX_SOURCE = 1;

const int _POSIX_C_SOURCE = 200809;

const int __USE_POSIX = 1;

const int __USE_POSIX2 = 1;

const int __USE_POSIX199309 = 1;

const int __USE_POSIX199506 = 1;

const int __USE_XOPEN2K = 1;

const int __USE_XOPEN2K8 = 1;

const int _ATFILE_SOURCE = 1;

const int __WORDSIZE = 64;

const int __WORDSIZE_TIME64_COMPAT32 = 1;

const int __SYSCALL_WORDSIZE = 64;

const int __TIMESIZE = 64;

const int __USE_MISC = 1;

const int __USE_ATFILE = 1;

const int __USE_FORTIFY_LEVEL = 0;

const int __GLIBC_USE_DEPRECATED_GETS = 0;

const int __GLIBC_USE_DEPRECATED_SCANF = 0;

const int _STDC_PREDEF_H = 1;

const int __STDC_IEC_559__ = 1;

const int __STDC_IEC_60559_BFP__ = 201404;

const int __STDC_IEC_559_COMPLEX__ = 1;

const int __STDC_IEC_60559_COMPLEX__ = 201404;

const int __STDC_ISO_10646__ = 201706;

const int __GNU_LIBRARY__ = 6;

const int __GLIBC__ = 2;

const int __GLIBC_MINOR__ = 35;

const int _SYS_CDEFS_H = 1;

const int __THROW = 1;

const int __THROWNL = 1;

const int __glibc_c99_flexarr_available = 1;

const int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI = 0;

const int __HAVE_GENERIC_SELECTION = 0;

const int _POSIX_VERSION = 200809;

const int __POSIX2_THIS_VERSION = 200809;

const int _POSIX2_VERSION = 200809;

const int _POSIX2_C_VERSION = 200809;

const int _POSIX2_C_BIND = 200809;

const int _POSIX2_C_DEV = 200809;

const int _POSIX2_SW_DEV = 200809;

const int _POSIX2_LOCALEDEF = 200809;

const int _XOPEN_VERSION = 700;

const int _XOPEN_XCU_VERSION = 4;

const int _XOPEN_XPG2 = 1;

const int _XOPEN_XPG3 = 1;

const int _XOPEN_XPG4 = 1;

const int _XOPEN_UNIX = 1;

const int _XOPEN_ENH_I18N = 1;

const int _XOPEN_LEGACY = 1;

const int _BITS_POSIX_OPT_H = 1;

const int _POSIX_JOB_CONTROL = 1;

const int _POSIX_SAVED_IDS = 1;

const int _POSIX_PRIORITY_SCHEDULING = 200809;

const int _POSIX_SYNCHRONIZED_IO = 200809;

const int _POSIX_FSYNC = 200809;

const int _POSIX_MAPPED_FILES = 200809;

const int _POSIX_MEMLOCK = 200809;

const int _POSIX_MEMLOCK_RANGE = 200809;

const int _POSIX_MEMORY_PROTECTION = 200809;

const int _POSIX_CHOWN_RESTRICTED = 0;

const int _POSIX_VDISABLE = 0;

const int _POSIX_NO_TRUNC = 1;

const int _XOPEN_REALTIME = 1;

const int _XOPEN_REALTIME_THREADS = 1;

const int _XOPEN_SHM = 1;

const int _POSIX_THREADS = 200809;

const int _POSIX_REENTRANT_FUNCTIONS = 1;

const int _POSIX_THREAD_SAFE_FUNCTIONS = 200809;

const int _POSIX_THREAD_PRIORITY_SCHEDULING = 200809;

const int _POSIX_THREAD_ATTR_STACKSIZE = 200809;

const int _POSIX_THREAD_ATTR_STACKADDR = 200809;

const int _POSIX_THREAD_PRIO_INHERIT = 200809;

const int _POSIX_THREAD_PRIO_PROTECT = 200809;

const int _POSIX_THREAD_ROBUST_PRIO_INHERIT = 200809;

const int _POSIX_THREAD_ROBUST_PRIO_PROTECT = -1;

const int _POSIX_SEMAPHORES = 200809;

const int _POSIX_REALTIME_SIGNALS = 200809;

const int _POSIX_ASYNCHRONOUS_IO = 200809;

const int _POSIX_ASYNC_IO = 1;

const int _LFS_ASYNCHRONOUS_IO = 1;

const int _POSIX_PRIORITIZED_IO = 200809;

const int _LFS64_ASYNCHRONOUS_IO = 1;

const int _LFS_LARGEFILE = 1;

const int _LFS64_LARGEFILE = 1;

const int _LFS64_STDIO = 1;

const int _POSIX_SHARED_MEMORY_OBJECTS = 200809;

const int _POSIX_CPUTIME = 0;

const int _POSIX_THREAD_CPUTIME = 0;

const int _POSIX_REGEXP = 1;

const int _POSIX_READER_WRITER_LOCKS = 200809;

const int _POSIX_SHELL = 1;

const int _POSIX_TIMEOUTS = 200809;

const int _POSIX_SPIN_LOCKS = 200809;

const int _POSIX_SPAWN = 200809;

const int _POSIX_TIMERS = 200809;

const int _POSIX_BARRIERS = 200809;

const int _POSIX_MESSAGE_PASSING = 200809;

const int _POSIX_THREAD_PROCESS_SHARED = 200809;

const int _POSIX_MONOTONIC_CLOCK = 0;

const int _POSIX_CLOCK_SELECTION = 200809;

const int _POSIX_ADVISORY_INFO = 200809;

const int _POSIX_IPV6 = 200809;

const int _POSIX_RAW_SOCKETS = 200809;

const int _POSIX2_CHAR_TERM = 200809;

const int _POSIX_SPORADIC_SERVER = -1;

const int _POSIX_THREAD_SPORADIC_SERVER = -1;

const int _POSIX_TRACE = -1;

const int _POSIX_TRACE_EVENT_FILTER = -1;

const int _POSIX_TRACE_INHERIT = -1;

const int _POSIX_TRACE_LOG = -1;

const int _POSIX_TYPED_MEMORY_OBJECTS = -1;

const int _POSIX_V7_LPBIG_OFFBIG = -1;

const int _POSIX_V6_LPBIG_OFFBIG = -1;

const int _XBS5_LPBIG_OFFBIG = -1;

const int _POSIX_V7_LP64_OFF64 = 1;

const int _POSIX_V6_LP64_OFF64 = 1;

const int _XBS5_LP64_OFF64 = 1;

const String __ILP32_OFF32_CFLAGS = '-m32';

const String __ILP32_OFF32_LDFLAGS = '-m32';

const String __ILP32_OFFBIG_CFLAGS =
    '-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64';

const String __ILP32_OFFBIG_LDFLAGS = '-m32';

const String __LP64_OFF64_CFLAGS = '-m64';

const String __LP64_OFF64_LDFLAGS = '-m64';

const int STDIN_FILENO = 0;

const int STDOUT_FILENO = 1;

const int STDERR_FILENO = 2;

const int _BITS_TYPES_H = 1;

const int _BITS_TYPESIZES_H = 1;

const int __OFF_T_MATCHES_OFF64_T = 1;

const int __INO_T_MATCHES_INO64_T = 1;

const int __RLIM_T_MATCHES_RLIM64_T = 1;

const int __STATFS_MATCHES_STATFS64 = 1;

const int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 = 1;

const int __FD_SETSIZE = 1024;

const int _BITS_TIME64_H = 1;

const int NULL = 0;

const int R_OK = 4;

const int W_OK = 2;

const int X_OK = 1;

const int F_OK = 0;

const int SEEK_SET = 0;

const int SEEK_CUR = 1;

const int SEEK_END = 2;

const int L_SET = 0;

const int L_INCR = 1;

const int L_XTND = 2;

const int _PC_LINK_MAX1 = 0;

const int _PC_MAX_CANON1 = 1;

const int _PC_MAX_INPUT1 = 2;

const int _PC_NAME_MAX1 = 3;

const int _PC_PATH_MAX1 = 4;

const int _PC_PIPE_BUF1 = 5;

const int _PC_CHOWN_RESTRICTED1 = 6;

const int _PC_NO_TRUNC1 = 7;

const int _PC_VDISABLE1 = 8;

const int _PC_SYNC_IO1 = 9;

const int _PC_ASYNC_IO1 = 10;

const int _PC_PRIO_IO1 = 11;

const int _PC_SOCK_MAXBUF1 = 12;

const int _PC_FILESIZEBITS1 = 13;

const int _PC_REC_INCR_XFER_SIZE1 = 14;

const int _PC_REC_MAX_XFER_SIZE1 = 15;

const int _PC_REC_MIN_XFER_SIZE1 = 16;

const int _PC_REC_XFER_ALIGN1 = 17;

const int _PC_ALLOC_SIZE_MIN1 = 18;

const int _PC_SYMLINK_MAX1 = 19;

const int _PC_2_SYMLINKS1 = 20;

const int _SC_ARG_MAX1 = 0;

const int _SC_CHILD_MAX1 = 1;

const int _SC_CLK_TCK1 = 2;

const int _SC_NGROUPS_MAX1 = 3;

const int _SC_OPEN_MAX1 = 4;

const int _SC_STREAM_MAX1 = 5;

const int _SC_TZNAME_MAX1 = 6;

const int _SC_JOB_CONTROL1 = 7;

const int _SC_SAVED_IDS1 = 8;

const int _SC_REALTIME_SIGNALS1 = 9;

const int _SC_PRIORITY_SCHEDULING1 = 10;

const int _SC_TIMERS1 = 11;

const int _SC_ASYNCHRONOUS_IO1 = 12;

const int _SC_PRIORITIZED_IO1 = 13;

const int _SC_SYNCHRONIZED_IO1 = 14;

const int _SC_FSYNC1 = 15;

const int _SC_MAPPED_FILES1 = 16;

const int _SC_MEMLOCK1 = 17;

const int _SC_MEMLOCK_RANGE1 = 18;

const int _SC_MEMORY_PROTECTION1 = 19;

const int _SC_MESSAGE_PASSING1 = 20;

const int _SC_SEMAPHORES1 = 21;

const int _SC_SHARED_MEMORY_OBJECTS1 = 22;

const int _SC_AIO_LISTIO_MAX1 = 23;

const int _SC_AIO_MAX1 = 24;

const int _SC_AIO_PRIO_DELTA_MAX1 = 25;

const int _SC_DELAYTIMER_MAX1 = 26;

const int _SC_MQ_OPEN_MAX1 = 27;

const int _SC_MQ_PRIO_MAX1 = 28;

const int _SC_VERSION1 = 29;

const int _SC_PAGESIZE1 = 30;

const int _SC_PAGE_SIZE = 30;

const int _SC_RTSIG_MAX1 = 31;

const int _SC_SEM_NSEMS_MAX1 = 32;

const int _SC_SEM_VALUE_MAX1 = 33;

const int _SC_SIGQUEUE_MAX1 = 34;

const int _SC_TIMER_MAX1 = 35;

const int _SC_BC_BASE_MAX1 = 36;

const int _SC_BC_DIM_MAX1 = 37;

const int _SC_BC_SCALE_MAX1 = 38;

const int _SC_BC_STRING_MAX1 = 39;

const int _SC_COLL_WEIGHTS_MAX1 = 40;

const int _SC_EQUIV_CLASS_MAX1 = 41;

const int _SC_EXPR_NEST_MAX1 = 42;

const int _SC_LINE_MAX1 = 43;

const int _SC_RE_DUP_MAX1 = 44;

const int _SC_CHARCLASS_NAME_MAX1 = 45;

const int _SC_2_VERSION1 = 46;

const int _SC_2_C_BIND1 = 47;

const int _SC_2_C_DEV1 = 48;

const int _SC_2_FORT_DEV1 = 49;

const int _SC_2_FORT_RUN1 = 50;

const int _SC_2_SW_DEV1 = 51;

const int _SC_2_LOCALEDEF1 = 52;

const int _SC_PII1 = 53;

const int _SC_PII_XTI1 = 54;

const int _SC_PII_SOCKET1 = 55;

const int _SC_PII_INTERNET1 = 56;

const int _SC_PII_OSI1 = 57;

const int _SC_POLL1 = 58;

const int _SC_SELECT1 = 59;

const int _SC_UIO_MAXIOV1 = 60;

const int _SC_IOV_MAX1 = 60;

const int _SC_PII_INTERNET_STREAM1 = 61;

const int _SC_PII_INTERNET_DGRAM1 = 62;

const int _SC_PII_OSI_COTS1 = 63;

const int _SC_PII_OSI_CLTS1 = 64;

const int _SC_PII_OSI_M1 = 65;

const int _SC_T_IOV_MAX1 = 66;

const int _SC_THREADS1 = 67;

const int _SC_THREAD_SAFE_FUNCTIONS1 = 68;

const int _SC_GETGR_R_SIZE_MAX1 = 69;

const int _SC_GETPW_R_SIZE_MAX1 = 70;

const int _SC_LOGIN_NAME_MAX1 = 71;

const int _SC_TTY_NAME_MAX1 = 72;

const int _SC_THREAD_DESTRUCTOR_ITERATIONS1 = 73;

const int _SC_THREAD_KEYS_MAX1 = 74;

const int _SC_THREAD_STACK_MIN1 = 75;

const int _SC_THREAD_THREADS_MAX1 = 76;

const int _SC_THREAD_ATTR_STACKADDR1 = 77;

const int _SC_THREAD_ATTR_STACKSIZE1 = 78;

const int _SC_THREAD_PRIORITY_SCHEDULING1 = 79;

const int _SC_THREAD_PRIO_INHERIT1 = 80;

const int _SC_THREAD_PRIO_PROTECT1 = 81;

const int _SC_THREAD_PROCESS_SHARED1 = 82;

const int _SC_NPROCESSORS_CONF1 = 83;

const int _SC_NPROCESSORS_ONLN1 = 84;

const int _SC_PHYS_PAGES1 = 85;

const int _SC_AVPHYS_PAGES1 = 86;

const int _SC_ATEXIT_MAX1 = 87;

const int _SC_PASS_MAX1 = 88;

const int _SC_XOPEN_VERSION1 = 89;

const int _SC_XOPEN_XCU_VERSION1 = 90;

const int _SC_XOPEN_UNIX1 = 91;

const int _SC_XOPEN_CRYPT1 = 92;

const int _SC_XOPEN_ENH_I18N1 = 93;

const int _SC_XOPEN_SHM1 = 94;

const int _SC_2_CHAR_TERM1 = 95;

const int _SC_2_C_VERSION1 = 96;

const int _SC_2_UPE1 = 97;

const int _SC_XOPEN_XPG21 = 98;

const int _SC_XOPEN_XPG31 = 99;

const int _SC_XOPEN_XPG41 = 100;

const int _SC_CHAR_BIT1 = 101;

const int _SC_CHAR_MAX1 = 102;

const int _SC_CHAR_MIN1 = 103;

const int _SC_INT_MAX1 = 104;

const int _SC_INT_MIN1 = 105;

const int _SC_LONG_BIT1 = 106;

const int _SC_WORD_BIT1 = 107;

const int _SC_MB_LEN_MAX1 = 108;

const int _SC_NZERO1 = 109;

const int _SC_SSIZE_MAX1 = 110;

const int _SC_SCHAR_MAX1 = 111;

const int _SC_SCHAR_MIN1 = 112;

const int _SC_SHRT_MAX1 = 113;

const int _SC_SHRT_MIN1 = 114;

const int _SC_UCHAR_MAX1 = 115;

const int _SC_UINT_MAX1 = 116;

const int _SC_ULONG_MAX1 = 117;

const int _SC_USHRT_MAX1 = 118;

const int _SC_NL_ARGMAX1 = 119;

const int _SC_NL_LANGMAX1 = 120;

const int _SC_NL_MSGMAX1 = 121;

const int _SC_NL_NMAX1 = 122;

const int _SC_NL_SETMAX1 = 123;

const int _SC_NL_TEXTMAX1 = 124;

const int _SC_XBS5_ILP32_OFF321 = 125;

const int _SC_XBS5_ILP32_OFFBIG1 = 126;

const int _SC_XBS5_LP64_OFF641 = 127;

const int _SC_XBS5_LPBIG_OFFBIG1 = 128;

const int _SC_XOPEN_LEGACY1 = 129;

const int _SC_XOPEN_REALTIME1 = 130;

const int _SC_XOPEN_REALTIME_THREADS1 = 131;

const int _SC_ADVISORY_INFO1 = 132;

const int _SC_BARRIERS1 = 133;

const int _SC_BASE1 = 134;

const int _SC_C_LANG_SUPPORT1 = 135;

const int _SC_C_LANG_SUPPORT_R1 = 136;

const int _SC_CLOCK_SELECTION1 = 137;

const int _SC_CPUTIME1 = 138;

const int _SC_THREAD_CPUTIME1 = 139;

const int _SC_DEVICE_IO1 = 140;

const int _SC_DEVICE_SPECIFIC1 = 141;

const int _SC_DEVICE_SPECIFIC_R1 = 142;

const int _SC_FD_MGMT1 = 143;

const int _SC_FIFO1 = 144;

const int _SC_PIPE1 = 145;

const int _SC_FILE_ATTRIBUTES1 = 146;

const int _SC_FILE_LOCKING1 = 147;

const int _SC_FILE_SYSTEM1 = 148;

const int _SC_MONOTONIC_CLOCK1 = 149;

const int _SC_MULTI_PROCESS1 = 150;

const int _SC_SINGLE_PROCESS1 = 151;

const int _SC_NETWORKING1 = 152;

const int _SC_READER_WRITER_LOCKS1 = 153;

const int _SC_SPIN_LOCKS1 = 154;

const int _SC_REGEXP1 = 155;

const int _SC_REGEX_VERSION1 = 156;

const int _SC_SHELL1 = 157;

const int _SC_SIGNALS1 = 158;

const int _SC_SPAWN1 = 159;

const int _SC_SPORADIC_SERVER1 = 160;

const int _SC_THREAD_SPORADIC_SERVER1 = 161;

const int _SC_SYSTEM_DATABASE1 = 162;

const int _SC_SYSTEM_DATABASE_R1 = 163;

const int _SC_TIMEOUTS1 = 164;

const int _SC_TYPED_MEMORY_OBJECTS1 = 165;

const int _SC_USER_GROUPS1 = 166;

const int _SC_USER_GROUPS_R1 = 167;

const int _SC_2_PBS1 = 168;

const int _SC_2_PBS_ACCOUNTING1 = 169;

const int _SC_2_PBS_LOCATE1 = 170;

const int _SC_2_PBS_MESSAGE1 = 171;

const int _SC_2_PBS_TRACK1 = 172;

const int _SC_SYMLOOP_MAX1 = 173;

const int _SC_STREAMS1 = 174;

const int _SC_2_PBS_CHECKPOINT1 = 175;

const int _SC_V6_ILP32_OFF321 = 176;

const int _SC_V6_ILP32_OFFBIG1 = 177;

const int _SC_V6_LP64_OFF641 = 178;

const int _SC_V6_LPBIG_OFFBIG1 = 179;

const int _SC_HOST_NAME_MAX1 = 180;

const int _SC_TRACE1 = 181;

const int _SC_TRACE_EVENT_FILTER1 = 182;

const int _SC_TRACE_INHERIT1 = 183;

const int _SC_TRACE_LOG1 = 184;

const int _SC_LEVEL1_ICACHE_SIZE1 = 185;

const int _SC_LEVEL1_ICACHE_ASSOC1 = 186;

const int _SC_LEVEL1_ICACHE_LINESIZE1 = 187;

const int _SC_LEVEL1_DCACHE_SIZE1 = 188;

const int _SC_LEVEL1_DCACHE_ASSOC1 = 189;

const int _SC_LEVEL1_DCACHE_LINESIZE1 = 190;

const int _SC_LEVEL2_CACHE_SIZE1 = 191;

const int _SC_LEVEL2_CACHE_ASSOC1 = 192;

const int _SC_LEVEL2_CACHE_LINESIZE1 = 193;

const int _SC_LEVEL3_CACHE_SIZE1 = 194;

const int _SC_LEVEL3_CACHE_ASSOC1 = 195;

const int _SC_LEVEL3_CACHE_LINESIZE1 = 196;

const int _SC_LEVEL4_CACHE_SIZE1 = 197;

const int _SC_LEVEL4_CACHE_ASSOC1 = 198;

const int _SC_LEVEL4_CACHE_LINESIZE1 = 199;

const int _SC_IPV61 = 235;

const int _SC_RAW_SOCKETS1 = 236;

const int _SC_V7_ILP32_OFF321 = 237;

const int _SC_V7_ILP32_OFFBIG1 = 238;

const int _SC_V7_LP64_OFF641 = 239;

const int _SC_V7_LPBIG_OFFBIG1 = 240;

const int _SC_SS_REPL_MAX1 = 241;

const int _SC_TRACE_EVENT_NAME_MAX1 = 242;

const int _SC_TRACE_NAME_MAX1 = 243;

const int _SC_TRACE_SYS_MAX1 = 244;

const int _SC_TRACE_USER_EVENT_MAX1 = 245;

const int _SC_XOPEN_STREAMS1 = 246;

const int _SC_THREAD_ROBUST_PRIO_INHERIT1 = 247;

const int _SC_THREAD_ROBUST_PRIO_PROTECT1 = 248;

const int _SC_MINSIGSTKSZ1 = 249;

const int _SC_SIGSTKSZ1 = 250;

const int _CS_PATH1 = 0;

const int _CS_V6_WIDTH_RESTRICTED_ENVS1 = 1;

const int _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS = 1;

const int _CS_GNU_LIBC_VERSION1 = 2;

const int _CS_GNU_LIBPTHREAD_VERSION1 = 3;

const int _CS_V5_WIDTH_RESTRICTED_ENVS1 = 4;

const int _CS_POSIX_V5_WIDTH_RESTRICTED_ENVS = 4;

const int _CS_V7_WIDTH_RESTRICTED_ENVS1 = 5;

const int _CS_POSIX_V7_WIDTH_RESTRICTED_ENVS = 5;

const int _CS_LFS_CFLAGS1 = 1000;

const int _CS_LFS_LDFLAGS1 = 1001;

const int _CS_LFS_LIBS1 = 1002;

const int _CS_LFS_LINTFLAGS1 = 1003;

const int _CS_LFS64_CFLAGS1 = 1004;

const int _CS_LFS64_LDFLAGS1 = 1005;

const int _CS_LFS64_LIBS1 = 1006;

const int _CS_LFS64_LINTFLAGS1 = 1007;

const int _CS_XBS5_ILP32_OFF32_CFLAGS1 = 1100;

const int _CS_XBS5_ILP32_OFF32_LDFLAGS1 = 1101;

const int _CS_XBS5_ILP32_OFF32_LIBS1 = 1102;

const int _CS_XBS5_ILP32_OFF32_LINTFLAGS1 = 1103;

const int _CS_XBS5_ILP32_OFFBIG_CFLAGS1 = 1104;

const int _CS_XBS5_ILP32_OFFBIG_LDFLAGS1 = 1105;

const int _CS_XBS5_ILP32_OFFBIG_LIBS1 = 1106;

const int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS1 = 1107;

const int _CS_XBS5_LP64_OFF64_CFLAGS1 = 1108;

const int _CS_XBS5_LP64_OFF64_LDFLAGS1 = 1109;

const int _CS_XBS5_LP64_OFF64_LIBS1 = 1110;

const int _CS_XBS5_LP64_OFF64_LINTFLAGS1 = 1111;

const int _CS_XBS5_LPBIG_OFFBIG_CFLAGS1 = 1112;

const int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS1 = 1113;

const int _CS_XBS5_LPBIG_OFFBIG_LIBS1 = 1114;

const int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS1 = 1115;

const int _CS_POSIX_V6_ILP32_OFF32_CFLAGS1 = 1116;

const int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS1 = 1117;

const int _CS_POSIX_V6_ILP32_OFF32_LIBS1 = 1118;

const int _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS1 = 1119;

const int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS1 = 1120;

const int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS1 = 1121;

const int _CS_POSIX_V6_ILP32_OFFBIG_LIBS1 = 1122;

const int _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS1 = 1123;

const int _CS_POSIX_V6_LP64_OFF64_CFLAGS1 = 1124;

const int _CS_POSIX_V6_LP64_OFF64_LDFLAGS1 = 1125;

const int _CS_POSIX_V6_LP64_OFF64_LIBS1 = 1126;

const int _CS_POSIX_V6_LP64_OFF64_LINTFLAGS1 = 1127;

const int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS1 = 1128;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS1 = 1129;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS1 = 1130;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS1 = 1131;

const int _CS_POSIX_V7_ILP32_OFF32_CFLAGS1 = 1132;

const int _CS_POSIX_V7_ILP32_OFF32_LDFLAGS1 = 1133;

const int _CS_POSIX_V7_ILP32_OFF32_LIBS1 = 1134;

const int _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS1 = 1135;

const int _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS1 = 1136;

const int _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS1 = 1137;

const int _CS_POSIX_V7_ILP32_OFFBIG_LIBS1 = 1138;

const int _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS1 = 1139;

const int _CS_POSIX_V7_LP64_OFF64_CFLAGS1 = 1140;

const int _CS_POSIX_V7_LP64_OFF64_LDFLAGS1 = 1141;

const int _CS_POSIX_V7_LP64_OFF64_LIBS1 = 1142;

const int _CS_POSIX_V7_LP64_OFF64_LINTFLAGS1 = 1143;

const int _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS1 = 1144;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS1 = 1145;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LIBS1 = 1146;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS1 = 1147;

const int _CS_V6_ENV1 = 1148;

const int _CS_V7_ENV1 = 1149;

const int _GETOPT_POSIX_H = 1;

const int _GETOPT_CORE_H = 1;

const int F_ULOCK = 0;

const int F_LOCK = 1;

const int F_TLOCK = 2;

const int F_TEST = 3;

const int _STDIO_H = 1;

const int __GLIBC_USE_LIB_EXT2 = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_TYPES_EXT = 1;

const int __GNUC_VA_LIST = 1;

const int _____fpos_t_defined = 1;

const int ____mbstate_t_defined = 1;

const int _____fpos64_t_defined = 1;

const int ____FILE_defined = 1;

const int __FILE_defined = 1;

const int __struct_FILE_defined = 1;

const int _IO_EOF_SEEN = 16;

const int _IO_ERR_SEEN = 32;

const int _IO_USER_LOCK = 32768;

const int _IOFBF = 0;

const int _IOLBF = 1;

const int _IONBF = 2;

const int BUFSIZ = 8192;

const int EOF = -1;

const String P_tmpdir = '/tmp';

const int _BITS_STDIO_LIM_H = 1;

const int L_tmpnam = 20;

const int TMP_MAX = 238328;

const int FILENAME_MAX = 4096;

const int L_ctermid = 9;

const int FOPEN_MAX = 16;

const int __HAVE_FLOAT128 = 0;

const int __HAVE_DISTINCT_FLOAT128 = 0;

const int __HAVE_FLOAT64X = 1;

const int __HAVE_FLOAT64X_LONG_DOUBLE = 1;

const int __HAVE_FLOAT16 = 0;

const int __HAVE_FLOAT32 = 1;

const int __HAVE_FLOAT64 = 1;

const int __HAVE_FLOAT32X = 1;

const int __HAVE_FLOAT128X = 0;

const int __HAVE_DISTINCT_FLOAT16 = 0;

const int __HAVE_DISTINCT_FLOAT32 = 0;

const int __HAVE_DISTINCT_FLOAT64 = 0;

const int __HAVE_DISTINCT_FLOAT32X = 0;

const int __HAVE_DISTINCT_FLOAT64X = 0;

const int __HAVE_DISTINCT_FLOAT128X = 0;

const int __HAVE_FLOAT128_UNLIKE_LDBL = 0;

const int __HAVE_FLOATN_NOT_TYPEDEF = 0;

const int _STDLIB_H = 1;

const int WNOHANG = 1;

const int WUNTRACED = 2;

const int WSTOPPED = 2;

const int WEXITED = 4;

const int WCONTINUED = 8;

const int WNOWAIT = 16777216;

const int __WNOTHREAD = 536870912;

const int __WALL = 1073741824;

const int __WCLONE = 2147483648;

const int __W_CONTINUED = 65535;

const int __WCOREFLAG = 128;

const int __ldiv_t_defined = 1;

const int __lldiv_t_defined = 1;

const int RAND_MAX = 2147483647;

const int EXIT_FAILURE = 1;

const int EXIT_SUCCESS = 0;

const int _SYS_TYPES_H = 1;

const int __clock_t_defined = 1;

const int __clockid_t_defined = 1;

const int __time_t_defined = 1;

const int __timer_t_defined = 1;

const int _BITS_STDINT_INTN_H = 1;

const int __BIT_TYPES_DEFINED__ = 1;

const int _ENDIAN_H = 1;

const int _BITS_ENDIAN_H = 1;

const int __LITTLE_ENDIAN = 1234;

const int __BIG_ENDIAN = 4321;

const int __PDP_ENDIAN = 3412;

const int _BITS_ENDIANNESS_H = 1;

const int __BYTE_ORDER = 1234;

const int __FLOAT_WORD_ORDER = 1234;

const int LITTLE_ENDIAN = 1234;

const int BIG_ENDIAN = 4321;

const int PDP_ENDIAN = 3412;

const int BYTE_ORDER = 1234;

const int _BITS_BYTESWAP_H = 1;

const int _BITS_UINTN_IDENTITY_H = 1;

const int _SYS_SELECT_H = 1;

const int __sigset_t_defined = 1;

const int _SIGSET_NWORDS = 16;

const int __timeval_defined = 1;

const int _STRUCT_TIMESPEC = 1;

const int __NFDBITS = 64;

const int FD_SETSIZE = 1024;

const int NFDBITS = 64;

const int _BITS_PTHREADTYPES_COMMON_H = 1;

const int _THREAD_SHARED_TYPES_H = 1;

const int _BITS_PTHREADTYPES_ARCH_H = 1;

const int __SIZEOF_PTHREAD_MUTEX_T = 40;

const int __SIZEOF_PTHREAD_ATTR_T = 56;

const int __SIZEOF_PTHREAD_RWLOCK_T = 56;

const int __SIZEOF_PTHREAD_BARRIER_T = 32;

const int __SIZEOF_PTHREAD_MUTEXATTR_T = 4;

const int __SIZEOF_PTHREAD_COND_T = 48;

const int __SIZEOF_PTHREAD_CONDATTR_T = 4;

const int __SIZEOF_PTHREAD_RWLOCKATTR_T = 8;

const int __SIZEOF_PTHREAD_BARRIERATTR_T = 4;

const int _THREAD_MUTEX_INTERNAL_H = 1;

const int __PTHREAD_MUTEX_HAVE_PREV = 1;

const int __PTHREAD_RWLOCK_ELISION_EXTRA = 0;

const int __have_pthread_attr_t = 1;

const int _ALLOCA_H = 1;

const int _STRING_H = 1;

const int _BITS_TYPES_LOCALE_T_H = 1;

const int _BITS_TYPES___LOCALE_T_H = 1;

const int _STRINGS_H = 1;

const int _FCNTL_H = 1;

const int __O_LARGEFILE = 0;

const int F_GETLK64 = 5;

const int F_SETLK64 = 6;

const int F_SETLKW64 = 7;

const int O_ACCMODE = 3;

const int O_RDONLY = 0;

const int O_WRONLY = 1;

const int O_RDWR = 2;

const int O_CREAT = 64;

const int O_EXCL = 128;

const int O_NOCTTY = 256;

const int O_TRUNC = 512;

const int O_APPEND = 1024;

const int O_NONBLOCK = 2048;

const int O_NDELAY = 2048;

const int O_SYNC = 1052672;

const int O_FSYNC = 1052672;

const int O_ASYNC = 8192;

const int __O_DIRECTORY = 65536;

const int __O_NOFOLLOW = 131072;

const int __O_CLOEXEC = 524288;

const int __O_DIRECT = 16384;

const int __O_NOATIME = 262144;

const int __O_PATH = 2097152;

const int __O_DSYNC = 4096;

const int __O_TMPFILE = 4259840;

const int F_GETLK = 5;

const int F_SETLK = 6;

const int F_SETLKW = 7;

const int O_DIRECTORY = 65536;

const int O_NOFOLLOW = 131072;

const int O_CLOEXEC = 524288;

const int O_DSYNC = 4096;

const int O_RSYNC = 1052672;

const int F_DUPFD = 0;

const int F_GETFD = 1;

const int F_SETFD = 2;

const int F_GETFL = 3;

const int F_SETFL = 4;

const int __F_SETOWN = 8;

const int __F_GETOWN = 9;

const int F_SETOWN = 8;

const int F_GETOWN = 9;

const int __F_SETSIG = 10;

const int __F_GETSIG = 11;

const int __F_SETOWN_EX = 15;

const int __F_GETOWN_EX = 16;

const int F_DUPFD_CLOEXEC = 1030;

const int FD_CLOEXEC = 1;

const int F_RDLCK = 0;

const int F_WRLCK = 1;

const int F_UNLCK = 2;

const int F_EXLCK = 4;

const int F_SHLCK = 8;

const int LOCK_SH = 1;

const int LOCK_EX = 2;

const int LOCK_NB = 4;

const int LOCK_UN = 8;

const int FAPPEND = 1024;

const int FFSYNC = 1052672;

const int FASYNC = 8192;

const int FNONBLOCK = 2048;

const int FNDELAY = 2048;

const int __POSIX_FADV_DONTNEED = 4;

const int __POSIX_FADV_NOREUSE = 5;

const int POSIX_FADV_NORMAL = 0;

const int POSIX_FADV_RANDOM = 1;

const int POSIX_FADV_SEQUENTIAL = 2;

const int POSIX_FADV_WILLNEED = 3;

const int POSIX_FADV_DONTNEED = 4;

const int POSIX_FADV_NOREUSE = 5;

const int AT_FDCWD = -100;

const int AT_SYMLINK_NOFOLLOW = 256;

const int AT_REMOVEDIR = 512;

const int AT_SYMLINK_FOLLOW = 1024;

const int AT_EACCESS = 512;

const int _BITS_STAT_H = 1;

const int _BITS_STRUCT_STAT_H = 1;

const int __S_IFMT = 61440;

const int __S_IFDIR = 16384;

const int __S_IFCHR = 8192;

const int __S_IFBLK = 24576;

const int __S_IFREG = 32768;

const int __S_IFIFO = 4096;

const int __S_IFLNK = 40960;

const int __S_IFSOCK = 49152;

const int __S_ISUID = 2048;

const int __S_ISGID = 1024;

const int __S_ISVTX = 512;

const int __S_IREAD = 256;

const int __S_IWRITE = 128;

const int __S_IEXEC = 64;

const int UTIME_NOW = 1073741823;

const int UTIME_OMIT = 1073741822;

const int S_IFMT = 61440;

const int S_IFDIR = 16384;

const int S_IFCHR = 8192;

const int S_IFBLK = 24576;

const int S_IFREG = 32768;

const int S_IFIFO = 4096;

const int S_IFLNK = 40960;

const int S_IFSOCK = 49152;

const int S_ISUID = 2048;

const int S_ISGID = 1024;

const int S_ISVTX = 512;

const int S_IRUSR = 256;

const int S_IWUSR = 128;

const int S_IXUSR = 64;

const int S_IRWXU = 448;

const int S_IRGRP = 32;

const int S_IWGRP = 16;

const int S_IXGRP = 8;

const int S_IRWXG = 56;

const int S_IROTH = 4;

const int S_IWOTH = 2;

const int S_IXOTH = 1;

const int S_IRWXO = 7;

const int _ASSERT_H = 1;

const int _SYS_POLL_H = 1;

const int POLLIN = 1;

const int POLLPRI = 2;

const int POLLOUT = 4;

const int POLLRDNORM = 64;

const int POLLRDBAND = 128;

const int POLLWRNORM = 256;

const int POLLWRBAND = 512;

const int POLLERR = 8;

const int POLLHUP = 16;

const int POLLNVAL = 32;

const int _ERRNO_H = 1;

const int _BITS_ERRNO_H = 1;

const int EPERM = 1;

const int ENOENT = 2;

const int ESRCH = 3;

const int EINTR = 4;

const int EIO = 5;

const int ENXIO = 6;

const int E2BIG = 7;

const int ENOEXEC = 8;

const int EBADF = 9;

const int ECHILD = 10;

const int EAGAIN = 11;

const int ENOMEM = 12;

const int EACCES = 13;

const int EFAULT = 14;

const int ENOTBLK = 15;

const int EBUSY = 16;

const int EEXIST = 17;

const int EXDEV = 18;

const int ENODEV = 19;

const int ENOTDIR = 20;

const int EISDIR = 21;

const int EINVAL = 22;

const int ENFILE = 23;

const int EMFILE = 24;

const int ENOTTY = 25;

const int ETXTBSY = 26;

const int EFBIG = 27;

const int ENOSPC = 28;

const int ESPIPE = 29;

const int EROFS = 30;

const int EMLINK = 31;

const int EPIPE = 32;

const int EDOM = 33;

const int ERANGE = 34;

const int EDEADLK = 35;

const int ENAMETOOLONG = 36;

const int ENOLCK = 37;

const int ENOSYS = 38;

const int ENOTEMPTY = 39;

const int ELOOP = 40;

const int EWOULDBLOCK = 11;

const int ENOMSG = 42;

const int EIDRM = 43;

const int ECHRNG = 44;

const int EL2NSYNC = 45;

const int EL3HLT = 46;

const int EL3RST = 47;

const int ELNRNG = 48;

const int EUNATCH = 49;

const int ENOCSI = 50;

const int EL2HLT = 51;

const int EBADE = 52;

const int EBADR = 53;

const int EXFULL = 54;

const int ENOANO = 55;

const int EBADRQC = 56;

const int EBADSLT = 57;

const int EDEADLOCK = 35;

const int EBFONT = 59;

const int ENOSTR = 60;

const int ENODATA = 61;

const int ETIME = 62;

const int ENOSR = 63;

const int ENONET = 64;

const int ENOPKG = 65;

const int EREMOTE = 66;

const int ENOLINK = 67;

const int EADV = 68;

const int ESRMNT = 69;

const int ECOMM = 70;

const int EPROTO = 71;

const int EMULTIHOP = 72;

const int EDOTDOT = 73;

const int EBADMSG = 74;

const int EOVERFLOW = 75;

const int ENOTUNIQ = 76;

const int EBADFD = 77;

const int EREMCHG = 78;

const int ELIBACC = 79;

const int ELIBBAD = 80;

const int ELIBSCN = 81;

const int ELIBMAX = 82;

const int ELIBEXEC = 83;

const int EILSEQ = 84;

const int ERESTART = 85;

const int ESTRPIPE = 86;

const int EUSERS = 87;

const int ENOTSOCK = 88;

const int EDESTADDRREQ = 89;

const int EMSGSIZE = 90;

const int EPROTOTYPE = 91;

const int ENOPROTOOPT = 92;

const int EPROTONOSUPPORT = 93;

const int ESOCKTNOSUPPORT = 94;

const int EOPNOTSUPP = 95;

const int EPFNOSUPPORT = 96;

const int EAFNOSUPPORT = 97;

const int EADDRINUSE = 98;

const int EADDRNOTAVAIL = 99;

const int ENETDOWN = 100;

const int ENETUNREACH = 101;

const int ENETRESET = 102;

const int ECONNABORTED = 103;

const int ECONNRESET = 104;

const int ENOBUFS = 105;

const int EISCONN = 106;

const int ENOTCONN = 107;

const int ESHUTDOWN = 108;

const int ETOOMANYREFS = 109;

const int ETIMEDOUT = 110;

const int ECONNREFUSED = 111;

const int EHOSTDOWN = 112;

const int EHOSTUNREACH = 113;

const int EALREADY = 114;

const int EINPROGRESS = 115;

const int ESTALE = 116;

const int EUCLEAN = 117;

const int ENOTNAM = 118;

const int ENAVAIL = 119;

const int EISNAM = 120;

const int EREMOTEIO = 121;

const int EDQUOT = 122;

const int ENOMEDIUM = 123;

const int EMEDIUMTYPE = 124;

const int ECANCELED = 125;

const int ENOKEY = 126;

const int EKEYEXPIRED = 127;

const int EKEYREVOKED = 128;

const int EKEYREJECTED = 129;

const int EOWNERDEAD = 130;

const int ENOTRECOVERABLE = 131;

const int ERFKILL = 132;

const int EHWPOISON = 133;

const int ENOTSUP = 95;

const int IEC958_AES0_PROFESSIONAL = 1;

const int IEC958_AES0_NONAUDIO = 2;

const int IEC958_AES0_PRO_EMPHASIS = 28;

const int IEC958_AES0_PRO_EMPHASIS_NOTID = 0;

const int IEC958_AES0_PRO_EMPHASIS_NONE = 4;

const int IEC958_AES0_PRO_EMPHASIS_5015 = 12;

const int IEC958_AES0_PRO_EMPHASIS_CCITT = 28;

const int IEC958_AES0_PRO_FREQ_UNLOCKED = 32;

const int IEC958_AES0_PRO_FS = 192;

const int IEC958_AES0_PRO_FS_NOTID = 0;

const int IEC958_AES0_PRO_FS_44100 = 64;

const int IEC958_AES0_PRO_FS_48000 = 128;

const int IEC958_AES0_PRO_FS_32000 = 192;

const int IEC958_AES0_CON_NOT_COPYRIGHT = 4;

const int IEC958_AES0_CON_EMPHASIS = 56;

const int IEC958_AES0_CON_EMPHASIS_NONE = 0;

const int IEC958_AES0_CON_EMPHASIS_5015 = 8;

const int IEC958_AES0_CON_MODE = 192;

const int IEC958_AES1_PRO_MODE = 15;

const int IEC958_AES1_PRO_MODE_NOTID = 0;

const int IEC958_AES1_PRO_MODE_STEREOPHONIC = 2;

const int IEC958_AES1_PRO_MODE_SINGLE = 4;

const int IEC958_AES1_PRO_MODE_TWO = 8;

const int IEC958_AES1_PRO_MODE_PRIMARY = 12;

const int IEC958_AES1_PRO_MODE_BYTE3 = 15;

const int IEC958_AES1_PRO_USERBITS = 240;

const int IEC958_AES1_PRO_USERBITS_NOTID = 0;

const int IEC958_AES1_PRO_USERBITS_192 = 128;

const int IEC958_AES1_PRO_USERBITS_UDEF = 192;

const int IEC958_AES1_CON_CATEGORY = 127;

const int IEC958_AES1_CON_GENERAL = 0;

const int IEC958_AES1_CON_LASEROPT_MASK = 7;

const int IEC958_AES1_CON_LASEROPT_ID = 1;

const int IEC958_AES1_CON_IEC908_CD = 1;

const int IEC958_AES1_CON_NON_IEC908_CD = 9;

const int IEC958_AES1_CON_MINI_DISC = 73;

const int IEC958_AES1_CON_DVD = 25;

const int IEC958_AES1_CON_LASTEROPT_OTHER = 121;

const int IEC958_AES1_CON_DIGDIGCONV_MASK = 7;

const int IEC958_AES1_CON_DIGDIGCONV_ID = 2;

const int IEC958_AES1_CON_PCM_CODER = 2;

const int IEC958_AES1_CON_MIXER = 18;

const int IEC958_AES1_CON_RATE_CONVERTER = 26;

const int IEC958_AES1_CON_SAMPLER = 34;

const int IEC958_AES1_CON_DSP = 42;

const int IEC958_AES1_CON_DIGDIGCONV_OTHER = 122;

const int IEC958_AES1_CON_MAGNETIC_MASK = 7;

const int IEC958_AES1_CON_MAGNETIC_ID = 3;

const int IEC958_AES1_CON_DAT = 3;

const int IEC958_AES1_CON_VCR = 11;

const int IEC958_AES1_CON_DCC = 67;

const int IEC958_AES1_CON_MAGNETIC_DISC = 27;

const int IEC958_AES1_CON_MAGNETIC_OTHER = 123;

const int IEC958_AES1_CON_BROADCAST1_MASK = 7;

const int IEC958_AES1_CON_BROADCAST1_ID = 4;

const int IEC958_AES1_CON_DAB_JAPAN = 4;

const int IEC958_AES1_CON_DAB_EUROPE = 12;

const int IEC958_AES1_CON_DAB_USA = 100;

const int IEC958_AES1_CON_SOFTWARE = 68;

const int IEC958_AES1_CON_IEC62105 = 36;

const int IEC958_AES1_CON_BROADCAST1_OTHER = 124;

const int IEC958_AES1_CON_BROADCAST2_MASK = 15;

const int IEC958_AES1_CON_BROADCAST2_ID = 14;

const int IEC958_AES1_CON_MUSICAL_MASK = 7;

const int IEC958_AES1_CON_MUSICAL_ID = 5;

const int IEC958_AES1_CON_SYNTHESIZER = 5;

const int IEC958_AES1_CON_MICROPHONE = 13;

const int IEC958_AES1_CON_MUSICAL_OTHER = 125;

const int IEC958_AES1_CON_ADC_MASK = 31;

const int IEC958_AES1_CON_ADC_ID = 6;

const int IEC958_AES1_CON_ADC = 6;

const int IEC958_AES1_CON_ADC_OTHER = 102;

const int IEC958_AES1_CON_ADC_COPYRIGHT_MASK = 31;

const int IEC958_AES1_CON_ADC_COPYRIGHT_ID = 22;

const int IEC958_AES1_CON_ADC_COPYRIGHT = 22;

const int IEC958_AES1_CON_ADC_COPYRIGHT_OTHER = 118;

const int IEC958_AES1_CON_SOLIDMEM_MASK = 15;

const int IEC958_AES1_CON_SOLIDMEM_ID = 8;

const int IEC958_AES1_CON_SOLIDMEM_DIGITAL_RECORDER_PLAYER = 8;

const int IEC958_AES1_CON_SOLIDMEM_OTHER = 120;

const int IEC958_AES1_CON_EXPERIMENTAL = 64;

const int IEC958_AES1_CON_ORIGINAL = 128;

const int IEC958_AES2_PRO_SBITS = 7;

const int IEC958_AES2_PRO_SBITS_20 = 2;

const int IEC958_AES2_PRO_SBITS_24 = 4;

const int IEC958_AES2_PRO_SBITS_UDEF = 6;

const int IEC958_AES2_PRO_WORDLEN = 56;

const int IEC958_AES2_PRO_WORDLEN_NOTID = 0;

const int IEC958_AES2_PRO_WORDLEN_22_18 = 16;

const int IEC958_AES2_PRO_WORDLEN_23_19 = 32;

const int IEC958_AES2_PRO_WORDLEN_24_20 = 40;

const int IEC958_AES2_PRO_WORDLEN_20_16 = 48;

const int IEC958_AES2_CON_SOURCE = 15;

const int IEC958_AES2_CON_SOURCE_UNSPEC = 0;

const int IEC958_AES2_CON_CHANNEL = 240;

const int IEC958_AES2_CON_CHANNEL_UNSPEC = 0;

const int IEC958_AES3_CON_FS = 15;

const int IEC958_AES3_CON_FS_44100 = 0;

const int IEC958_AES3_CON_FS_NOTID = 1;

const int IEC958_AES3_CON_FS_48000 = 2;

const int IEC958_AES3_CON_FS_32000 = 3;

const int IEC958_AES3_CON_FS_22050 = 4;

const int IEC958_AES3_CON_FS_24000 = 6;

const int IEC958_AES3_CON_FS_88200 = 8;

const int IEC958_AES3_CON_FS_768000 = 9;

const int IEC958_AES3_CON_FS_96000 = 10;

const int IEC958_AES3_CON_FS_176400 = 12;

const int IEC958_AES3_CON_FS_192000 = 14;

const int IEC958_AES3_CON_CLOCK = 48;

const int IEC958_AES3_CON_CLOCK_1000PPM = 0;

const int IEC958_AES3_CON_CLOCK_50PPM = 16;

const int IEC958_AES3_CON_CLOCK_VARIABLE = 32;

const int IEC958_AES4_CON_MAX_WORDLEN_24 = 1;

const int IEC958_AES4_CON_WORDLEN = 14;

const int IEC958_AES4_CON_WORDLEN_NOTID = 0;

const int IEC958_AES4_CON_WORDLEN_20_16 = 2;

const int IEC958_AES4_CON_WORDLEN_22_18 = 4;

const int IEC958_AES4_CON_WORDLEN_23_19 = 8;

const int IEC958_AES4_CON_WORDLEN_24_20 = 10;

const int IEC958_AES4_CON_WORDLEN_21_17 = 12;

const int IEC958_AES4_CON_ORIGFS = 240;

const int IEC958_AES4_CON_ORIGFS_NOTID = 0;

const int IEC958_AES4_CON_ORIGFS_192000 = 16;

const int IEC958_AES4_CON_ORIGFS_12000 = 32;

const int IEC958_AES4_CON_ORIGFS_176400 = 48;

const int IEC958_AES4_CON_ORIGFS_96000 = 80;

const int IEC958_AES4_CON_ORIGFS_8000 = 96;

const int IEC958_AES4_CON_ORIGFS_88200 = 112;

const int IEC958_AES4_CON_ORIGFS_16000 = 128;

const int IEC958_AES4_CON_ORIGFS_24000 = 144;

const int IEC958_AES4_CON_ORIGFS_11025 = 160;

const int IEC958_AES4_CON_ORIGFS_22050 = 176;

const int IEC958_AES4_CON_ORIGFS_32000 = 192;

const int IEC958_AES4_CON_ORIGFS_48000 = 208;

const int IEC958_AES4_CON_ORIGFS_44100 = 240;

const int IEC958_AES5_CON_CGMSA = 3;

const int IEC958_AES5_CON_CGMSA_COPYFREELY = 0;

const int IEC958_AES5_CON_CGMSA_COPYONCE = 1;

const int IEC958_AES5_CON_CGMSA_COPYNOMORE = 2;

const int IEC958_AES5_CON_CGMSA_COPYNEVER = 3;

const int CEA861_AUDIO_INFOFRAME_DB1CC = 7;

const int CEA861_AUDIO_INFOFRAME_DB1CT = 240;

const int CEA861_AUDIO_INFOFRAME_DB1CT_FROM_STREAM = 0;

const int CEA861_AUDIO_INFOFRAME_DB1CT_IEC60958 = 16;

const int CEA861_AUDIO_INFOFRAME_DB1CT_AC3 = 32;

const int CEA861_AUDIO_INFOFRAME_DB1CT_MPEG1 = 48;

const int CEA861_AUDIO_INFOFRAME_DB1CT_MP3 = 64;

const int CEA861_AUDIO_INFOFRAME_DB1CT_MPEG2_MULTICH = 80;

const int CEA861_AUDIO_INFOFRAME_DB1CT_AAC = 96;

const int CEA861_AUDIO_INFOFRAME_DB1CT_DTS = 112;

const int CEA861_AUDIO_INFOFRAME_DB1CT_ATRAC = 128;

const int CEA861_AUDIO_INFOFRAME_DB1CT_ONEBIT = 144;

const int CEA861_AUDIO_INFOFRAME_DB1CT_DOLBY_DIG_PLUS = 160;

const int CEA861_AUDIO_INFOFRAME_DB1CT_DTS_HD = 176;

const int CEA861_AUDIO_INFOFRAME_DB1CT_MAT = 192;

const int CEA861_AUDIO_INFOFRAME_DB1CT_DST = 208;

const int CEA861_AUDIO_INFOFRAME_DB1CT_WMA_PRO = 224;

const int CEA861_AUDIO_INFOFRAME_DB2SF = 28;

const int CEA861_AUDIO_INFOFRAME_DB2SF_FROM_STREAM = 0;

const int CEA861_AUDIO_INFOFRAME_DB2SF_32000 = 4;

const int CEA861_AUDIO_INFOFRAME_DB2SF_44100 = 8;

const int CEA861_AUDIO_INFOFRAME_DB2SF_48000 = 12;

const int CEA861_AUDIO_INFOFRAME_DB2SF_88200 = 16;

const int CEA861_AUDIO_INFOFRAME_DB2SF_96000 = 20;

const int CEA861_AUDIO_INFOFRAME_DB2SF_176400 = 24;

const int CEA861_AUDIO_INFOFRAME_DB2SF_192000 = 28;

const int CEA861_AUDIO_INFOFRAME_DB2SS = 3;

const int CEA861_AUDIO_INFOFRAME_DB2SS_FROM_STREAM = 0;

const int CEA861_AUDIO_INFOFRAME_DB2SS_16BIT = 1;

const int CEA861_AUDIO_INFOFRAME_DB2SS_20BIT = 2;

const int CEA861_AUDIO_INFOFRAME_DB2SS_24BIT = 3;

const int CEA861_AUDIO_INFOFRAME_DB5_DM_INH = 128;

const int CEA861_AUDIO_INFOFRAME_DB5_DM_INH_PERMITTED = 0;

const int CEA861_AUDIO_INFOFRAME_DB5_DM_INH_PROHIBITED = 128;

const int CEA861_AUDIO_INFOFRAME_DB5_LSV = 120;

const int MIDI_CHANNELS = 16;

const int MIDI_GM_DRUM_CHANNEL = 9;

const int MIDI_CMD_NOTE_OFF = 128;

const int MIDI_CMD_NOTE_ON = 144;

const int MIDI_CMD_NOTE_PRESSURE = 160;

const int MIDI_CMD_CONTROL = 176;

const int MIDI_CMD_PGM_CHANGE = 192;

const int MIDI_CMD_CHANNEL_PRESSURE = 208;

const int MIDI_CMD_BENDER = 224;

const int MIDI_CMD_COMMON_SYSEX = 240;

const int MIDI_CMD_COMMON_MTC_QUARTER = 241;

const int MIDI_CMD_COMMON_SONG_POS = 242;

const int MIDI_CMD_COMMON_SONG_SELECT = 243;

const int MIDI_CMD_COMMON_TUNE_REQUEST = 246;

const int MIDI_CMD_COMMON_SYSEX_END = 247;

const int MIDI_CMD_COMMON_CLOCK = 248;

const int MIDI_CMD_COMMON_START = 250;

const int MIDI_CMD_COMMON_CONTINUE = 251;

const int MIDI_CMD_COMMON_STOP = 252;

const int MIDI_CMD_COMMON_SENSING = 254;

const int MIDI_CMD_COMMON_RESET = 255;

const int MIDI_CTL_MSB_BANK = 0;

const int MIDI_CTL_MSB_MODWHEEL = 1;

const int MIDI_CTL_MSB_BREATH = 2;

const int MIDI_CTL_MSB_FOOT = 4;

const int MIDI_CTL_MSB_PORTAMENTO_TIME = 5;

const int MIDI_CTL_MSB_DATA_ENTRY = 6;

const int MIDI_CTL_MSB_MAIN_VOLUME = 7;

const int MIDI_CTL_MSB_BALANCE = 8;

const int MIDI_CTL_MSB_PAN = 10;

const int MIDI_CTL_MSB_EXPRESSION = 11;

const int MIDI_CTL_MSB_EFFECT1 = 12;

const int MIDI_CTL_MSB_EFFECT2 = 13;

const int MIDI_CTL_MSB_GENERAL_PURPOSE1 = 16;

const int MIDI_CTL_MSB_GENERAL_PURPOSE2 = 17;

const int MIDI_CTL_MSB_GENERAL_PURPOSE3 = 18;

const int MIDI_CTL_MSB_GENERAL_PURPOSE4 = 19;

const int MIDI_CTL_LSB_BANK = 32;

const int MIDI_CTL_LSB_MODWHEEL = 33;

const int MIDI_CTL_LSB_BREATH = 34;

const int MIDI_CTL_LSB_FOOT = 36;

const int MIDI_CTL_LSB_PORTAMENTO_TIME = 37;

const int MIDI_CTL_LSB_DATA_ENTRY = 38;

const int MIDI_CTL_LSB_MAIN_VOLUME = 39;

const int MIDI_CTL_LSB_BALANCE = 40;

const int MIDI_CTL_LSB_PAN = 42;

const int MIDI_CTL_LSB_EXPRESSION = 43;

const int MIDI_CTL_LSB_EFFECT1 = 44;

const int MIDI_CTL_LSB_EFFECT2 = 45;

const int MIDI_CTL_LSB_GENERAL_PURPOSE1 = 48;

const int MIDI_CTL_LSB_GENERAL_PURPOSE2 = 49;

const int MIDI_CTL_LSB_GENERAL_PURPOSE3 = 50;

const int MIDI_CTL_LSB_GENERAL_PURPOSE4 = 51;

const int MIDI_CTL_SUSTAIN = 64;

const int MIDI_CTL_PORTAMENTO = 65;

const int MIDI_CTL_SOSTENUTO = 66;

const int MIDI_CTL_SUSTENUTO = 66;

const int MIDI_CTL_SOFT_PEDAL = 67;

const int MIDI_CTL_LEGATO_FOOTSWITCH = 68;

const int MIDI_CTL_HOLD2 = 69;

const int MIDI_CTL_SC1_SOUND_VARIATION = 70;

const int MIDI_CTL_SC2_TIMBRE = 71;

const int MIDI_CTL_SC3_RELEASE_TIME = 72;

const int MIDI_CTL_SC4_ATTACK_TIME = 73;

const int MIDI_CTL_SC5_BRIGHTNESS = 74;

const int MIDI_CTL_SC6 = 75;

const int MIDI_CTL_SC7 = 76;

const int MIDI_CTL_SC8 = 77;

const int MIDI_CTL_SC9 = 78;

const int MIDI_CTL_SC10 = 79;

const int MIDI_CTL_GENERAL_PURPOSE5 = 80;

const int MIDI_CTL_GENERAL_PURPOSE6 = 81;

const int MIDI_CTL_GENERAL_PURPOSE7 = 82;

const int MIDI_CTL_GENERAL_PURPOSE8 = 83;

const int MIDI_CTL_PORTAMENTO_CONTROL = 84;

const int MIDI_CTL_E1_REVERB_DEPTH = 91;

const int MIDI_CTL_E2_TREMOLO_DEPTH = 92;

const int MIDI_CTL_E3_CHORUS_DEPTH = 93;

const int MIDI_CTL_E4_DETUNE_DEPTH = 94;

const int MIDI_CTL_E5_PHASER_DEPTH = 95;

const int MIDI_CTL_DATA_INCREMENT = 96;

const int MIDI_CTL_DATA_DECREMENT = 97;

const int MIDI_CTL_NONREG_PARM_NUM_LSB = 98;

const int MIDI_CTL_NONREG_PARM_NUM_MSB = 99;

const int MIDI_CTL_REGIST_PARM_NUM_LSB = 100;

const int MIDI_CTL_REGIST_PARM_NUM_MSB = 101;

const int MIDI_CTL_ALL_SOUNDS_OFF = 120;

const int MIDI_CTL_RESET_CONTROLLERS = 121;

const int MIDI_CTL_LOCAL_CONTROL_SWITCH = 122;

const int MIDI_CTL_ALL_NOTES_OFF = 123;

const int MIDI_CTL_OMNI_OFF = 124;

const int MIDI_CTL_OMNI_ON = 125;

const int MIDI_CTL_MONO1 = 126;

const int MIDI_CTL_MONO2 = 127;

const int SND_LIB_MAJOR = 1;

const int SND_LIB_MINOR = 2;

const int SND_LIB_SUBMINOR = 6;

const int SND_LIB_EXTRAVER = 1000000;

const int SND_LIB_VERSION = 66054;

const String SND_LIB_VERSION_STR = '1.2.6.1';

const int _TIME_H = 1;

const int _BITS_TIME_H = 1;

const int CLOCKS_PER_SEC = 1000000;

const int CLOCK_REALTIME = 0;

const int CLOCK_MONOTONIC = 1;

const int CLOCK_PROCESS_CPUTIME_ID = 2;

const int CLOCK_THREAD_CPUTIME_ID = 3;

const int CLOCK_MONOTONIC_RAW = 4;

const int CLOCK_REALTIME_COARSE = 5;

const int CLOCK_MONOTONIC_COARSE = 6;

const int CLOCK_BOOTTIME = 7;

const int CLOCK_REALTIME_ALARM = 8;

const int CLOCK_BOOTTIME_ALARM = 9;

const int CLOCK_TAI = 11;

const int TIMER_ABSTIME = 1;

const int __struct_tm_defined = 1;

const int __itimerspec_defined = 1;

const int TIME_UTC = 1;

const int SND_ERROR_BEGIN = 500000;

const int SND_ERROR_INCOMPATIBLE_VERSION = 500000;

const int SND_ERROR_ALISP_NIL = 500001;

const int _STDINT_H = 1;

const int _BITS_WCHAR_H = 1;

const int __WCHAR_MAX = 2147483647;

const int __WCHAR_MIN = -2147483648;

const int _BITS_STDINT_UINTN_H = 1;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -9223372036854775808;

const int INT_FAST32_MIN = -9223372036854775808;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 9223372036854775807;

const int INT_FAST32_MAX = 9223372036854775807;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = -1;

const int UINT_FAST32_MAX = -1;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int SIZE_MAX = -1;

const int WCHAR_MIN = -2147483648;

const int WCHAR_MAX = 2147483647;

const int WINT_MIN = 0;

const int WINT_MAX = 4294967295;

const int SND_PCM_NONBLOCK = 1;

const int SND_PCM_ASYNC = 2;

const int SND_PCM_ABORT = 32768;

const int SND_PCM_NO_AUTO_RESAMPLE = 65536;

const int SND_PCM_NO_AUTO_CHANNELS = 131072;

const int SND_PCM_NO_AUTO_FORMAT = 262144;

const int SND_PCM_NO_SOFTVOL = 524288;

const int SND_CHMAP_API_VERSION = 65537;

const int SND_CHMAP_POSITION_MASK = 65535;

const int SND_CHMAP_PHASE_INVERSE = 65536;

const int SND_CHMAP_DRIVER_SPEC = 131072;

const int SND_RAWMIDI_APPEND = 1;

const int SND_RAWMIDI_NONBLOCK = 2;

const int SND_RAWMIDI_SYNC = 4;

const int SND_TIMER_GLOBAL_SYSTEM = 0;

const int SND_TIMER_GLOBAL_RTC = 1;

const int SND_TIMER_GLOBAL_HPET = 2;

const int SND_TIMER_GLOBAL_HRTIMER = 3;

const int SND_TIMER_OPEN_NONBLOCK = 1;

const int SND_TIMER_OPEN_TREAD = 2;

const int SND_HWDEP_OPEN_READ = 0;

const int SND_HWDEP_OPEN_WRITE = 1;

const int SND_HWDEP_OPEN_DUPLEX = 2;

const int SND_HWDEP_OPEN_NONBLOCK = 2048;

const int SND_CTL_EVENT_MASK_REMOVE = 4294967295;

const int SND_CTL_EVENT_MASK_VALUE = 1;

const int SND_CTL_EVENT_MASK_INFO = 2;

const int SND_CTL_EVENT_MASK_ADD = 4;

const int SND_CTL_EVENT_MASK_TLV = 8;

const String SND_CTL_NAME_NONE = '';

const String SND_CTL_NAME_PLAYBACK = 'Playback ';

const String SND_CTL_NAME_CAPTURE = 'Capture ';

const String SND_CTL_NAME_IEC958_NONE = '';

const String SND_CTL_NAME_IEC958_SWITCH = 'Switch';

const String SND_CTL_NAME_IEC958_VOLUME = 'Volume';

const String SND_CTL_NAME_IEC958_DEFAULT = 'Default';

const String SND_CTL_NAME_IEC958_MASK = 'Mask';

const String SND_CTL_NAME_IEC958_CON_MASK = 'Con Mask';

const String SND_CTL_NAME_IEC958_PRO_MASK = 'Pro Mask';

const String SND_CTL_NAME_IEC958_PCM_STREAM = 'PCM Stream';

const int SND_CTL_POWER_MASK = 65280;

const int SND_CTL_POWER_D0 = 0;

const int SND_CTL_POWER_D1 = 256;

const int SND_CTL_POWER_D2 = 512;

const int SND_CTL_POWER_D3 = 768;

const int SND_CTL_POWER_D3hot = 768;

const int SND_CTL_POWER_D3cold = 769;

const int SND_CTL_TLVT_CONTAINER = 0;

const int SND_CTL_TLVT_DB_SCALE = 1;

const int SND_CTL_TLVT_DB_LINEAR = 2;

const int SND_CTL_TLVT_DB_RANGE = 3;

const int SND_CTL_TLVT_DB_MINMAX = 4;

const int SND_CTL_TLVT_DB_MINMAX_MUTE = 5;

const int SND_CTL_TLV_DB_GAIN_MUTE = -9999999;

const int SND_CTL_TLVT_CHMAP_FIXED = 257;

const int SND_CTL_TLVT_CHMAP_VAR = 258;

const int SND_CTL_TLVT_CHMAP_PAIRED = 259;

const int SND_CTL_NONBLOCK = 1;

const int SND_CTL_ASYNC = 2;

const int SND_CTL_READONLY = 4;

const int SND_SCTL_NOFREE = 1;

const int SND_SEQ_TIME_STAMP_TICK = 0;

const int SND_SEQ_TIME_STAMP_REAL = 1;

const int SND_SEQ_TIME_STAMP_MASK = 1;

const int SND_SEQ_TIME_MODE_ABS = 0;

const int SND_SEQ_TIME_MODE_REL = 2;

const int SND_SEQ_TIME_MODE_MASK = 2;

const int SND_SEQ_EVENT_LENGTH_FIXED = 0;

const int SND_SEQ_EVENT_LENGTH_VARIABLE = 4;

const int SND_SEQ_EVENT_LENGTH_VARUSR = 8;

const int SND_SEQ_EVENT_LENGTH_MASK = 12;

const int SND_SEQ_PRIORITY_NORMAL = 0;

const int SND_SEQ_PRIORITY_HIGH = 16;

const int SND_SEQ_PRIORITY_MASK = 16;

const int SND_SEQ_OPEN_OUTPUT = 1;

const int SND_SEQ_OPEN_INPUT = 2;

const int SND_SEQ_OPEN_DUPLEX = 3;

const int SND_SEQ_NONBLOCK = 1;

const int SND_SEQ_ADDRESS_UNKNOWN = 253;

const int SND_SEQ_ADDRESS_SUBSCRIBERS = 254;

const int SND_SEQ_ADDRESS_BROADCAST = 255;

const int SND_SEQ_CLIENT_SYSTEM = 0;

const int SND_SEQ_PORT_SYSTEM_TIMER = 0;

const int SND_SEQ_PORT_SYSTEM_ANNOUNCE = 1;

const int SND_SEQ_PORT_CAP_READ = 1;

const int SND_SEQ_PORT_CAP_WRITE = 2;

const int SND_SEQ_PORT_CAP_SYNC_READ = 4;

const int SND_SEQ_PORT_CAP_SYNC_WRITE = 8;

const int SND_SEQ_PORT_CAP_DUPLEX = 16;

const int SND_SEQ_PORT_CAP_SUBS_READ = 32;

const int SND_SEQ_PORT_CAP_SUBS_WRITE = 64;

const int SND_SEQ_PORT_CAP_NO_EXPORT = 128;

const int SND_SEQ_PORT_TYPE_SPECIFIC = 1;

const int SND_SEQ_PORT_TYPE_MIDI_GENERIC = 2;

const int SND_SEQ_PORT_TYPE_MIDI_GM = 4;

const int SND_SEQ_PORT_TYPE_MIDI_GS = 8;

const int SND_SEQ_PORT_TYPE_MIDI_XG = 16;

const int SND_SEQ_PORT_TYPE_MIDI_MT32 = 32;

const int SND_SEQ_PORT_TYPE_MIDI_GM2 = 64;

const int SND_SEQ_PORT_TYPE_SYNTH = 1024;

const int SND_SEQ_PORT_TYPE_DIRECT_SAMPLE = 2048;

const int SND_SEQ_PORT_TYPE_SAMPLE = 4096;

const int SND_SEQ_PORT_TYPE_HARDWARE = 65536;

const int SND_SEQ_PORT_TYPE_SOFTWARE = 131072;

const int SND_SEQ_PORT_TYPE_SYNTHESIZER = 262144;

const int SND_SEQ_PORT_TYPE_PORT = 524288;

const int SND_SEQ_PORT_TYPE_APPLICATION = 1048576;

const int SND_SEQ_QUEUE_DIRECT = 253;

const int SND_SEQ_REMOVE_INPUT = 1;

const int SND_SEQ_REMOVE_OUTPUT = 2;

const int SND_SEQ_REMOVE_DEST = 4;

const int SND_SEQ_REMOVE_DEST_CHANNEL = 8;

const int SND_SEQ_REMOVE_TIME_BEFORE = 16;

const int SND_SEQ_REMOVE_TIME_AFTER = 32;

const int SND_SEQ_REMOVE_TIME_TICK = 64;

const int SND_SEQ_REMOVE_EVENT_TYPE = 128;

const int SND_SEQ_REMOVE_IGNORE_OFF = 256;

const int SND_SEQ_REMOVE_TAG_MATCH = 512;
